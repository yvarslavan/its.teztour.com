#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Flask Helpdesk
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ë–î, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import sys
import sqlite3
import subprocess
import logging
from pathlib import Path
from datetime import datetime
import shutil
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('database_init.log', mode='a', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class DatabaseInitializer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, app_root=None):
        self.app_root = Path(app_root) if app_root else project_root
        self.db_dir = self.app_root / 'blog' / 'db'
        self.db_path = self.db_dir / 'blog.db'
        self.sql_dump_path = self.db_dir / 'blog.db.sql'
        self.migrations_dir = self.app_root / 'migrations'

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.db_dir.mkdir(parents=True, exist_ok=True)

        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ë–î –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.app_root}")
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î: {self.db_dir}")
        logger.info(f"üìÑ –ü—É—Ç—å –∫ –ë–î: {self.db_path}")

    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            from blog import create_app
            logger.info("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
        if not self.migrations_dir.exists():
            logger.warning("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        else:
            logger.info("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º flask-migrate
        try:
            import flask_migrate
            logger.info("‚úÖ Flask-Migrate –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            logger.error("‚ùå Flask-Migrate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False

        return True

    def backup_existing_database(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î"""
        if self.db_path.exists():
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = self.db_dir / f"blog_backup_{timestamp}.db"

            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_path}")
            shutil.copy2(self.db_path, backup_path)
            return backup_path
        return None

    def create_database_from_sql(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQL –¥–∞–º–ø–∞"""
        if not self.sql_dump_path.exists():
            logger.error(f"‚ùå SQL –¥–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.sql_dump_path}")
            return False

        logger.info("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –∏–∑ SQL –¥–∞–º–ø–∞...")

        try:
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.db_path.exists():
                self.db_path.unlink()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î –∏–∑ SQL
            with sqlite3.connect(self.db_path) as conn:
                with open(self.sql_dump_path, 'r', encoding='utf-8') as f:
                    sql_content = f.read()
                    conn.executescript(sql_content)
                    conn.commit()

            logger.info("‚úÖ –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ SQL –¥–∞–º–ø–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –∏–∑ SQL: {e}")
            return False

    def init_migrations(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–∏–≥—Ä–∞—Ü–∏–π"""
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            os.chdir(self.app_root)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
            if not (self.migrations_dir / 'env.py').exists():
                logger.info("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-Migrate...")
                result = subprocess.run(
                    [sys.executable, '-m', 'flask', 'db', 'init'],
                    capture_output=True,
                    text=True,
                    env=dict(os.environ, FLASK_APP='app.py')
                )

                if result.returncode != 0:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
                    return False

                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False

    def apply_migrations(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")

        try:
            os.chdir(self.app_root)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            result = subprocess.run(
                [sys.executable, '-m', 'flask', 'db', 'upgrade'],
                capture_output=True,
                text=True,
                env=dict(os.environ, FLASK_APP='app.py')
            )

            if result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
                return False

            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            logger.info(f"üìÑ –í—ã–≤–æ–¥: {result.stdout}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False

    def create_admin_user(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

        try:
            from blog import create_app, db
            from blog.models import User
            from blog import bcrypt

            app = create_app()

            with app.app_context():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                admin = User.query.filter_by(is_admin=True).first()
                if admin:
                    logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {admin.username}")
                    return True

                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_user = User(
                    username='admin',
                    full_name='–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    email='admin@tez-tour.com',
                    password=bcrypt.generate_password_hash('admin123').decode('utf-8'),
                    is_admin=True,
                    department='IT',
                    position='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
                    image_file='default.jpg'
                )

                db.session.add(admin_user)
                db.session.commit()

                logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω (admin/admin123)")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False

    def verify_database(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ë–î"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            from blog import create_app, db
            from blog.models import User, Post, Notifications

            app = create_app()

            with app.app_context():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                tables_to_check = [User, Post, Notifications]
                for model in tables_to_check:
                    count = model.query.count()
                    logger.info(f"üìä {model.__tablename__}: {count} –∑–∞–ø–∏—Å–µ–π")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                db.session.execute('SELECT 1')
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False

    def run_full_initialization(self, force=False, from_sql=False):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not self.check_environment():
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.db_path.exists() and not force:
            logger.warning("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            response = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
            if response.lower() != 'y':
                logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False

        backup_path = self.backup_existing_database()
        if backup_path:
            logger.info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ë–î
        if from_sql and self.sql_dump_path.exists():
            # –°–æ–∑–¥–∞–µ–º –∏–∑ SQL –¥–∞–º–ø–∞
            if not self.create_database_from_sql():
                return False
        else:
            # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
            if not self.init_migrations():
                return False

            if not self.apply_migrations():
                return False

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.create_admin_user():
            logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not self.verify_database():
            return False

        logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Flask Helpdesk')
    parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ë–î')
    parser.add_argument('--from-sql', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –ë–î –∏–∑ SQL –¥–∞–º–ø–∞')
    parser.add_argument('--app-root', help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    parser.add_argument('--check-only', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î')

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    initializer = DatabaseInitializer(args.app_root)

    if args.check_only:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
        if initializer.verify_database():
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ")
            sys.exit(0)
        else:
            logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
    else:
        # –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        success = initializer.run_full_initialization(
            force=args.force,
            from_sql=args.from_sql
        )

        sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
