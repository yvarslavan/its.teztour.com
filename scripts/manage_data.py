#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ Flask Helpdesk
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç, –∏–º–ø–æ—Ä—Ç, –æ—á–∏—Å—Ç–∫—É –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import sys
import sqlite3
import json
import logging
from pathlib import Path
from datetime import datetime
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('data_management.log', mode='a', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class DataManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""

    def __init__(self, app_root=None):
        self.app_root = Path(app_root) if app_root else project_root
        self.db_dir = self.app_root / 'blog' / 'db'
        self.db_path = self.db_dir / 'blog.db'
        self.exports_dir = self.db_dir / 'exports'

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
        self.exports_dir.mkdir(parents=True, exist_ok=True)

        logger.info(f"üóÑÔ∏è  –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.app_root}")
        logger.info(f"üìÑ –ü—É—Ç—å –∫ –ë–î: {self.db_path}")

    def check_database_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_path.exists():
            logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
            return False

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
        return True

    def export_data(self, tables=None, format='json'):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        if not self.check_database_exists():
            return False

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
                if not tables:
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'")
                    tables = [row[0] for row in cursor.fetchall()]

                logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü: {tables}")

                export_data = {}

                for table in tables:
                    logger.info(f"üìã –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: {table}")

                    cursor.execute(f"SELECT * FROM {table}")
                    rows = cursor.fetchall()

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Row –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
                    table_data = []
                    for row in rows:
                        table_data.append(dict(row))

                    export_data[table] = {
                        'count': len(table_data),
                        'data': table_data
                    }

                    logger.info(f"  ‚úÖ {len(table_data)} –∑–∞–ø–∏—Å–µ–π")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                if format.lower() == 'json':
                    export_file = self.exports_dir / f"export_{timestamp}.json"

                    # –ö–∞—Å—Ç–æ–º–Ω—ã–π JSON encoder –¥–ª—è datetime
                    def json_serializer(obj):
                        if isinstance(obj, datetime):
                            return obj.isoformat()
                        raise TypeError(f"Object of type {type(obj)} is not JSON serializable")

                    with open(export_file, 'w', encoding='utf-8') as f:
                        json.dump(export_data, f, ensure_ascii=False, indent=2, default=json_serializer)

                elif format.lower() == 'sql':
                    export_file = self.exports_dir / f"export_{timestamp}.sql"

                    with open(export_file, 'w', encoding='utf-8') as f:
                        # –≠–∫—Å–ø–æ—Ä—Ç –≤ SQL —Ñ–æ—Ä–º–∞—Ç
                        for table in tables:
                            f.write(f"-- Table: {table}\n")

                            cursor.execute(f"SELECT sql FROM sqlite_master WHERE type='table' AND name='{table}'")
                            create_sql = cursor.fetchone()
                            if create_sql:
                                f.write(f"{create_sql[0]};\n\n")

                            cursor.execute(f"SELECT * FROM {table}")
                            rows = cursor.fetchall()

                            if rows:
                                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                                cursor.execute(f"PRAGMA table_info({table})")
                                columns = [col[1] for col in cursor.fetchall()]

                                for row in rows:
                                    values = []
                                    for value in row:
                                        if value is None:
                                            values.append('NULL')
                                        elif isinstance(value, str):
                                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
                                            escaped = value.replace("'", "''")
                                            values.append(f"'{escaped}'")
                                        else:
                                            values.append(str(value))

                                    f.write(f"INSERT INTO {table} ({', '.join(columns)}) VALUES ({', '.join(values)});\n")

                            f.write("\n")

                logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {export_file}")
                logger.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(export_data)}")

                return str(export_file)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False

    def import_data(self, import_file, clear_tables=False):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.check_database_exists():
            return False

        import_path = Path(import_file)
        if not import_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {import_file}")
            return False

        logger.info(f"üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑: {import_file}")

        try:
            from blog import create_app, db

            app = create_app()

            with app.app_context():
                if import_path.suffix.lower() == '.json':
                    # –ò–º–ø–æ—Ä—Ç –∏–∑ JSON
                    with open(import_path, 'r', encoding='utf-8') as f:
                        import_data = json.load(f)

                    for table_name, table_info in import_data.items():
                        logger.info(f"üìã –ò–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: {table_name} ({table_info['count']} –∑–∞–ø–∏—Å–µ–π)")

                        if clear_tables:
                            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
                            db.session.execute(f"DELETE FROM {table_name}")
                            logger.info(f"  üóëÔ∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –æ—á–∏—â–µ–Ω–∞")

                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                        for record in table_info['data']:
                            # –°–æ–∑–¥–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                            columns = list(record.keys())
                            values = list(record.values())

                            placeholders = ', '.join(['?' for _ in columns])
                            sql = f"INSERT OR REPLACE INTO {table_name} ({', '.join(columns)}) VALUES ({placeholders})"

                            db.session.execute(sql, values)

                        db.session.commit()
                        logger.info(f"  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(table_info['data'])}")

                elif import_path.suffix.lower() == '.sql':
                    # –ò–º–ø–æ—Ä—Ç –∏–∑ SQL
                    with open(import_path, 'r', encoding='utf-8') as f:
                        sql_content = f.read()

                    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
                    db.session.execute(sql_content)
                    db.session.commit()
                    logger.info("‚úÖ SQL —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")

                logger.info("üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return False

    def clear_data(self, tables=None, confirm=False):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        if not self.check_database_exists():
            return False

        if not confirm:
            logger.warning("‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (--confirm)")
            return False

        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
                if not tables:
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' AND name != 'alembic_version'")
                    tables = [row[0] for row in cursor.fetchall()]

                logger.info(f"üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü: {tables}")

                for table in tables:
                    cursor.execute(f"DELETE FROM {table}")
                    logger.info(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} –æ—á–∏—â–µ–Ω–∞")

                conn.commit()
                logger.info("üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False

    def create_test_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        logger.info("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        try:
            from blog import create_app, db
            from blog.models import User, Post
            from blog import bcrypt

            app = create_app()

            with app.app_context():
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                test_users = [
                    {
                        'username': 'testuser1',
                        'full_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1',
                        'email': 'test1@tez-tour.com',
                        'password': 'test123',
                        'department': 'IT',
                        'position': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
                    },
                    {
                        'username': 'testuser2',
                        'full_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2',
                        'email': 'test2@tez-tour.com',
                        'password': 'test123',
                        'department': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                        'position': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'
                    }
                ]

                for user_data in test_users:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    existing_user = User.query.filter_by(username=user_data['username']).first()
                    if not existing_user:
                        user = User(
                            username=user_data['username'],
                            full_name=user_data['full_name'],
                            email=user_data['email'],
                            password=bcrypt.generate_password_hash(user_data['password']).decode('utf-8'),
                            department=user_data['department'],
                            position=user_data['position'],
                            image_file='default.jpg'
                        )
                        db.session.add(user)
                        logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}")

                db.session.commit()

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
                admin_user = User.query.filter_by(is_admin=True).first()
                if admin_user:
                    test_posts = [
                        {
                            'title': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç 1',
                            'content': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.',
                            'user_id': admin_user.id
                        },
                        {
                            'title': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
                            'content': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
                            'user_id': admin_user.id
                        }
                    ]

                    for post_data in test_posts:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Å—Ç
                        existing_post = Post.query.filter_by(title=post_data['title']).first()
                        if not existing_post:
                            post = Post(
                                title=post_data['title'],
                                content=post_data['content'],
                                user_id=post_data['user_id']
                            )
                            db.session.add(post)
                            logger.info(f"üìù –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç: {post_data['title']}")

                    db.session.commit()

                logger.info("üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def get_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.check_database_exists():
            return False

        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'")
                tables = [row[0] for row in cursor.fetchall()]

                total_records = 0

                for table in tables:
                    cursor.execute(f"SELECT COUNT(*) FROM {table}")
                    count = cursor.fetchone()[0]
                    total_records += count
                    logger.info(f"  üìã {table}: {count} –∑–∞–ø–∏—Å–µ–π")

                logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
                logger.info(f"üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

                # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ë–î
                db_size = self.db_path.stat().st_size
                db_size_mb = db_size / (1024 * 1024)
                logger.info(f"üíæ –†–∞–∑–º–µ—Ä –ë–î: {db_size_mb:.2f} MB")

                return {
                    'tables': len(tables),
                    'total_records': total_records,
                    'size_mb': db_size_mb,
                    'table_stats': {table: count for table in tables}
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ Flask Helpdesk')
    parser.add_argument('--app-root', help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

    # –≠–∫—Å–ø–æ—Ä—Ç
    export_parser = subparsers.add_parser('export', help='–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö')
    export_parser.add_argument('--tables', nargs='+', help='–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    export_parser.add_argument('--format', choices=['json', 'sql'], default='json', help='–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞')

    # –ò–º–ø–æ—Ä—Ç
    import_parser = subparsers.add_parser('import', help='–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö')
    import_parser.add_argument('file', help='–§–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞')
    import_parser.add_argument('--clear', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º')

    # –û—á–∏—Å—Ç–∫–∞
    clear_parser = subparsers.add_parser('clear', help='–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    clear_parser.add_argument('--tables', nargs='+', help='–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—á–∏—Å—Ç–∫–∏')
    clear_parser.add_argument('--confirm', action='store_true', help='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏')

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    subparsers.add_parser('create-test', help='–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    manager = DataManager(args.app_root)

    success = False

    if args.command == 'export':
        result = manager.export_data(args.tables, args.format)
        success = bool(result)
        if success:
            logger.info(f"üìÅ –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞: {result}")

    elif args.command == 'import':
        success = manager.import_data(args.file, args.clear)

    elif args.command == 'clear':
        success = manager.clear_data(args.tables, args.confirm)

    elif args.command == 'create-test':
        success = manager.create_test_data()

    elif args.command == 'stats':
        success = bool(manager.get_statistics())

    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
