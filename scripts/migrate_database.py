#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Flask Helpdesk
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
"""

import os
import sys
import sqlite3
import subprocess
import logging
from pathlib import Path
from datetime import datetime
import shutil
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('database_migration.log', mode='a', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class DatabaseMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, app_root=None):
        self.app_root = Path(app_root) if app_root else project_root
        self.db_dir = self.app_root / 'blog' / 'db'
        self.db_path = self.db_dir / 'blog.db'
        self.migrations_dir = self.app_root / 'migrations'

        logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ç–æ—Ä –ë–î –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.app_root}")
        logger.info(f"üìÑ –ü—É—Ç—å –∫ –ë–î: {self.db_path}")

    def check_database_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_path.exists():
            logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
            return False

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
        return True

    def backup_database(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.db_dir / f"blog_pre_migration_{timestamp}.db"

        logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π: {backup_path}")
        shutil.copy2(self.db_path, backup_path)
        return backup_path

    def get_current_migration_version(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT version_num FROM alembic_version LIMIT 1")
                result = cursor.fetchone()
                if result:
                    version = result[0]
                    logger.info(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {version}")
                    return version
                else:
                    logger.warning("‚ö†Ô∏è  –í–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return None
        except sqlite3.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return None

    def get_available_migrations(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        versions_dir = self.migrations_dir / 'versions'
        if not versions_dir.exists():
            logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return []

        migrations = []
        for file in versions_dir.glob('*.py'):
            if file.name != '__init__.py':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                version = file.stem.split('_')[0]
                migrations.append({
                    'version': version,
                    'file': file.name,
                    'path': file
                })

        migrations.sort(key=lambda x: x['version'])
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(migrations)}")
        for migration in migrations:
            logger.info(f"  - {migration['version']}: {migration['file']}")

        return migrations

    def generate_migration(self, message=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        if not message:
            message = f"auto_migration_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: {message}")

        try:
            os.chdir(self.app_root)

            result = subprocess.run(
                [sys.executable, '-m', 'flask', 'db', 'migrate', '-m', message],
                capture_output=True,
                text=True,
                env=dict(os.environ, FLASK_APP='app.py')
            )

            if result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {result.stderr}")
                return False

            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            logger.info(f"üìÑ –í—ã–≤–æ–¥: {result.stdout}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

    def apply_migrations(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")

        try:
            os.chdir(self.app_root)

            result = subprocess.run(
                [sys.executable, '-m', 'flask', 'db', 'upgrade'],
                capture_output=True,
                text=True,
                env=dict(os.environ, FLASK_APP='app.py')
            )

            if result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {result.stderr}")
                return False

            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            if result.stdout.strip():
                logger.info(f"üìÑ –í—ã–≤–æ–¥: {result.stdout}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False

    def rollback_migration(self, target_version=None):
        """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        if target_version:
            logger.info(f"‚è™ –û—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏: {target_version}")
            command = [sys.executable, '-m', 'flask', 'db', 'downgrade', target_version]
        else:
            logger.info("‚è™ –û—Ç–∫–∞—Ç –Ω–∞ –æ–¥–Ω—É –≤–µ—Ä—Å–∏—é –Ω–∞–∑–∞–¥")
            command = [sys.executable, '-m', 'flask', 'db', 'downgrade']

        try:
            os.chdir(self.app_root)

            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                env=dict(os.environ, FLASK_APP='app.py')
            )

            if result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {result.stderr}")
                return False

            logger.info("‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                logger.info(f"üìÑ –í—ã–≤–æ–¥: {result.stdout}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

    def verify_migration_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π...")

        try:
            from blog import create_app, db

            app = create_app()

            with app.app_context():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î
                db.session.execute('SELECT 1')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                inspector = db.inspect(db.engine)
                tables = inspector.get_table_names()

                required_tables = ['users', 'posts', 'notifications', 'alembic_version']
                missing_tables = [table for table in required_tables if table not in tables]

                if missing_tables:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                    return False

                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                logger.info("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
            return False

    def run_migration_process(self, auto_generate=False, message=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
        if not self.check_database_exists():
            logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ init_database.py")
            return False

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = self.backup_database()
        logger.info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        current_version = self.get_current_migration_version()

        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if auto_generate:
            if not self.generate_migration(message):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é")
                return False

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        if not self.apply_migrations():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        if not self.verify_migration_integrity():
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        new_version = self.get_current_migration_version()

        if current_version != new_version:
            logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {current_version} ‚Üí {new_version}")
        else:
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")

        logger.info("üéâ –ü—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Flask Helpdesk')
    parser.add_argument('--auto-generate', action='store_true',
                       help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é')
    parser.add_argument('--message', '-m', help='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--rollback', help='–û—Ç–∫–∞—Ç–∏—Ç—å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏')
    parser.add_argument('--app-root', help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    parser.add_argument('--check-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏')

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
    migrator = DatabaseMigrator(args.app_root)

    if args.check_only:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
        if migrator.verify_migration_integrity():
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ")
            sys.exit(0)
        else:
            logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏")
            sys.exit(1)

    elif args.rollback:
        # –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        success = migrator.rollback_migration(args.rollback)
        sys.exit(0 if success else 1)

    else:
        # –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
        success = migrator.run_migration_process(
            auto_generate=args.auto_generate,
            message=args.message
        )
        sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
