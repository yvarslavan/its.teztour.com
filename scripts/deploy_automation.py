#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Flask Helpdesk
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î, –º–∏–≥—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

import os
import sys
import subprocess
import logging
import time
from pathlib import Path
from datetime import datetime
import argparse
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('deployment.log', mode='a', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class DeploymentAutomation:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""

    def __init__(self, app_root=None):
        self.app_root = Path(app_root) if app_root else project_root
        self.scripts_dir = self.app_root / 'scripts'
        self.db_dir = self.app_root / 'blog' / 'db'

        logger.info(f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.app_root}")
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤: {self.scripts_dir}")

    def run_script(self, script_name, args=None, check_return_code=True):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        script_path = self.scripts_dir / script_name

        if not script_path.exists():
            logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return False

        command = [sys.executable, str(script_path)]
        if args:
            command.extend(args)

        logger.info(f"üîß –ó–∞–ø—É—Å–∫: {' '.join(command)}")

        try:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                cwd=self.app_root
            )

            if result.stdout:
                logger.info(f"üìÑ –í—ã–≤–æ–¥:\n{result.stdout}")

            if result.stderr:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∏:\n{result.stderr}")

            if check_return_code and result.returncode != 0:
                logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –∫–æ–¥ {result.returncode}")
                return False

            logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return False

    def check_prerequisites(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
        required_scripts = [
            'init_database.py',
            'migrate_database.py',
            'manage_data.py',
            'monitor_database.py'
        ]

        missing_scripts = []
        for script in required_scripts:
            if not (self.scripts_dir / script).exists():
                missing_scripts.append(script)

        if missing_scripts:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {missing_scripts}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        try:
            import flask
            import flask_sqlalchemy
            import flask_migrate
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ Python –¥–æ—Å—Ç—É–ø–Ω—ã")
        except ImportError as e:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å Python: {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        required_dirs = [
            'blog',
            'migrations',
            'blog/templates'
        ]

        missing_dirs = []
        for dir_name in required_dirs:
            if not (self.app_root / dir_name).exists():
                missing_dirs.append(dir_name)

        if missing_dirs:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {missing_dirs}")
            return False

        logger.info("‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True

    def deploy_fresh_installation(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –Ω—É–ª—è"""
        logger.info("üÜï –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìã –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        if not self.run_script('init_database.py', ['--from-sql', '--force']):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return False

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info("üìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        if not self.run_script('init_database.py', ['--check-only']):
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        logger.info("üìã –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        self.run_script('manage_data.py', ['create-test'], check_return_code=False)

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î
        logger.info("üìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î")
        if not self.run_script('monitor_database.py', ['health']):
            logger.warning("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–¥–æ—Ä–æ–≤—å–µ–º –ë–î –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

        logger.info("üéâ –ù–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

    def deploy_update(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        logger.info("üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        if not self.run_script('monitor_database.py', ['health'], check_return_code=False):
            logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ–∫—É—â–µ–π –ë–î")

        # 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
        logger.info("üìã –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π")
        if not self.run_script('migrate_database.py'):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        logger.info("üìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        if not self.run_script('migrate_database.py', ['--check-only']):
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False

        # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        logger.info("üìã –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
        if not self.run_script('monitor_database.py', ['health']):
            logger.warning("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–¥–æ—Ä–æ–≤—å–µ–º –ë–î –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        logger.info("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True

    def deploy_with_backup(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        logger.info("üíæ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")

        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        logger.info("üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        if not self.run_script('manage_data.py', ['export', '--format', 'sql']):
            logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")

        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        logger.info("üìã –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        if not self.deploy_update():
            logger.error("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        logger.info("üìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        self.run_script('monitor_database.py', ['backups'], check_return_code=False)

        logger.info("üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True

    def generate_deployment_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏...")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.app_root / f"deployment_report_{timestamp}.json"

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        deployment_report = {
            'deployment_info': {
                'timestamp': datetime.now().isoformat(),
                'app_root': str(self.app_root),
                'python_version': sys.version,
                'platform': sys.platform
            },
            'database_status': {},
            'performance_check': {},
            'backup_status': {},
            'statistics': {}
        }

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î
            result = subprocess.run(
                [sys.executable, str(self.scripts_dir / 'monitor_database.py'), 'health'],
                capture_output=True,
                text=True,
                cwd=self.app_root
            )
            if result.returncode == 0:
                deployment_report['database_status']['health'] = 'healthy'
            else:
                deployment_report['database_status']['health'] = 'issues_detected'

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            result = subprocess.run(
                [sys.executable, str(self.scripts_dir / 'manage_data.py'), 'stats'],
                capture_output=True,
                text=True,
                cwd=self.app_root
            )
            deployment_report['statistics']['collection_successful'] = result.returncode == 0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞: {e}")
            deployment_report['error'] = str(e)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(deployment_report, f, ensure_ascii=False, indent=2)

        logger.info(f"üìÅ –û—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return str(report_file)

    def run_post_deployment_checks(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")

        checks_passed = 0
        total_checks = 4

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 1/4: –ó–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        if self.run_script('monitor_database.py', ['health'], check_return_code=False):
            checks_passed += 1
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î –ø—Ä–æ–π–¥–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 2/4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        if self.run_script('monitor_database.py', ['performance'], check_return_code=False):
            checks_passed += 1
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 3/4: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π")
        if self.run_script('migrate_database.py', ['--check-only'], check_return_code=False):
            checks_passed += 1
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 4/4: –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
        if self.run_script('monitor_database.py', ['backups'], check_return_code=False):
            checks_passed += 1
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø—Ä–æ–π–¥–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")

        success_rate = (checks_passed / total_checks) * 100
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫: {checks_passed}/{total_checks} ({success_rate:.1f}%)")

        if checks_passed == total_checks:
            logger.info("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return True
        elif checks_passed >= total_checks * 0.75:
            logger.warning("‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            return True
        else:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Flask Helpdesk')
    parser.add_argument('--app-root', help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

    subparsers = parser.add_subparsers(dest='mode', help='–†–µ–∂–∏–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')

    # –ù–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    subparsers.add_parser('fresh', help='–ù–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –Ω—É–ª—è')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    subparsers.add_parser('update', help='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π
    subparsers.add_parser('update-safe', help='–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π')

    # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
    subparsers.add_parser('check', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')

    # –û—Ç—á–µ—Ç
    subparsers.add_parser('report', help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏')

    # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    full_parser = subparsers.add_parser('full', help='–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')
    full_parser.add_argument('--mode', choices=['fresh', 'update'], default='update',
                           help='–†–µ–∂–∏–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞')

    args = parser.parse_args()

    if not args.mode:
        parser.print_help()
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä
    automation = DeploymentAutomation(args.app_root)

    success = True

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if not automation.check_prerequisites():
            logger.error("‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            sys.exit(1)

        if args.mode == 'fresh':
            success = automation.deploy_fresh_installation()

        elif args.mode == 'update':
            success = automation.deploy_update()

        elif args.mode == 'update-safe':
            success = automation.deploy_with_backup()

        elif args.mode == 'check':
            success = automation.run_post_deployment_checks()

        elif args.mode == 'report':
            report_file = automation.generate_deployment_report()
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")

        elif args.mode == 'full':
            # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")

            if args.mode == 'fresh':
                success = automation.deploy_fresh_installation()
            else:
                success = automation.deploy_with_backup()

            if success:
                logger.info("‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫...")
                success = automation.run_post_deployment_checks()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            automation.generate_deployment_report()

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        success = False
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
        success = False

    if success:
        logger.info("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
