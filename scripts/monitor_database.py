#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Flask Helpdesk
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ë–î, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤—ã–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""

import os
import sys
import sqlite3
import time
import logging
from pathlib import Path
from datetime import datetime, timedelta
import argparse
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('database_monitor.log', mode='a', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class DatabaseMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, app_root=None):
        self.app_root = Path(app_root) if app_root else project_root
        self.db_dir = self.app_root / 'blog' / 'db'
        self.db_path = self.db_dir / 'blog.db'
        self.reports_dir = self.db_dir / 'reports'

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        self.reports_dir.mkdir(parents=True, exist_ok=True)

        logger.info(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä –ë–î –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.app_root}")
        logger.info(f"üìÑ –ü—É—Ç—å –∫ –ë–î: {self.db_path}")

    def check_database_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        health_report = {
            'timestamp': datetime.now().isoformat(),
            'status': 'healthy',
            'issues': [],
            'warnings': [],
            'recommendations': []
        }

        try:
            if not self.db_path.exists():
                health_report['status'] = 'critical'
                health_report['issues'].append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return health_report

            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
                cursor.execute("PRAGMA integrity_check")
                integrity_result = cursor.fetchone()[0]

                if integrity_result != 'ok':
                    health_report['status'] = 'critical'
                    health_report['issues'].append(f"–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {integrity_result}")
                else:
                    logger.info("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î –≤ –ø–æ—Ä—è–¥–∫–µ")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏...")
                try:
                    cursor.execute("SELECT version_num FROM alembic_version")
                    version = cursor.fetchone()
                    if version:
                        logger.info(f"‚úÖ –í–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {version[0]}")
                    else:
                        health_report['warnings'].append("–í–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
                except sqlite3.Error:
                    health_report['warnings'].append("–¢–∞–±–ª–∏—Ü–∞ alembic_version –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
                required_tables = ['users', 'posts', 'notifications']
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                existing_tables = [row[0] for row in cursor.fetchall()]

                missing_tables = [table for table in required_tables if table not in existing_tables]
                if missing_tables:
                    health_report['status'] = 'critical'
                    health_report['issues'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                else:
                    logger.info("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
                db_size = self.db_path.stat().st_size
                db_size_mb = db_size / (1024 * 1024)
                logger.info(f"üíæ –†–∞–∑–º–µ—Ä –ë–î: {db_size_mb:.2f} MB")

                if db_size_mb > 100:
                    health_report['warnings'].append(f"–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –ë–î: {db_size_mb:.2f} MB")
                    health_report['recommendations'].append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π...")
                total_records = 0
                for table in existing_tables:
                    if not table.startswith('sqlite_'):
                        cursor.execute(f"SELECT COUNT(*) FROM {table}")
                        count = cursor.fetchone()[0]
                        total_records += count
                        logger.info(f"  üìã {table}: {count} –∑–∞–ø–∏—Å–µ–π")

                if total_records == 0:
                    health_report['warnings'].append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                    health_report['recommendations'].append("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

                logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")

        except Exception as e:
            health_report['status'] = 'critical'
            health_report['issues'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if health_report['issues']:
            health_report['status'] = 'critical'
        elif health_report['warnings']:
            health_report['status'] = 'warning'

        logger.info(f"üè• –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ë–î: {health_report['status'].upper()}")

        return health_report

    def check_performance(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

        performance_report = {
            'timestamp': datetime.now().isoformat(),
            'query_times': {},
            'recommendations': []
        }

        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                start_time = time.time()
                cursor.execute("SELECT 1")
                cursor.fetchone()
                simple_query_time = time.time() - start_time
                performance_report['query_times']['simple_select'] = simple_query_time

                # –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –≤ users
                start_time = time.time()
                cursor.execute("SELECT COUNT(*) FROM users")
                cursor.fetchone()
                count_query_time = time.time() - start_time
                performance_report['query_times']['count_users'] = count_query_time

                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if simple_query_time > 0.1:
                    performance_report['recommendations'].append("–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Å–∫")

                if count_query_time > 1.0:
                    performance_report['recommendations'].append("–ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π - –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã")

                logger.info(f"‚ö° –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {simple_query_time:.4f}s")
                logger.info(f"‚ö° –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π: {count_query_time:.4f}s")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            performance_report['error'] = str(e)

        return performance_report

    def check_backups(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        logger.info("üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")

        backup_report = {
            'timestamp': datetime.now().isoformat(),
            'backups_found': [],
            'recommendations': []
        }

        try:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ë–î
            backup_patterns = ['*backup*.db', '*_backup_*.db', 'blog_*.db']

            for pattern in backup_patterns:
                for backup_file in self.db_dir.glob(pattern):
                    if backup_file != self.db_path:
                        backup_info = {
                            'file': backup_file.name,
                            'size_mb': backup_file.stat().st_size / (1024 * 1024),
                            'created': datetime.fromtimestamp(backup_file.stat().st_mtime).isoformat(),
                            'age_days': (datetime.now() - datetime.fromtimestamp(backup_file.stat().st_mtime)).days
                        }
                        backup_report['backups_found'].append(backup_info)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            backup_report['backups_found'].sort(key=lambda x: x['created'], reverse=True)

            # –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if not backup_report['backups_found']:
                backup_report['recommendations'].append("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Å–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø")
            else:
                logger.info(f"üíæ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backup_report['backups_found'])}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
                latest_backup = backup_report['backups_found'][0]
                if latest_backup['age_days'] > 7:
                    backup_report['recommendations'].append(
                        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω {latest_backup['age_days']} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ - —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–µ–∂–∏–π"
                    )

                for backup in backup_report['backups_found'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    logger.info(f"  üíæ {backup['file']}: {backup['size_mb']:.1f}MB, {backup['age_days']} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–∞–ø–æ–≤: {e}")
            backup_report['error'] = str(e)

        return backup_report

    def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.reports_dir / f"db_health_report_{timestamp}.json"

        comprehensive_report = {
            'report_info': {
                'generated_at': datetime.now().isoformat(),
                'database_path': str(self.db_path),
                'monitor_version': '1.0'
            },
            'health_check': self.check_database_health(),
            'performance_check': self.check_performance(),
            'backup_status': self.check_backups()
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(comprehensive_report, f, ensure_ascii=False, indent=2)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        logger.info("üìã –°–í–û–î–ö–ê –û–¢–ß–ï–¢–ê:")
        logger.info(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ: {comprehensive_report['health_check']['status'].upper()}")

        if comprehensive_report['health_check']['issues']:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in comprehensive_report['health_check']['issues']:
                logger.error(f"   - {issue}")

        if comprehensive_report['health_check']['warnings']:
            logger.warning("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in comprehensive_report['health_check']['warnings']:
                logger.warning(f"   - {warning}")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        all_recommendations = []
        for section in ['health_check', 'performance_check', 'backup_status']:
            if 'recommendations' in comprehensive_report[section]:
                all_recommendations.extend(comprehensive_report[section]['recommendations'])

        if all_recommendations:
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in all_recommendations:
                logger.info(f"   - {rec}")

        logger.info(f"üìÅ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        return str(report_file)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Flask Helpdesk')
    parser.add_argument('--app-root', help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    subparsers.add_parser('health', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    subparsers.add_parser('performance', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤
    subparsers.add_parser('backups', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π')

    # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    subparsers.add_parser('report', help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = DatabaseMonitor(args.app_root)

    success = True

    try:
        if args.command == 'health':
            health = monitor.check_database_health()
            success = health['status'] != 'critical'

        elif args.command == 'performance':
            monitor.check_performance()

        elif args.command == 'backups':
            monitor.check_backups()

        elif args.command == 'report':
            report_file = monitor.generate_comprehensive_report()
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        success = False

    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
