/**
 * FiltersPanel_Simple - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
class FiltersPanel_Simple {
  constructor() {
    this.eventBus = window.eventBus;
    this.loadingManager = window.loadingManager;
    this.panelElement = null;
    this.isInitialized = false;
    this.currentFilters = {};
    this.debouncedSearch = null;

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    setTimeout(() => this.init(), 200);
  }

  async init() {
    try {
      console.log('[FiltersPanel] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–Ω–µ–ª–∏
      this.panelElement = document.querySelector('.filters-container');
      if (!this.panelElement) {
        throw new Error('–ü–∞–Ω–µ–ª—å .filters-container –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º debounced –ø–æ–∏—Å–∫
      this.debouncedSearch = this.debounce(this.performSearch.bind(this), 500);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this._setupEventListeners();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      await this.loadFilters();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      this._initializeFilterState();

      this.isInitialized = true;
      console.log('[FiltersPanel] ‚úÖ –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      this.eventBus.emit('filters:initialized');

    } catch (error) {
      console.error('[FiltersPanel] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.eventBus.emit('filters:error', { error: error.message });
      throw error;
    }
  }

  _setupEventListeners() {
    // –ü–æ–∏—Å–∫
    const searchInput = this.panelElement.querySelector('#searchInput');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        this.debouncedSearch(e.target.value);
      });
    }

    // –§–∏–ª—å—Ç—Ä—ã
    const statusFilter = this.panelElement.querySelector('#statusFilter');
    if (statusFilter) {
      statusFilter.addEventListener('change', () => this.applyFilters());
    }

    const projectFilter = this.panelElement.querySelector('#projectFilter');
    if (projectFilter) {
      projectFilter.addEventListener('change', () => this.applyFilters());
    }

    const priorityFilter = this.panelElement.querySelector('#priorityFilter');
    if (priorityFilter) {
      priorityFilter.addEventListener('change', () => this.applyFilters());
    }

    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
    const resetButton = this.panelElement.querySelector('#clearFilters');
    if (resetButton) {
      resetButton.addEventListener('click', () => this.resetAllFilters());
    }
  }

  async loadFilters() {
    try {
      console.log('[FiltersPanel] üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
      const projectsResponse = await fetch('/tasks/api/projects');
      const projectsData = await projectsResponse.json();

      if (projectsData.success && projectsData.projects) {
        this.populateProjectFilter(projectsData.projects);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
      const statusesResponse = await fetch('/tasks/api/statuses');
      const statusesData = await statusesResponse.json();

      if (statusesData.success && statusesData.statuses) {
        this.populateStatusFilter(statusesData.statuses);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
      const prioritiesResponse = await fetch('/tasks/api/priorities');
      const prioritiesData = await prioritiesResponse.json();

      if (prioritiesData.success && prioritiesData.priorities) {
        this.populatePriorityFilter(prioritiesData.priorities);
      }

      console.log('[FiltersPanel] ‚úÖ –§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    } catch (error) {
      console.error('[FiltersPanel] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
    }
  }

  populateProjectFilter(projects) {
    const projectFilter = this.panelElement.querySelector('#projectFilter');
    if (!projectFilter) return;

    projectFilter.innerHTML = '<option value="">–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</option>' +
      projects.map(project =>
        `<option value="${project.id}">${project.name}</option>`
      ).join('');
  }

  populateStatusFilter(statuses) {
    const statusFilter = this.panelElement.querySelector('#statusFilter');
    if (!statusFilter) return;

    statusFilter.innerHTML = '<option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>' +
      statuses.map(status =>
        `<option value="${status.id}">${status.name}</option>`
      ).join('');
  }

  populatePriorityFilter(priorities) {
    const priorityFilter = this.panelElement.querySelector('#priorityFilter');
    if (!priorityFilter) return;

    priorityFilter.innerHTML = '<option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>' +
      priorities.map(priority =>
        `<option value="${priority.id}">${priority.name}</option>`
      ).join('');
  }

  applyFilters() {
    const filters = this.getCurrentFilters();
    this.currentFilters = filters;

    console.log('[FiltersPanel] üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filters);
    this.eventBus.emit('filters:changed', { filters });
  }

  getCurrentFilters() {
    const searchInput = this.panelElement.querySelector('#searchInput');
    const statusFilter = this.panelElement.querySelector('#statusFilter');
    const projectFilter = this.panelElement.querySelector('#projectFilter');
    const priorityFilter = this.panelElement.querySelector('#priorityFilter');

    return {
      search: searchInput ? searchInput.value.trim() : '',
      status_filter: statusFilter ? statusFilter.value : '',
      project_filter: projectFilter ? projectFilter.value : '',
      priority_filter: priorityFilter ? priorityFilter.value : ''
    };
  }

  performSearch(searchTerm) {
    console.log('[FiltersPanel] üîç –ü–æ–∏—Å–∫:', searchTerm);
    this.eventBus.emit('search:changed', { searchTerm });
  }

  resetAllFilters() {
    console.log('[FiltersPanel] üßπ –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤');

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è
    const searchInput = this.panelElement.querySelector('#searchInput');
    if (searchInput) searchInput.value = '';

    const statusFilter = this.panelElement.querySelector('#statusFilter');
    if (statusFilter) statusFilter.value = '';

    const projectFilter = this.panelElement.querySelector('#projectFilter');
    if (projectFilter) projectFilter.value = '';

    const priorityFilter = this.panelElement.querySelector('#priorityFilter');
    if (priorityFilter) priorityFilter.value = '';

    this.currentFilters = {};
    this.eventBus.emit('filters:reset');
  }

  _initializeFilterState() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    this.resetAllFilters();
  }

  // –£—Ç–∏–ª–∏—Ç–∞ debounce
  debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TasksApp
  clearFilters() {
    console.log('[FiltersPanel] üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
    this.resetAllFilters();
  }

  getFilters() {
    return this.getCurrentFilters();
  }

  setFilters(filters) {
    console.log('[FiltersPanel] üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filters);

    if (filters.search !== undefined) {
      const searchInput = this.panelElement.querySelector('#searchInput');
      if (searchInput) searchInput.value = filters.search;
    }

    if (filters.status_filter !== undefined) {
      const statusFilter = this.panelElement.querySelector('#statusFilter');
      if (statusFilter) statusFilter.value = filters.status_filter;
    }

    if (filters.project_filter !== undefined) {
      const projectFilter = this.panelElement.querySelector('#projectFilter');
      if (projectFilter) projectFilter.value = filters.project_filter;
    }

    if (filters.priority_filter !== undefined) {
      const priorityFilter = this.panelElement.querySelector('#priorityFilter');
      if (priorityFilter) priorityFilter.value = filters.priority_filter;
    }

    this.currentFilters = filters;
  }

  destroy() {
    console.log('[FiltersPanel] üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
    this.isInitialized = false;
    this.currentFilters = {};
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = FiltersPanel_Simple;
} else {
  window.FiltersPanel_Simple = FiltersPanel_Simple;
}
