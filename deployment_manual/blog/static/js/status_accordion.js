/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 */

class StatusAccordion {
    constructor() {
        this.accordionContainer = null;
        this.isAllExpanded = false;
        this.statusData = null;

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.toggleItem = this.toggleItem.bind(this);
        this.toggleAll = this.toggleAll.bind(this);
        this.handleKeyPress = this.handleKeyPress.bind(this);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
     * @param {Object} statusGroups - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ API
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
     */
    init(statusGroups, containerId = 'statusAccordion') {
        console.log('üéµ [ACCORDION] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:', statusGroups);

        this.statusData = statusGroups;
        this.accordionContainer = document.getElementById(containerId);

        if (!this.accordionContainer) {
            console.error('‚ùå [ACCORDION] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
            return;
        }

        this.render();
        this.attachEventListeners();

        console.log('‚úÖ [ACCORDION] –ê–∫–∫–æ—Ä–¥–µ–æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
     */
    render() {
        if (!this.statusData) {
            this.accordionContainer.innerHTML = '<div class="accordion-error">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }

        const totalTasks = Object.values(this.statusData).reduce((sum, group) => sum + group.total, 0);

        const html = `
            <div class="status-accordion">
                <div class="accordion-controls">
                    <h3>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º</h3>
                    <button class="accordion-toggle-all" id="toggleAllBtn">
                        <i class="fas fa-expand-arrows-alt"></i>
                        <span>–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</span>
                    </button>
                </div>

                <div class="accordion-content-wrapper">
                    ${this.renderAccordionItems(totalTasks)}
                </div>
            </div>
        `;

        this.accordionContainer.innerHTML = html;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
     * @param {number} totalTasks - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
     */
    renderAccordionItems(totalTasks) {
        const groupOrder = ['new', 'in_progress', 'closed'];
        const groupIcons = {
            'new': 'fas fa-plus',
            'in_progress': 'fas fa-cog fa-spin',
            'closed': 'fas fa-check'
        };

        return groupOrder.map(groupKey => {
            const group = this.statusData[groupKey];
            if (!group || group.total === 0) return '';

            const percentage = totalTasks > 0 ? Math.round((group.total / totalTasks) * 100) : 0;

            return `
                <div class="accordion-item" data-group="${groupKey}">
                    <div class="accordion-header" role="button" tabindex="0" aria-expanded="false">
                        <div class="accordion-title">
                            <div class="accordion-icon ${groupKey}">
                                <i class="${groupIcons[groupKey]}"></i>
                            </div>
                            <div>
                                <div>${group.name}</div>
                                <div class="accordion-count">${group.total} –∑–∞–¥–∞—á (${percentage}%)</div>
                            </div>
                        </div>
                        <div class="accordion-toggle">
                            <span>–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏</span>
                            <i class="fas fa-chevron-down accordion-chevron"></i>
                        </div>
                    </div>

                    <div class="accordion-content">
                        <div class="accordion-body">
                            ${this.renderStatusList(group.statuses, group.total)}
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
     * @param {Array} statuses - –ú–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
     * @param {number} groupTotal - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –≥—Ä—É–ø–ø–µ
     */
    renderStatusList(statuses, groupTotal) {
        if (!statuses || statuses.length === 0) {
            return '<div class="accordion-empty">–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ</div>';
        }

        return `
            <div class="status-list">
                ${statuses.map(status => {
                    const percentage = groupTotal > 0 ? Math.round((status.count / groupTotal) * 100) : 0;

                    return `
                        <div class="status-item" data-status-id="${status.id}">
                            <div class="status-info">
                                <div class="status-name">${status.localized_name}</div>
                                ${status.original_name !== status.localized_name ?
                                    `<div class="status-original">${status.original_name}</div>` :
                                    ''
                                }
                            </div>
                            <div class="status-count">
                                <div class="status-badge">${status.count}</div>
                                <div class="status-percentage">${percentage}%</div>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å/–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ"
        const toggleAllBtn = document.getElementById('toggleAllBtn');
        if (toggleAllBtn) {
            toggleAllBtn.addEventListener('click', this.toggleAll);
        }

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
        const headers = this.accordionContainer.querySelectorAll('.accordion-header');
        headers.forEach(header => {
            header.addEventListener('click', this.toggleItem);
            header.addEventListener('keypress', this.handleKeyPress);
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
     * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
     */
    toggleItem(event) {
        const header = event.currentTarget;
        const item = header.closest('.accordion-item');
        const content = item.querySelector('.accordion-content');
        const toggle = header.querySelector('.accordion-toggle span');

        const isExpanded = item.classList.contains('expanded');

        if (isExpanded) {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            item.classList.remove('expanded');
            header.setAttribute('aria-expanded', 'false');
            toggle.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏';

            console.log('üéµ [ACCORDION] –°–≤–µ—Ä–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É:', item.dataset.group);
        } else {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            item.classList.add('expanded');
            header.setAttribute('aria-expanded', 'true');
            toggle.textContent = '–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏';

            console.log('üéµ [ACCORDION] –†–∞–∑–≤–µ—Ä–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É:', item.dataset.group);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ"
        this.updateToggleAllButton();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
     */
    toggleAll() {
        const items = this.accordionContainer.querySelectorAll('.accordion-item');
        const toggleAllBtn = document.getElementById('toggleAllBtn');

        if (this.isAllExpanded) {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ
            items.forEach(item => {
                const header = item.querySelector('.accordion-header');
                const toggle = header.querySelector('.accordion-toggle span');

                item.classList.remove('expanded');
                header.setAttribute('aria-expanded', 'false');
                toggle.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏';
            });

            this.isAllExpanded = false;
            toggleAllBtn.innerHTML = '<i class="fas fa-expand-arrows-alt"></i><span>–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</span>';

            console.log('üéµ [ACCORDION] –°–≤–µ—Ä–Ω—É–ª–∏ –≤—Å–µ –≥—Ä—É–ø–ø—ã');
        } else {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ
            items.forEach(item => {
                const header = item.querySelector('.accordion-header');
                const toggle = header.querySelector('.accordion-toggle span');

                item.classList.add('expanded');
                header.setAttribute('aria-expanded', 'true');
                toggle.textContent = '–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏';
            });

            this.isAllExpanded = true;
            toggleAllBtn.innerHTML = '<i class="fas fa-compress-arrows-alt"></i><span>–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</span>';

            console.log('üéµ [ACCORDION] –†–∞–∑–≤–µ—Ä–Ω—É–ª–∏ –≤—Å–µ –≥—Ä—É–ø–ø—ã');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
     * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
     */
    handleKeyPress(event) {
        if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            this.toggleItem(event);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ"
     */
    updateToggleAllButton() {
        const items = this.accordionContainer.querySelectorAll('.accordion-item');
        const expandedItems = this.accordionContainer.querySelectorAll('.accordion-item.expanded');
        const toggleAllBtn = document.getElementById('toggleAllBtn');

        if (expandedItems.length === items.length && items.length > 0) {
            // –í—Å–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã
            this.isAllExpanded = true;
            toggleAllBtn.innerHTML = '<i class="fas fa-compress-arrows-alt"></i><span>–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</span>';
        } else {
            // –ù–µ –≤—Å–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã
            this.isAllExpanded = false;
            toggleAllBtn.innerHTML = '<i class="fas fa-expand-arrows-alt"></i><span>–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ</span>';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
     * @param {Object} statusGroups - –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    updateData(statusGroups) {
        console.log('üéµ [ACCORDION] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞');
        this.statusData = statusGroups;
        this.render();
        this.attachEventListeners();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading() {
        if (this.accordionContainer) {
            this.accordionContainer.innerHTML = `
                <div class="accordion-loading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span style="margin-left: 0.5rem;">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤...</span>
                </div>
            `;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showError(message) {
        if (this.accordionContainer) {
            this.accordionContainer.innerHTML = `
                <div class="accordion-error">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span style="margin-left: 0.5rem;">${message}</span>
                </div>
            `;
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     */
    destroy() {
        if (this.accordionContainer) {
            this.accordionContainer.innerHTML = '';
        }
        this.statusData = null;
        console.log('üéµ [ACCORDION] –ê–∫–∫–æ—Ä–¥–µ–æ–Ω —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
window.statusAccordion = new StatusAccordion();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = StatusAccordion;
}
