/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: PushDebug.runFullDiagnostic() –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
 */

window.PushDebug = {

    async runFullDiagnostic() {
        console.log('üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
        console.log('=' * 60);

        const results = {
            browserSupport: await this.checkBrowserSupport(),
            permissions: await this.checkPermissions(),
            serviceWorker: await this.checkServiceWorker(),
            vapidKey: await this.checkVapidKey(),
            subscription: await this.checkSubscription(),
            serverStatus: await this.checkServerStatus()
        };

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
        console.table(results);

        this.generateRecommendations(results);

        return results;
    },

    async checkBrowserSupport() {
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞...');

        const support = {
            serviceWorker: 'serviceWorker' in navigator,
            pushManager: 'PushManager' in window,
            notifications: 'Notification' in window
        };

        const isSupported = support.serviceWorker && support.pushManager && support.notifications;

        console.log(`   Service Worker: ${support.serviceWorker ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Push Manager: ${support.pushManager ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Notifications: ${support.notifications ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –û–±—â–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${isSupported ? '‚úÖ' : '‚ùå'}`);

        return {
            supported: isSupported,
            details: support
        };
    },

    async checkPermissions() {
        console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');

        if (!('Notification' in window)) {
            console.log('   ‚ùå Notifications API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return { permission: 'unavailable' };
        }

        const permission = Notification.permission;
        const icon = permission === 'granted' ? '‚úÖ' : permission === 'denied' ? '‚ùå' : '‚ö†Ô∏è';

        console.log(`   –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${icon} ${permission}`);

        if (permission === 'denied') {
            console.log('   üí° –î–ª—è —Å–±—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:');
            console.log('      - Edge: edge://settings/content/notifications');
            console.log('      - Chrome: chrome://settings/content/notifications');
            console.log('      - Firefox: about:preferences#privacy');
        }

        return { permission };
    },

    async checkServiceWorker() {
        console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Service Worker...');

        if (!('serviceWorker' in navigator)) {
            console.log('   ‚ùå Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return { supported: false };
        }

        try {
            const registrations = await navigator.serviceWorker.getRegistrations();
            const swRegistration = registrations.find(reg =>
                reg.scope.includes('/static/js/') || reg.scope.includes('sw.js')
            );

            if (!swRegistration) {
                console.log('   ‚ùå Service Worker –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
                return { registered: false };
            }

            const state = swRegistration.active ? swRegistration.active.state : 'inactive';
            console.log(`   ‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
            console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);
            console.log(`   Scope: ${swRegistration.scope}`);

            return {
                registered: true,
                state,
                scope: swRegistration.scope,
                registration: swRegistration
            };

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Service Worker: ${error.message}`);
            return { error: error.message };
        }
    },

    async checkVapidKey() {
        console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ VAPID –∫–ª—é—á–∞...');

        try {
            const response = await fetch('/api/vapid-public-key');

            if (!response.ok) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                return { error: `HTTP ${response.status}` };
            }

            const data = await response.json();

            if (!data.publicKey) {
                console.log('   ‚ùå VAPID –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ');
                return { error: '–ö–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
            }

            console.log(`   ‚úÖ VAPID –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω: ${data.publicKey.substring(0, 20)}...`);
            return {
                available: true,
                key: data.publicKey.substring(0, 20) + '...'
            };

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VAPID –∫–ª—é—á–∞: ${error.message}`);
            return { error: error.message };
        }
    },

    async checkSubscription() {
        console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...');

        try {
            const registration = await navigator.serviceWorker.ready;
            const subscription = await registration.pushManager.getSubscription();

            if (!subscription) {
                console.log('   ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                return { local: false };
            }

            console.log('   ‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');
            console.log(`   Endpoint: ${subscription.endpoint.substring(0, 50)}...`);

            return {
                local: true,
                endpoint: subscription.endpoint.substring(0, 50) + '...',
                keys: Object.keys(subscription.toJSON().keys)
            };

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`);
            return { error: error.message };
        }
    },

    async checkServerStatus() {
        console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');

        try {
            const response = await fetch('/api/push/status');

            if (response.status === 401) {
                console.log('   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                return { error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' };
            }

            if (!response.ok) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                return { error: `HTTP ${response.status}` };
            }

            const data = await response.json();

            console.log(`   –í–∫–ª—é—á–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${data.enabled ? '‚úÖ' : '‚ùå'}`);
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${data.subscriptions_count}`);

            return {
                enabled: data.enabled,
                subscriptions: data.subscriptions_count,
                hasSubscriptions: data.has_subscriptions
            };

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
            return { error: error.message };
        }
    },

    generateRecommendations(results) {
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');

        if (!results.browserSupport.supported) {
            console.log('   üîÑ –û–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏');
            return;
        }

        if (results.permissions.permission === 'denied') {
            console.log('   üîì –°–±—Ä–æ—Å—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞');
            console.log('   üìñ –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ PUSH_NOTIFICATIONS_TROUBLESHOOTING.md');
            return;
        }

        if (results.permissions.permission !== 'granted') {
            console.log('   ‚úã –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            return;
        }

        if (!results.serviceWorker.registered) {
            console.log('   üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker');
            return;
        }

        if (!results.vapidKey.available) {
            console.log('   ‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VAPID –∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            return;
        }

        if (results.serverStatus.error === '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') {
            console.log('   üîë –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ');
            return;
        }

        if (!results.subscription.local && !results.serverStatus.enabled) {
            console.log('   ‚ñ∂Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"');
            return;
        }

        if (results.subscription.local && results.serverStatus.enabled) {
            console.log('   ‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            console.log('   üß™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            return;
        }

        console.log('   üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    },

    async testNotification() {
        console.log('üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

        try {
            const csrfToken = document.querySelector('meta[name=csrf-token]')?.getAttribute('content');

            if (!csrfToken) {
                console.log('   ‚ùå CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return { error: 'CSRF —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
            }

            const response = await fetch('/api/push/test', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrfToken
                }
            });

            const data = await response.json();

            if (response.ok) {
                console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                console.log(`   –û—Ç–≤–µ—Ç: ${data.message}`);

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Service Worker
                await this.checkServiceWorkerMessages();

                return { success: true, message: data.message };
            } else {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
                return { error: data.error };
            }

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
            return { error: error.message };
        }
    },

    async checkServiceWorkerMessages() {
        console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Service Worker...');

        if (!('serviceWorker' in navigator)) {
            console.log('   ‚ùå Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return;
        }

        try {
            const registration = await navigator.serviceWorker.ready;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π Service Worker
            if (registration.active) {
                console.log('   ‚úÖ Service Worker –∞–∫—Ç–∏–≤–µ–Ω');
                console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${registration.active.state}`);
                console.log(`   URL: ${registration.active.scriptURL}`);
            } else {
                console.log('   ‚ùå Service Worker –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            const subscription = await registration.pushManager.getSubscription();
            if (subscription) {
                console.log('   ‚úÖ Push –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞');
                console.log(`   Endpoint: ${subscription.endpoint.substring(0, 50)}...`);
            } else {
                console.log('   ‚ùå Push –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SW: ${error.message}`);
        }
    },

    async testLocalNotification() {
        console.log('üîî –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

        if (!('Notification' in window)) {
            console.log('   ‚ùå Notifications API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return { error: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
        }

        if (Notification.permission !== 'granted') {
            console.log('   ‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
            return { error: '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è' };
        }

        try {
            const notification = new Notification('–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
                body: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ',
                icon: '/static/img/notification_icon.png',
                badge: '/static/img/notification_badge.png',
                tag: 'local-test',
                requireInteraction: false
            });

            console.log('   ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');

            notification.onclick = function() {
                console.log('   üëÜ –ö–ª–∏–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
                notification.close();
            };

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                notification.close();
                console.log('   ‚è∞ –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            }, 5000);

            return { success: true };

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
            return { error: error.message };
        }
    },

    async checkNotificationSettings() {
        console.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        console.log(`   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${Notification.permission}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if ('maxActions' in Notification.prototype) {
            console.log(`   –ú–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π: ${Notification.maxActions}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        const testNotification = {
            body: 'test',
            icon: 'test',
            badge: 'test',
            image: 'test',
            tag: 'test',
            data: {},
            requireInteraction: true,
            silent: false,
            vibrate: [200, 100, 200],
            actions: []
        };

        const supportedFeatures = {};

        for (const [key, value] of Object.entries(testNotification)) {
            try {
                const tempNotif = new Notification('Test', { [key]: value });
                supportedFeatures[key] = '‚úÖ';
                tempNotif.close();
            } catch (error) {
                supportedFeatures[key] = '‚ùå';
            }
        }

        console.log('   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
        console.table(supportedFeatures);

        return supportedFeatures;
    },

    async resetSubscription() {
        console.log('üîÑ –°–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏...');

        try {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
            const registration = await navigator.serviceWorker.ready;
            const subscription = await registration.pushManager.getSubscription();

            if (subscription) {
                await subscription.unsubscribe();
                console.log('   ‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
            }

            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const csrfToken = document.querySelector('meta[name=csrf-token]')?.getAttribute('content');

            if (csrfToken) {
                const response = await fetch('/api/push/unsubscribe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': csrfToken
                    }
                });

                if (response.ok) {
                    console.log('   ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
                } else {
                    console.log('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞');
                }
            }

            console.log('   üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            return { success: true };

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ${error.message}`);
            return { error: error.message };
        }
    },

    showHelp() {
        console.log('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã PushDebug:');
        console.log('');
        console.log('PushDebug.runFullDiagnostic()     - –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
        console.log('PushDebug.testNotification()      - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
        console.log('PushDebug.testLocalNotification() - –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        console.log('PushDebug.checkNotificationSettings() - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        console.log('PushDebug.resetSubscription()     - –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É');
        console.log('PushDebug.checkPermissions()      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
        console.log('PushDebug.checkServiceWorker()    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Service Worker');
        console.log('PushDebug.showHelp()              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
        console.log('');
        console.log('üí° –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:');
        console.log('1. PushDebug.testLocalNotification() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        console.log('2. PushDebug.checkNotificationSettings() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
        console.log('3. PushDebug.runFullDiagnostic() - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
console.log('üîß –ú–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ PushDebug.showHelp() –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥');
console.log('üöÄ –ò–ª–∏ —Å—Ä–∞–∑—É PushDebug.runFullDiagnostic() –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
