#!/usr/bin/env python3
"""
–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ Flask Helpdesk
–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
import sys
import shutil
import subprocess
import logging
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_disk_space():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ...")

    try:
        result = subprocess.run(['df', '-h', '/var/www'],
                              capture_output=True, text=True, check=True)
        logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ:")
        for line in result.stdout.strip().split('\n'):
            logger.info(f"  {line}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        lines = result.stdout.strip().split('\n')
        if len(lines) >= 2:
            usage_line = lines[1] if len(lines[1].split()) >= 5 else lines[2]
            usage_percent = usage_line.split()[4].rstrip('%')

            if int(usage_percent) > 90:
                logger.warning(f"‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–û: –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {usage_percent}%")
                return False
            elif int(usage_percent) > 80:
                logger.warning(f"‚ö†Ô∏è  –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {usage_percent}%")
                return True
            else:
                logger.info(f"‚úÖ –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {usage_percent}%")
                return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Å–∫–∞: {e}")
        return False

def clean_old_backups():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
    logger.info("–ü–æ–∏—Å–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...")

    backup_dir = Path("/var/www")
    backup_pattern = "flask_helpdesk_backup_*"

    backups = list(backup_dir.glob(backup_pattern))

    if not backups:
        logger.info("–°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(backups)} —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤:")
    total_size = 0

    for backup in backups:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            result = subprocess.run(['du', '-sh', str(backup)],
                                  capture_output=True, text=True, check=True)
            size = result.stdout.split()[0]
            logger.info(f"  - {backup.name}: {size}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –≤ MB –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
            if 'G' in size:
                total_size += float(size.replace('G', '')) * 1024
            elif 'M' in size:
                total_size += float(size.replace('M', ''))

        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä {backup}: {e}")

    logger.warning(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–æ–≤: ~{total_size/1024:.1f}GB")

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {len(backups)} —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (~{total_size/1024:.1f}GB)? [y/N]: ")

    if response.lower() in ['y', 'yes', '–¥–∞']:
        removed_count = 0
        freed_space = 0

        for backup in backups:
            try:
                logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ {backup.name}...")

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                result = subprocess.run(['du', '-sm', str(backup)],
                                      capture_output=True, text=True, check=True)
                size_mb = int(result.stdout.split()[0])

                # –£–¥–∞–ª—è–µ–º
                shutil.rmtree(backup)
                removed_count += 1
                freed_space += size_mb

                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω {backup.name} ({size_mb}MB)")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {backup}: {e}")

        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –±—ç–∫–∞–ø–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_space}MB")
        return True
    else:
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return False

def clean_temp_files():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    logger.info("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")

    temp_locations = [
        "/tmp/flask*",
        "/tmp/helpdesk*",
        "/var/tmp/flask*"
    ]

    removed_count = 0

    for pattern in temp_locations:
        try:
            result = subprocess.run(['find', pattern.split('*')[0], '-name', pattern.split('/')[-1], '-type', 'f'],
                                  capture_output=True, text=True, check=False)

            if result.stdout.strip():
                files = result.stdout.strip().split('\n')
                for file_path in files:
                    try:
                        os.unlink(file_path)
                        removed_count += 1
                        logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ {pattern}: {e}")

    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    return True

def clean_flask_session():
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ Flask —Å–µ—Å—Å–∏–π"""
    logger.info("–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ Flask —Å–µ—Å—Å–∏–π...")

    session_dir = Path("/var/www/flask_helpdesk/flask_session")

    if not session_dir.exists():
        logger.info("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è flask_session –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return True

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    try:
        files = list(session_dir.glob('*'))
        files_count = len(files)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π: {files_count}")

        if files_count == 0:
            return True

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {files_count} —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π? [y/N]: ")

        if response.lower() in ['y', 'yes', '–¥–∞']:
            removed_count = 0

            for file_path in files:
                try:
                    if file_path.is_file():
                        file_path.unlink()
                        removed_count += 1
                except PermissionError:
                    logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {file_path}")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")

            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –∏–∑ {files_count} —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π")

            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if removed_count > 0:
                try:
                    session_dir.chmod(0o755)
                    logger.info("‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ flask_session –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞: {e}")

            return True
        else:
            logger.info("–û—á–∏—Å—Ç–∫–∞ flask_session –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å flask_session: {e}")
        return False

def main():
    logger.info("="*60)
    logger.info("–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–ï–†–í–ï–†–ê FLASK HELPDESK")
    logger.info("="*60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫ –¥–æ –æ—á–∏—Å—Ç–∫–∏
    logger.info("\n--- –°–û–°–¢–û–Ø–ù–ò–ï –î–ò–°–ö–ê –î–û –û–ß–ò–°–¢–ö–ò ---")
    disk_critical = not check_disk_space()

    if disk_critical:
        logger.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ò–°–ö–ê!")
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞!")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ)
    logger.info("\n--- –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –ë–≠–ö–ê–ü–û–í ---")
    clean_old_backups()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤
    logger.info("\n--- –°–û–°–¢–û–Ø–ù–ò–ï –î–ò–°–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò –ë–≠–ö–ê–ü–û–í ---")
    check_disk_space()

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    logger.info("\n--- –û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í ---")
    clean_temp_files()

    # –û—á–∏—Å—Ç–∫–∞ flask_session (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
    logger.info("\n--- –û–ß–ò–°–¢–ö–ê FLASK SESSION ---")
    clean_flask_session()

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
    logger.info("\n--- –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ò–°–ö–ê ---")
    check_disk_space()

    logger.info("="*60)
    logger.info("–û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    logger.info("="*60)

    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ >2GB –º–µ—Å—Ç–∞")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ GitLab CI/CD")
    print("3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   sudo systemctl restart flask-helpdesk")
    print("   sudo chown -R www-data:www-data /var/www/flask_helpdesk/flask_session")

if __name__ == "__main__":
    main()
