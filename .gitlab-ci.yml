stages:
  - validate
  - test
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  VENV_PATH: "$CI_PROJECT_DIR/venv"

cache:
  paths:
    - .cache/pip/
    - venv/

validate_project:
  stage: validate
  image: python:3.11-slim
  script:
    - echo "Validating project structure"
    - ls -la
    - find . -name "*.py" | wc -l
  only:
    - merge_requests
    - main

test_dependencies:
  stage: test
  image: python:3.11-slim
  before_script:
    - apt-get update -qy
    - apt-get install -y gcc g++ libffi-dev libssl-dev default-libmysqlclient-dev pkg-config
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
  script:
    - source venv/bin/activate
    - pip install -r requirements.txt
    - python -c "from blog import create_app; app = create_app(); print('App created successfully')"
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour
  only:
    - merge_requests
    - main

build_application:
  stage: build
  image: python:3.11-slim
  dependencies:
    - test_dependencies
  script:
    - echo "Building application"
    - tar -czf flask-helpdesk-${CI_COMMIT_SHA}.tar.gz --exclude='.git' --exclude='venv' --exclude='__pycache__' .
  artifacts:
    paths:
      - flask-helpdesk-${CI_COMMIT_SHA}.tar.gz
    expire_in: 1 week
  only:
    - main

deploy_production:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build_application
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to production"
    - scp flask-helpdesk-${CI_COMMIT_SHA}.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && sudo tar -xzf /tmp/flask-helpdesk-${CI_COMMIT_SHA}.tar.gz"
  environment:
    name: production
    url: http://$DEPLOY_HOST:$DEPLOY_PORT
  when: manual
  only:
    - main
