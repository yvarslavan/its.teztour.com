stages:
  - validate
  - test
  - build
  - pre-deploy
  - deploy
  - post-deploy

variables:
  DEPLOY_PATH: "/var/www/flask_helpdesk"
  SERVICE_NAME: "flask-helpdesk"
  BACKUP_PATH: "/var/backups/flask_helpdesk"
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  AFTER_SCRIPT_IGNORE_ERRORS: false

cache:
  paths:
    - .cache/pip/

# ============ –≠–¢–ê–ü 1: –í–ê–õ–ò–î–ê–¶–ò–Ø ============
validate_project:
  stage: validate
  image: python:3.11-slim
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
    - |
      if [ ! -f "requirements.txt" ]; then
        echo "‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
      fi
      if [ ! -f "app.py" ]; then
        echo "‚ùå –§–∞–π–ª app.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
      fi
      if [ ! -f "flask-helpdesk.service" ]; then
        echo "‚ùå –§–∞–π–ª flask-helpdesk.service –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
      fi
    - echo "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞"
    - echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
    - find . -name "*.py" | wc -l | xargs echo "Python —Ñ–∞–π–ª–æ–≤:"
    - find . -name "*.html" | wc -l | xargs echo "HTML —à–∞–±–ª–æ–Ω–æ–≤:"
    - find . -name "*.css" | wc -l | xargs echo "CSS —Ñ–∞–π–ª–æ–≤:"
    - find . -name "*.js" | wc -l | xargs echo "JavaScript —Ñ–∞–π–ª–æ–≤:"
  only:
    - main
    - develop
    - merge_requests

# ============ –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ============
test_dependencies:
  stage: test
  image: python:3.11-slim
  before_script:
    - apt-get update -qy
    - apt-get install -y gcc g++ libffi-dev libssl-dev default-libmysqlclient-dev pkg-config
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
  script:
    - source venv/bin/activate
    - echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    - pip install -r requirements.txt
    - echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
  only:
    - main
    - develop
    - merge_requests

test_flask_import:
  stage: test
  image: python:3.11-slim
  script:
    - echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python -c "from blog import create_app; print('‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')"
    - python -c "import flask; print('Flask –≤–µ—Ä—Å–∏—è:', flask.__version__)"
  only:
    - main
    - develop
    - merge_requests

# ============ –≠–¢–ê–ü 3: –°–ë–û–†–ö–ê ============
build_deployment_package:
  stage: build
  image: python:3.11-slim
  script:
    - echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û deployment –ø–∞–∫–µ—Ç–∞ (v2)..."
    - apt-get update && apt-get install -y rsync
    - mkdir -p deployment_package
    - |
      # –ù–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
      echo "üì¶ –†–ê–î–ò–ö–ê–õ–¨–ù–û –ù–û–í–´–ô –ü–û–î–•–û–î: –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π deployment –ø–∞–∫–µ—Ç..."

      # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      mkdir -p deployment_package/blog

      # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
      cp app.py deployment_package/
      cp wsgi.py deployment_package/
      cp requirements.txt deployment_package/
      cp flask-helpdesk.service deployment_package/
      cp config.py deployment_package/
      cp .flaskenv deployment_package/
      cp config.ini deployment_package/
      cp mysql_db.py deployment_package/
      cp redmine.py deployment_package/
      cp erp_oracle.py deployment_package/

      # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É blog (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
      rsync -av --exclude='__pycache__' --exclude='*.pyc' blog/ deployment_package/blog/

      echo "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω - —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã"
      echo "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ù–ï –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø–∞–∫–µ—Ç:"
      echo "‚ùå app_err.log - $(if [ -f deployment_package/app_err.log ]; then echo '–ù–ê–ô–î–ï–ù!'; else echo '–∏—Å–∫–ª—é—á–µ–Ω'; fi)"
      echo "‚ùå logs/ - $(if [ -d deployment_package/logs ]; then echo '–ù–ê–ô–î–ï–ù–ê!'; else echo '–∏—Å–∫–ª—é—á–µ–Ω–∞'; fi)"
      echo "‚ùå scripts/ - $(if [ -d deployment_package/scripts ]; then echo '–ù–ê–ô–î–ï–ù–ê!'; else echo '–∏—Å–∫–ª—é—á–µ–Ω–∞'; fi)"
    - |
      # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
      find deployment_package/ -name "*.pyc" -delete
      find deployment_package/ -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
      find deployment_package/ -name ".DS_Store" -delete
      echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    - echo "‚úÖ Deployment –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω"
    - echo "üìä –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–æ —Å–∂–∞—Ç–∏—è:"
    - du -sh deployment_package/
    - echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞ (—Ç–æ–ø-—É—Ä–æ–≤–µ–Ω—å):"
    - ls -la deployment_package/
    - echo "üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:"
    - find deployment_package/ -type f | wc -l
    - |
      # –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—ã–π –∞—Ä—Ö–∏–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ
      echo "üóúÔ∏è –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—ã–π –∞—Ä—Ö–∏–≤..."
      tar -czf deployment_package.tar.gz -C deployment_package .
      echo "üìä –†–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ –∞—Ä—Ö–∏–≤–∞:"
      ls -lh deployment_package.tar.gz
      echo "üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è:"
      ORIGINAL_SIZE=$(du -sb deployment_package | cut -f1)
      COMPRESSED_SIZE=$(stat -f%z deployment_package.tar.gz 2>/dev/null || stat -c%s deployment_package.tar.gz)
      echo "–û—Ä–∏–≥–∏–Ω–∞–ª: $(numfmt --to=iec $ORIGINAL_SIZE)"
      echo "–°–∂–∞—Ç—ã–π: $(numfmt --to=iec $COMPRESSED_SIZE)"
      echo "–≠–∫–æ–Ω–æ–º–∏—è: $(( (ORIGINAL_SIZE - COMPRESSED_SIZE) * 100 / ORIGINAL_SIZE ))%"
  artifacts:
    paths:
      - deployment_package/
      - deployment_package.tar.gz
    expire_in: 1 hour
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    when: on_success
  only:
    - main

# ============ –≠–¢–ê–ü 4: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ============
pre_deploy_checks:
  stage: pre-deploy
  image: alpine:latest
  script:
    - echo "‚ÑπÔ∏è –≠—Ç–∞–ø pre_deploy_checks –ø—Ä–æ–ø—É—â–µ–Ω - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ GitLab CI/CD"
    - echo "‚úÖ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–ª–æ—è –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SSH_PRIVATE_KEY, DEPLOY_SERVER, DEPLOY_USER –≤ GitLab CI/CD Settings"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" && $SSH_PRIVATE_KEY && $DEPLOY_SERVER && $DEPLOY_USER'
      when: never  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always

# ============ –≠–¢–ê–ü 5: –î–ï–ü–õ–û–ô ============
deploy_to_server:
  stage: deploy
  image: alpine:latest
  script:
    - echo "‚ÑπÔ∏è –≠—Ç–∞–ø deploy_to_server –ø—Ä–æ–ø—É—â–µ–Ω - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ GitLab CI/CD"
    - echo "‚úÖ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–ª–æ—è –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SSH_PRIVATE_KEY, DEPLOY_SERVER, DEPLOY_USER –≤ GitLab CI/CD Settings"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" && $SSH_PRIVATE_KEY && $DEPLOY_SERVER && $DEPLOY_USER'
      when: never  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always

# ============ –≠–¢–ê–ü 6: –ü–û–°–¢-–î–ï–ü–õ–û–ô –ü–†–û–í–ï–†–ö–ò ============
post_deploy_verification:
  stage: post-deploy
  image: alpine:latest
  script:
    - echo "‚ÑπÔ∏è –≠—Ç–∞–ø post_deploy_verification –ø—Ä–æ–ø—É—â–µ–Ω - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ GitLab CI/CD"
    - echo "‚úÖ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–ª–æ—è –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SSH_PRIVATE_KEY, DEPLOY_SERVER, DEPLOY_USER –≤ GitLab CI/CD Settings"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" && $SSH_PRIVATE_KEY && $DEPLOY_SERVER && $DEPLOY_USER'
      when: never  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always

# ============ ROLLBACK –ó–ê–î–ê–ß–ê (–í–†–£–ß–ù–£–Æ) ============
rollback_deployment:
  stage: deploy
  image: alpine:latest
  script:
    - echo "‚ÑπÔ∏è –≠—Ç–∞–ø rollback_deployment –ø—Ä–æ–ø—É—â–µ–Ω - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ GitLab CI/CD"
    - echo "‚úÖ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–ª–æ—è –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SSH_PRIVATE_KEY, DEPLOY_SERVER, DEPLOY_USER –≤ GitLab CI/CD Settings"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" && $SSH_PRIVATE_KEY && $DEPLOY_SERVER && $DEPLOY_USER'
      when: manual  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    - when: never
