stages:
  - validate
  - test
  - build
  - pre-deploy
  - deploy
  - post-deploy
  - rollback

variables:
  DEPLOY_PATH: "/opt/www"
  SERVICE_NAME: "flask-helpdesk"
  BACKUP_PATH: "/opt/backups/flask_helpdesk"
  SOCKET_PATH: "/run/gunicorn/gunicorn.sock"
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  AFTER_SCRIPT_IGNORE_ERRORS: false
  DEPLOY_DOMAIN: "its.tez-tour.com"

cache:
  paths:
    - .cache/pip/

# ============ –≠–¢–ê–ü 1: –í–ê–õ–ò–î–ê–¶–ò–Ø ============
validate_syntax:
  stage: validate
  image: python:3.9-slim
  tags:
    - docker
    - linux
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python (Shared Runner)..."
    - python -m py_compile app.py
    - echo "‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_REF_NAME == "main"'

# ============ –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ============
run_tests:
  stage: test
  image: python:3.9-slim
  tags:
    - docker
    - linux
  before_script:
    - apt-get update -qq && apt-get install -y -qq git
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (Shared Runner)..."
    - python -m pytest tests/ -v || echo "‚ö†Ô∏è –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
    - echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_REF_NAME == "main"'
  allow_failure: true

# ============ –≠–¢–ê–ü 3: –°–ë–û–†–ö–ê ============
build_deployment_package:
  stage: build
  image: alpine:latest
  tags:
    - docker
    - linux
  before_script:
    - apk add --no-cache tar gzip
  script:
    - echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –¥–µ–ø–ª–æ—è (Shared Runner)..."
    - mkdir -p deployment_package
    - cp -r blog/ deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è blog –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    - cp -r static/ deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è static –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    - cp -r templates/ deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è templates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    - cp -r migrations/ deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    - cp app.py deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –§–∞–π–ª app.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
    - cp requirements.txt deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
    - cp flask-helpdesk.service.redhat deployment_package/flask-helpdesk.service 2>/dev/null || echo "‚ö†Ô∏è –§–∞–π–ª flask-helpdesk.service.redhat –Ω–µ –Ω–∞–π–¥–µ–Ω"
    - cp flask-helpdesk.nginx.conf deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –§–∞–π–ª flask-helpdesk.nginx.conf –Ω–µ –Ω–∞–π–¥–µ–Ω"
    - cp config.ini deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –§–∞–π–ª config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω"
    - cp *.py deployment_package/ 2>/dev/null || echo "‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ .py —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    - cd deployment_package && tar -czf ../deployment_package.tar.gz . && cd ..
    - echo "üì¶ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ deployment_package.tar.gz:"
    - tar -tvf deployment_package.tar.gz | head -n 50 || true
    - echo "‚úÖ –ü–∞–∫–µ—Ç –¥–ª—è –¥–µ–ø–ª–æ—è —Å–æ–∑–¥–∞–Ω deployment_package.tar.gz"
    - echo "üìè –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ $(du -h deployment_package.tar.gz | cut -f1)"
  artifacts:
    paths:
      - deployment_package.tar.gz
      - deployment_package/
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

# ============ –≠–¢–ê–ü 4: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò ============
pre_deploy_checks:
  stage: pre-deploy
  image: alpine:latest
  tags:
    - docker
    - linux
  before_script:
    - apk add --no-cache openssh-client
  script:
    - |
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Red Hat —Å–µ—Ä–≤–µ—Ä–∞ (Shared Runner)..."
      if [ -z "$SSH_PRIVATE_KEY" ] || [ -z "$DEPLOY_SERVER" ] || [ -z "$DEPLOY_USER" ]; then
        echo "‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏"
        echo "‚úÖ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ SSH_PRIVATE_KEY, DEPLOY_SERVER, DEPLOY_USER –≤ GitLab CI/CD Settings"
        exit 0
      fi

      echo "‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

      # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSH
      eval $(ssh-agent -s)
      echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–∞..."

      # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è SSH –∫–ª—é—á–∞
      SSH_KEY_CONTENT=$(mktemp)

      if echo "$SSH_PRIVATE_KEY" | head -c 10 | grep -q "^-----BEGIN"; then
        echo "üîë –û–±—ã—á–Ω—ã–π SSH –∫–ª—é—á"
        printf '%s\n' "$SSH_PRIVATE_KEY" > "$SSH_KEY_CONTENT"
      else
        echo "üîê Base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SSH –∫–ª—é—á, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º"
        echo "$SSH_PRIVATE_KEY" | base64 -d > "$SSH_KEY_CONTENT"
      fi

      chmod 600 "$SSH_KEY_CONTENT"
      ssh-add "$SSH_KEY_CONTENT"
      rm -f "$SSH_KEY_CONTENT"

      mkdir -p ~/.ssh
      chmod 700 ~/.ssh
      ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts

      echo "üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ Red Hat —Å–µ—Ä–≤–µ—Ä–∞..."

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if ! ssh $DEPLOY_USER@$DEPLOY_SERVER "echo 'SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ OK'"; then
        echo "‚ùå –û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        exit 1
      fi

      echo "‚úÖ SSH –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always

# ============ –≠–¢–ê–ü 5: –î–ï–ü–õ–û–ô –ù–ê RED HAT ============
deploy_to_redhat_server:
  stage: deploy
  image: alpine:latest
  tags:
    - docker
    - linux
  before_script:
    - apk add --no-cache openssh-client rsync
  script:
    - |
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è (Shared Runner)..."
      if [ -z "$SSH_PRIVATE_KEY" ] || [ -z "$DEPLOY_SERVER" ] || [ -z "$DEPLOY_USER" ]; then
        echo "‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π"
        echo "‚úÖ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ SSH_PRIVATE_KEY, DEPLOY_SERVER, DEPLOY_USER –≤ GitLab CI/CD Settings"
        exit 0
      fi

      echo "‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

      # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSH
      eval $(ssh-agent -s)
      echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–∞..."

      SSH_KEY_CONTENT=$(mktemp)

      if echo "$SSH_PRIVATE_KEY" | head -c 10 | grep -q "^-----BEGIN"; then
        echo "üîë –û–±—ã—á–Ω—ã–π SSH –∫–ª—é—á"
        printf '%s\n' "$SSH_PRIVATE_KEY" > "$SSH_KEY_CONTENT"
      else
        echo "üîê Base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SSH –∫–ª—é—á, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º"
        echo "$SSH_PRIVATE_KEY" | base64 -d > "$SSH_KEY_CONTENT"
      fi

      chmod 600 "$SSH_KEY_CONTENT"
      ssh-add "$SSH_KEY_CONTENT"
      rm -f "$SSH_KEY_CONTENT"

      mkdir -p ~/.ssh
      chmod 700 ~/.ssh
      ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts

      echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ Red Hat —Å–µ—Ä–≤–µ—Ä (Shared Runner)..."

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      DEPLOY_PATH=${DEPLOY_PATH:-/opt/www}
      BACKUP_PATH=${BACKUP_PATH:-/opt/backups/flask_helpdesk}
      SERVICE_NAME=${SERVICE_NAME:-flask-helpdesk}

      # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      ssh $DEPLOY_USER@$DEPLOY_SERVER "
        echo 'üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø...'
        if [ -d '$DEPLOY_PATH' ]; then
          sudo mkdir -p $BACKUP_PATH
          sudo cp -r $DEPLOY_PATH $BACKUP_PATH/backup_\$(date +%Y%m%d_%H%M%S)
          echo '‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω'
        fi
      "

      # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
      ssh $DEPLOY_USER@$DEPLOY_SERVER "
        echo '‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞ Red Hat...'
        if sudo systemctl is-active --quiet $SERVICE_NAME; then
          sudo systemctl stop $SERVICE_NAME
          echo '‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        else
          echo '‚ÑπÔ∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        fi
      "

      # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      ssh $DEPLOY_USER@$DEPLOY_SERVER "
        echo 'üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è Red Hat...'
        sudo mkdir -p $DEPLOY_PATH
        sudo chown -R $DEPLOY_USER:$DEPLOY_USER $DEPLOY_PATH
        sudo chmod -R 755 $DEPLOY_PATH
      "

      # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
      echo 'üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ Red Hat —Å–µ—Ä–≤–µ—Ä...'
      if [ -f "deployment_package.tar.gz" ]; then
        echo 'üóúÔ∏è –ü–µ—Ä–µ–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–∞ Red Hat —Å–µ—Ä–≤–µ—Ä'

        cat deployment_package.tar.gz | ssh $DEPLOY_USER@$DEPLOY_SERVER '
          set -e
          RELEASE_DIR=$(mktemp -d)
          echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $RELEASE_DIR –Ω–∞ Red Hat..."
          sudo tar -xzf - -C "$RELEASE_DIR"

          echo "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ $DEPLOY_PATH..."
          sudo cp -r "$RELEASE_DIR"/* "$DEPLOY_PATH/"

          echo "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
          sudo rm -rf "$RELEASE_DIR"
        '

        echo '‚úÖ –ê—Ä—Ö–∏–≤ –ø–µ—Ä–µ–¥–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ Red Hat'
      else
        echo '‚ùå –ê—Ä—Ö–∏–≤ deployment_package.tar.gz –Ω–µ –Ω–∞–π–¥–µ–Ω'
        exit 1
      fi

      echo "üéâ –ë–∞–∑–æ–≤—ã–π –¥–µ–ø–ª–æ–π —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
      echo "üåê –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ä–≤–∏—Å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always
