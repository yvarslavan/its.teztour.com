# üöÄ GitLab CI/CD Pipeline –¥–ª—è Flask Helpdesk

stages:
  - validate
  - test
  - build
  - deploy

variables:
  # Python –≤–µ—Ä—Å–∏—è
  PYTHON_VERSION: "3.11"
  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è pip cache
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  VENV_PATH: "$CI_PROJECT_DIR/venv"

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
cache:
  paths:
    - .cache/pip/
    - venv/

# üìã –≠—Ç–∞–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏
validate_project:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - apt-get update -qy
    - apt-get install -y git
  script:
    - echo "üîç Validating project structure..."
    - ls -la
    - echo "‚úÖ Project structure validated"
    - echo "üìä Project statistics:"
    - find . -name "*.py" | wc -l | xargs echo "Python files:"
    - find . -name "*.html" | wc -l | xargs echo "HTML templates:"
    - find . -name "*.js" | wc -l | xargs echo "JavaScript files:"
  only:
    - merge_requests
    - main

# üß™ –≠—Ç–∞–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_dependencies:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - echo "üêç Setting up Python environment..."
    - python --version
    - pip --version
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - apt-get update -qy
    - apt-get install -y gcc g++ libffi-dev libssl-dev default-libmysqlclient-dev pkg-config libldap2-dev libsasl2-dev
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    - python -m venv $VENV_PATH
    - source $VENV_PATH/bin/activate
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    - pip install --upgrade pip setuptools wheel

  script:
    - source $VENV_PATH/bin/activate
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - echo "üîç Testing dependency resolution..."
    - pip install --dry-run -r requirements.txt
    - echo "‚úÖ Dependencies are compatible"
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - echo "üì¶ Installing dependencies..."
    - pip install -r requirements.txt
    - echo "‚úÖ Dependencies installed successfully"
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - echo "üß™ Testing Flask application import..."
    - python -c "import flask; import werkzeug; from blog import create_app; print(f'Flask version: {flask.__version__}'); print(f'Werkzeug version: {werkzeug.__version__}'); app = create_app(); print('‚úÖ Flask app created successfully')"
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - echo "üß™ Running application tests..."
    - python -c "from blog import create_app; import os; app = create_app(); print('‚úÖ App context test passed'); print('üéâ All tests passed!')"

  artifacts:
    paths:
      - venv/
    expire_in: 1 hour

  only:
    - merge_requests
    - main

# üî® –≠—Ç–∞–ø —Å–±–æ—Ä–∫–∏
build_application:
  stage: build
  image: python:${PYTHON_VERSION}-slim
  dependencies:
    - test_dependencies
  before_script:
    - apt-get update -qy
    - apt-get install -y gcc g++ libffi-dev libssl-dev default-libmysqlclient-dev pkg-config libldap2-dev libsasl2-dev

  script:
    - echo "üî® Building Flask application..."
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    - source $VENV_PATH/bin/activate || (python -m venv $VENV_PATH && source $VENV_PATH/bin/activate && pip install -r requirements.txt)
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è Python —Ñ–∞–π–ª–æ–≤
    - python -m compileall blog/
    - python -m compileall *.py
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –¥–µ–ø–ª–æ—è
    - echo "üì¶ Creating deployment package..."
    - tar -czf flask-helpdesk-${CI_COMMIT_SHA}.tar.gz --exclude='.git' --exclude='venv' --exclude='__pycache__' --exclude='*.pyc' --exclude='.pytest_cache' --exclude='app_err.log' .
    - echo "‚úÖ Build completed successfully"
    - ls -lah flask-helpdesk-${CI_COMMIT_SHA}.tar.gz

  artifacts:
    paths:
      - flask-helpdesk-${CI_COMMIT_SHA}.tar.gz
    expire_in: 1 week

  only:
    - main

# üöÄ –≠—Ç–∞–ø –¥–µ–ø–ª–æ—è (Production)
deploy_production:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build_application
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts

  script:
    - echo "üöÄ Deploying to production server..."
    - echo "Target server: $DEPLOY_HOST"
    - echo "Deploy user: $DEPLOY_USER"
    - echo "Deploy path: $DEPLOY_PATH"
    # –°–æ–∑–¥–∞–Ω–∏–µ backup —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && sudo systemctl stop flask-helpdesk && sudo tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz . && sudo chown $DEPLOY_USER:$DEPLOY_USER backup-*.tar.gz"
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
    - scp flask-helpdesk-${CI_COMMIT_SHA}.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && sudo tar -xzf /tmp/flask-helpdesk-${CI_COMMIT_SHA}.tar.gz && sudo chown -R www-data:www-data . && sudo chmod +x wsgi.py"
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ production
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && sudo -u www-data python3 -m venv venv && sudo -u www-data venv/bin/pip install --upgrade pip && sudo -u www-data venv/bin/pip install -r requirements.txt"
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && export FLASK_APP=wsgi.py && sudo -u www-data venv/bin/python -m flask db upgrade || echo 'Migrations skipped'"
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
    - ssh $DEPLOY_USER@$DEPLOY_HOST "sudo systemctl start flask-helpdesk && sudo systemctl status flask-helpdesk"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    - ssh $DEPLOY_USER@$DEPLOY_HOST "sleep 10 && curl -f http://localhost:$DEPLOY_PORT/health || echo 'Health check failed'"

  environment:
    name: production
    url: http://$DEPLOY_HOST:$DEPLOY_PORT
  when: manual
  only:
    - main

# üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
clear_cache:
  stage: deploy
  image: alpine:latest
  script:
    - echo "üßπ Clearing pipeline cache..."
    - rm -rf .cache/
    - echo "‚úÖ Cache cleared"
  when: manual
  only:
    - main