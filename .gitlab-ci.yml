stages:
  - validate
  - test
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip/

validate_project:
  stage: validate
  image: python:3.11-slim
  script:
    - echo "Validating project structure"
    - ls -la
    - find . -name "*.py" | wc -l | xargs echo "Python files:"
    - find . -name "*.html" | wc -l | xargs echo "HTML templates:"
  only:
    - main
    - merge_requests

test_dependencies:
  stage: test
  image: python:3.11-slim
  before_script:
    - apt-get update -qy
    - apt-get install -y gcc g++ libffi-dev libssl-dev default-libmysqlclient-dev pkg-config
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
  script:
    - source venv/bin/activate
    - echo "Installing dependencies..."
    - pip install -r requirements.txt
    - echo "Testing Flask application import..."
    - python -c "from blog import create_app; app = create_app(); print('Flask app created successfully')"
    - echo "Basic application tests completed"
  only:
    - main
    - merge_requests

build_application:
  stage: build
  image: python:3.11-slim
  script:
    - echo "Building Flask application..."
    - echo "Creating lightweight deployment package..."
    - mkdir -p /tmp/deploy
    - mkdir -p /tmp/archive
    - cp -r blog /tmp/deploy/
    - cp -r migrations /tmp/deploy/ || echo "No migrations directory"
    - cp -r static /tmp/deploy/ || echo "No static directory"
    - cp -r templates /tmp/deploy/ || echo "No templates directory"
    - cp requirements.txt /tmp/deploy/
    - cp wsgi.py /tmp/deploy/ || echo "No wsgi.py"
    - cp config.py /tmp/deploy/ || echo "No config.py"
    - cp *.py /tmp/deploy/ || echo "No additional Python files"
    - echo "Creating archive..."
    - cd /tmp/archive
    - tar -czf flask-helpdesk-${CI_COMMIT_SHA}.tar.gz -C /tmp/deploy .
    - mv flask-helpdesk-${CI_COMMIT_SHA}.tar.gz ${CI_PROJECT_DIR}/
    - cd ${CI_PROJECT_DIR}
    - echo "Build completed successfully"
    - ls -lah flask-helpdesk-${CI_COMMIT_SHA}.tar.gz
  artifacts:
    paths:
      - flask-helpdesk-${CI_COMMIT_SHA}.tar.gz
    expire_in: 1 week
  only:
    - main

deploy_to_server:
  stage: deploy
  image: alpine:latest
  before_script:
    - echo "Preparing deployment environment..."
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "SSH_PRIVATE_KEY length:" $(echo "$SSH_PRIVATE_KEY" | wc -c)
    - echo "SSH_PRIVATE_KEY first line:" $(echo "$SSH_PRIVATE_KEY" | head -1)
    - echo "SSH_PRIVATE_KEY last line:" $(echo "$SSH_PRIVATE_KEY" | tail -1)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - || echo "SSH key loading failed, trying alternative method"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "Adding known hosts..."
    - ssh-keyscan -H -p ${DEPLOY_PORT:-22} $DEPLOY_HOST >> ~/.ssh/known_hosts || echo "ssh-keyscan failed, using StrictHostKeyChecking=no"
    - echo "StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "UserKnownHostsFile /dev/null" >> ~/.ssh/config
    - chmod 600 ~/.ssh/config
    - echo "SSH connection prepared"
  script:
    - echo "Testing SSH connection..."
    - ssh -o ConnectTimeout=10 -p ${DEPLOY_PORT:-22} $DEPLOY_USER@$DEPLOY_HOST "echo 'SSH connection successful' && whoami && pwd" || echo "SSH test failed but continuing..."
    - echo "Starting deployment to $DEPLOY_HOST..."
    - echo "Archive to deploy flask-helpdesk-${CI_COMMIT_SHA}.tar.gz"
    - ls -lah flask-helpdesk-${CI_COMMIT_SHA}.tar.gz
    - echo "Uploading archive to server..."
    - scp -o ConnectTimeout=10 -P ${DEPLOY_PORT:-22} flask-helpdesk-${CI_COMMIT_SHA}.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
    - echo "Creating backup of current deployment..."
    - ssh -o ConnectTimeout=10 -p ${DEPLOY_PORT:-22} $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && [ -d current ] && mv current backup-$(date +%Y%m%d-%H%M%S) || echo 'No current deployment to backup'"
    - echo "Extracting new deployment..."
    - ssh -o ConnectTimeout=10 -p ${DEPLOY_PORT:-22} $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && mkdir -p current && tar -xzf flask-helpdesk-${CI_COMMIT_SHA}.tar.gz -C current"
    - echo "Installing Python dependencies on server..."
    - ssh -o ConnectTimeout=10 -p ${DEPLOY_PORT:-22} $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH/current && python3 -m venv venv && source venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt"
    - echo "Setting up application configuration..."
    - ssh -o ConnectTimeout=10 -p ${DEPLOY_PORT:-22} $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH/current && [ -f ../config_production.py ] && cp ../config_production.py . || echo 'No production config found'"
    - echo "Restarting application service..."
    - ssh -o ConnectTimeout=10 -p ${DEPLOY_PORT:-22} $DEPLOY_USER@$DEPLOY_HOST "sudo systemctl restart flask-helpdesk || echo 'Service restart failed - manual intervention required'"
    - echo "Cleaning up old archives..."
    - ssh -o ConnectTimeout=10 -p ${DEPLOY_PORT:-22} $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && find . -name 'flask-helpdesk-*.tar.gz' -mtime +7 -delete || echo 'Cleanup completed'"
    - echo "Deployment completed successfully!"
    - echo "Application should be available at https://its.tez-tour.com"
  environment:
    name: production
    url: https://its.tez-tour.com
  when: manual
  only:
    - main
