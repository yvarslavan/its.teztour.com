name: Deploy Flask App

on:
  push:
    branches:
      - main # Запускать при push в ветку main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TEST_VAR: "Hello from env block"
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22 # Укажите другой порт, если используется нестандартный
        script: |
          set -e # Останавливать скрипт при любой ошибке
          echo ">>> Connecting to server..."

          echo ">>> DEBUG: Checking TEST_VAR..."
          if [ -z "$TEST_VAR" ]; then
            echo ">>> DEBUG: TEST_VAR is EMPTY or NOT SET."
          else
            echo ">>> DEBUG: TEST_VAR = $TEST_VAR"
          fi

          PROJECT_DIR="/var/www/flask_helpdesk"
          GIT_REPO_URL_WITH_TOKEN="https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}.git"

          echo ">>> Checking GITHUB_TOKEN..."
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "Ошибка: Переменная GITHUB_TOKEN не установлена или пуста." >&2
            echo "Убедитесь, что GITHUB_TOKEN корректно передается в 'env' блока 'uses: appleboy/ssh-action@master'." >&2
            exit 1
          else
            echo "Переменная GITHUB_TOKEN установлена."
          fi

          echo ">>> Removing old project directory (if exists): $PROJECT_DIR"
          sudo rm -rf "$PROJECT_DIR"

          echo ">>> Creating project directory and setting permissions: $PROJECT_DIR"
          sudo mkdir -p "$PROJECT_DIR"
          sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} "$PROJECT_DIR"
          cd "$PROJECT_DIR"

          echo ">>> Cloning repository: ${{ github.repository }} (branch: main)"
          git clone --branch main --single-branch "$GIT_REPO_URL_WITH_TOKEN" .

          echo ">>> Verifying current commit in cloned repository"
          git log -n 1

          echo ">>> Activating virtual environment"
          # Убедитесь, что VENV_PATH указывает на правильный путь к venv
          VENV_PATH="/home/${{ secrets.SSH_USER }}/flask_venv/bin/activate" # Используем secrets.SSH_USER
          if [ ! -f "$VENV_PATH" ]; then
              echo "Ошибка: Файл активации виртуального окружения не найден: $VENV_PATH" >&2
              exit 1
          fi
          source "$VENV_PATH"
          echo "Virtual environment activated."

          echo ">>> Upgrading pip and installing dependencies from requirements.txt"
          pip install --upgrade pip
          pip install -r requirements.txt

          echo ">>> Restarting application: flask_helpdesk"
          sudo systemctl restart flask_helpdesk

          echo ">>> Deployment successfully finished!"
