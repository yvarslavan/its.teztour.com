name: Deploy Flask Helpdesk

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-dependencies:
    runs-on: ubuntu-latest
    name: Test Dependencies Compatibility

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: Test dependency resolution
      run: |
        echo "🔍 Testing dependency resolution..."
        python -m pip install --dry-run -r requirements.txt
        echo "✅ Dependencies are compatible"

    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        python -m pip install -r requirements.txt
        echo "✅ Dependencies installed successfully"

    - name: Test Flask import
      run: |
        echo "🧪 Testing Flask application..."
        python -c "
        import flask
        import werkzeug
        from blog import create_app

        print(f'Flask version: {flask.__version__}')
        print(f'Werkzeug version: {werkzeug.__version__}')

        app = create_app()
        print('✅ Flask app created successfully')
        "

  deploy:
    needs: test-dependencies
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Deploy to Production

    steps:
    - uses: actions/checkout@v4

    - name: Test server connectivity
      run: |
        echo "🔍 Testing server connectivity..."
        echo "Server host: ${{ secrets.SSH_HOST }}"
        echo "SSH port: ${{ secrets.SSH_PORT || '22' }}"

        # Test DNS resolution
        if nslookup ${{ secrets.SSH_HOST }}; then
          echo "✅ DNS resolution successful"
        else
          echo "❌ DNS resolution failed"
        fi

        # Test ping (may fail due to firewall, but worth trying)
        if ping -c 3 ${{ secrets.SSH_HOST }}; then
          echo "✅ Server is reachable via ping"
        else
          echo "⚠️ Server doesn't respond to ping (may be blocked by firewall)"
        fi

        # Test SSH port connectivity
        SSH_PORT=${{ secrets.SSH_PORT || '22' }}
        if timeout 10 bash -c "</dev/tcp/${{ secrets.SSH_HOST }}/$SSH_PORT"; then
          echo "✅ Port $SSH_PORT is accessible"
        else
          echo "❌ Port $SSH_PORT is not accessible"
          echo "💡 Possible solutions:"
          echo "   - Check if SSH_HOST is correct public IP (not 10.7.74.252)"
          echo "   - Ensure port forwarding is configured on router"
          echo "   - Check firewall settings"
          exit 1
        fi

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        debug: true
        script: |
          echo "🚀 Starting deployment..."
          echo "Connected to: $(hostname -I | awk '{print $1}')"

          # Navigate to project directory
          cd /var/www/flask_helpdesk

          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git pull origin main

          # Activate virtual environment
          echo "🔧 Activating virtual environment..."
          source venv/bin/activate

          # Upgrade pip and install/upgrade dependencies
          echo "📦 Updating dependencies..."
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt --upgrade

          # Run database migrations if needed
          echo "🗄️ Running database migrations..."
          python -m flask db upgrade || echo "No migrations to run"

          # Check application health
          echo "🏥 Checking application health..."
          python -c "
          from blog import create_app
          app = create_app()
          print('✅ Application health check passed')
          " || exit 1

          # Restart application services
          echo "🔄 Restarting services..."

          # Stop existing processes
          pkill -f "python.*app.py" || echo "No existing processes found"
          pkill -f "gunicorn.*wsgi:app" || echo "No gunicorn processes found"

          # Start application in background
          echo "▶️ Starting application..."
          nohup python app.py > app.log 2>&1 &

          # Wait a moment for startup
          sleep 5

          # Check if application started successfully
          if pgrep -f "python.*app.py" > /dev/null; then
            echo "✅ Application started successfully"
            echo "📊 Process info:"
            ps aux | grep -E "(python.*app.py|gunicorn)" | grep -v grep
          else
            echo "❌ Application failed to start"
            echo "📋 Recent logs:"
            tail -20 app.log
            exit 1
          fi

          echo "🎉 Deployment completed successfully!"
