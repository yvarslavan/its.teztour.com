name: Deploy Flask Helpdesk

on:
  push:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: echo "Tests placeholder"

    - name: Stop existing application
      run: |
        echo "Stopping existing Flask application..."
        pkill -f "python.*app.py" || echo "No Flask processes found"
        pkill -f "gunicorn.*wsgi" || echo "No Gunicorn processes found"
        sleep 2

    - name: Prepare production directory
      run: |
        echo "Preparing production directory..."
        mkdir -p /var/www/flask_helpdesk/
        if [ -w "/var/www/flask_helpdesk/" ]; then
          echo "‚úÖ Write access to /var/www/flask_helpdesk/ confirmed"
        else
          echo "‚ùå No write access to /var/www/flask_helpdesk/"
          echo "Current user: $(whoami)"
          echo "Directory owner: $(ls -ld /var/www/flask_helpdesk/ | awk '{print $3":"$4}')"
          exit 1
        fi

    - name: Copy files to production directory
      run: |
        echo "Copying files to production directory..."
        rsync -av --exclude='.git' --exclude='venv' --exclude='__pycache__' --exclude='*.pyc' \
              $GITHUB_WORKSPACE/ /var/www/flask_helpdesk/

        chmod +x /var/www/flask_helpdesk/app.py
        chmod +x /var/www/flask_helpdesk/wsgi.py

    - name: Install/Update dependencies
      run: |
        echo "Installing/updating Python dependencies..."
        cd /var/www/flask_helpdesk

        if [ -d "venv" ]; then
          echo "Removing old virtual environment..."
          rm -rf venv
        fi

        python3 -m venv venv
        source venv/bin/activate

        pip install --upgrade pip
        pip cache purge || echo "Cache purge failed, continuing..."

        pip install --force-reinstall -r requirements.txt

        echo "=== Installed packages ==="
        pip list | grep -E "(Flask|Werkzeug|flask-login)"
        echo "=========================="

    - name: Database migrations
      run: |
        echo "Running database migrations..."
        cd /var/www/flask_helpdesk

        if [ -f "migrations/env.py" ]; then
          flask db upgrade || echo "No migrations to run"
        fi

    - name: Start application
      run: |
        echo "Starting Flask Helpdesk application..."
        cd /var/www/flask_helpdesk

        mkdir -p logs

        nohup /var/www/flask_helpdesk/venv/bin/python app.py > /var/www/flask_helpdesk/logs/app.log 2>&1 &
        APP_PID=$!
        echo "Started Flask app with PID: $APP_PID"
        echo $APP_PID > /var/www/flask_helpdesk/app.pid

        echo "Waiting for application to start..."
        sleep 10

    - name: Health check
      run: |
        echo "Performing health check..."
        cd /var/www/flask_helpdesk

        if [ -f "app.pid" ]; then
          APP_PID=$(cat app.pid)
          echo "Checking PID from file: $APP_PID"
          if kill -0 $APP_PID 2>/dev/null; then
            echo "‚úÖ Flask process is running (PID: $APP_PID)"
            PROCESS_FOUND=true
          else
            echo "‚ö†Ô∏è PID from file is not active"
            PROCESS_FOUND=false
          fi
        else
          echo "‚ö†Ô∏è PID file not found"
          PROCESS_FOUND=false
        fi

        if [ "$PROCESS_FOUND" = false ]; then
          echo "Searching for Flask processes..."
          if pgrep -f "app.py" > /dev/null; then
            echo "‚úÖ Flask process found via pgrep"
            PROCESS_FOUND=true
          else
            echo "‚ö†Ô∏è No Flask processes found via pgrep"
          fi
        fi

        echo "=== Application logs (last 10 lines) ==="
        tail -10 /var/www/flask_helpdesk/logs/app.log || echo "No logs found"
        echo "========================================"

        echo "Testing HTTP connection..."
        HTTP_SUCCESS=false
        for i in {1..10}; do
          if curl -f -s http://localhost:5000 > /dev/null; then
            echo "‚úÖ Application is responding on port 5000 (attempt $i)"
            HTTP_SUCCESS=true
            break
          else
            echo "‚è≥ Attempt $i/10: Application not ready, waiting 3 seconds..."
            sleep 3
          fi
        done

        if [ "$HTTP_SUCCESS" = true ]; then
          echo "üöÄ Deployment completed successfully!"
          echo "‚úÖ Application is accessible via HTTP"
          exit 0
        elif [ "$PROCESS_FOUND" = true ]; then
          echo "‚ö†Ô∏è Process is running but HTTP check failed"
          echo "This might be a startup delay - check logs manually"
          exit 0
        else
          echo "‚ùå Both process and HTTP checks failed"
          exit 1
        fi
