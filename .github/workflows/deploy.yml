name: Deploy Flask Helpdesk

on:
  push:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: echo "Tests placeholder"

    - name: Stop existing application
      run: |
        echo "Stopping existing Flask application..."
        pkill -f "python.*app.py" || echo "No Flask processes found"
        pkill -f "gunicorn.*wsgi" || echo "No Gunicorn processes found"
        sleep 2

    - name: Copy files to production directory
      run: |
        echo "Copying files to production directory..."
        rsync -av --exclude='.git' --exclude='venv' --exclude='__pycache__' --exclude='*.pyc' \
              $GITHUB_WORKSPACE/ /var/www/flask_helpdesk/

        sudo chown -R $USER:$USER /var/www/flask_helpdesk/
        chmod +x /var/www/flask_helpdesk/app.py
        chmod +x /var/www/flask_helpdesk/wsgi.py

    - name: Install/Update dependencies
      run: |
        echo "Installing/updating Python dependencies..."
        cd /var/www/flask_helpdesk

        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi

        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Database migrations
      run: |
        echo "Running database migrations..."
        cd /var/www/flask_helpdesk
        source venv/bin/activate

        if [ -f "migrations/env.py" ]; then
          flask db upgrade || echo "No migrations to run"
        fi

    - name: Start application
      run: |
        echo "Starting Flask Helpdesk application..."
        cd /var/www/flask_helpdesk

        mkdir -p logs

        nohup /var/www/flask_helpdesk/venv/bin/python app.py > /var/www/flask_helpdesk/logs/app.log 2>&1 &

        sleep 5

    - name: Health check
      run: |
        echo "Performing health check..."

        if pgrep -f "python.*app.py"; then
          echo "✅ Flask process is running"
        else
          echo "❌ Flask process not found"
          exit 1
        fi

        for i in {1..5}; do
          if curl -f -s http://localhost:5000 > /dev/null; then
            echo "✅ Application is responding on port 5000"
            break
          else
            echo "⏳ Attempt $i: Application not ready, waiting..."
            sleep 3
          fi

          if [ $i -eq 5 ]; then
            echo "❌ Application failed to respond after 5 attempts"
            exit 1
          fi
        done

        echo "🚀 Deployment completed successfully!"
