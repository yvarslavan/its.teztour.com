import atexit
import logging
import os
from pathlib import Path

from apscheduler.triggers.interval import IntervalTrigger
from flask import Flask, request, session, Blueprint
from flask_apscheduler import APScheduler
from flask_bcrypt import Bcrypt
from flask_cors import CORS
from flask_login import LoginManager
from flask_migrate import Migrate
from flask_session import Session
from flask_wtf.csrf import CSRFProtect

from .db_config import db
from .settings import Config
from blog.scheduler_tasks import scheduled_check_all_user_notifications
from blog.notification_service import BrowserPushService
from blog.utils.logger import configure_blog_logger

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', force=True)
# force=True –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –ª—é–±—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.

bcrypt = Bcrypt()
migrate = Migrate()

login_manager = LoginManager()
login_manager.login_view = "users.login"  # type: ignore
login_manager.login_message_category = "info"
login_manager.login_message = "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É!"

scheduler = APScheduler()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def shutdown_scheduler():
    if scheduler.running:
        try:
            scheduler.shutdown()
            print("Scheduler shutdown successfully.")
        except Exception as e:
            print(f"Error during scheduler shutdown: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
atexit.register(shutdown_scheduler)

csrf = CSRFProtect()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = Path(__file__).parent / "db" / "blog.db"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not db_path.parent.exists():
    db_path.parent.mkdir(parents=True, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Oracle Client –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Thin Mode
# python-oracledb —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Thin Mode (—á–∏—Å—Ç—ã–π Python) –±–µ–∑ Oracle Client
# Thick Mode –æ—Ç–∫–ª—é—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Oracle Instant Client
print("üü¢ [INIT] Oracle DB —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Thin Mode (–±–µ–∑ Oracle Client)")

def create_app():
    app = Flask(__name__)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    app.config.from_object(Config)

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
    app.secret_key = os.environ.get('SECRET_KEY', "e6914948deb30b6ece648d7ac6c81bc1fa822008d425dc38")

    # –†–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
    if app.debug:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        app.config.update(
            SESSION_COOKIE_NAME='helpdesk_session',
            SESSION_COOKIE_SECURE=False,
            SESSION_COOKIE_HTTPONLY=True,
            SESSION_COOKIE_SAMESITE='Lax',
            PERMANENT_SESSION_LIFETIME=86400,
            WTF_CSRF_ENABLED=True,  # –í–∫–ª—é—á–∞–µ–º CSRF –∑–∞—â–∏—Ç—É
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            SEND_FILE_MAX_AGE_DEFAULT=0,
            TEMPLATES_AUTO_RELOAD=True
        )
        print("üîß [INIT] –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    else:
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        app.config.update(
            SESSION_COOKIE_NAME='helpdesk_session',
            SESSION_COOKIE_SECURE=True,  # –í–∫–ª—é—á–µ–Ω–æ –¥–ª—è HTTPS
            SESSION_COOKIE_HTTPONLY=True,
            SESSION_COOKIE_SAMESITE='Lax',  # –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            SESSION_COOKIE_DOMAIN='.tez-tour.com',  # –î–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            PERMANENT_SESSION_LIFETIME=86400,
            WTF_CSRF_ENABLED=True  # –í–∫–ª—é—á–∞–µ–º CSRF –∑–∞—â–∏—Ç—É
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for key in ["SQLALCHEMY_DATABASE_URI", "SQLALCHEMY_DATABASE_URI_ORACLE_CRM",
                "SQLALCHEMY_SALES_SCHEMA_URI_ORACLE_SALES"]:
        if app.config.get(key) is None:
            print(f"–í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {key} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")

    # –ù–û–í–û–ï: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è SQLAlchemy
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
    # –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∂–∏–º–∞ debug (–¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏)
    app.config['TEMPLATES_AUTO_RELOAD'] = True
    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jinja –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    app.jinja_env.auto_reload = True
    app.jinja_env.cache = {}  # –û—á–∏—â–∞–µ–º –∫—ç—à —à–∞–±–ª–æ–Ω–æ–≤

    print(f"üîß [INIT] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤:")
    print(f"üîß [INIT] TEMPLATES_AUTO_RELOAD: {app.config.get('TEMPLATES_AUTO_RELOAD')}")
    print(f"üîß [INIT] jinja_env.auto_reload: {app.jinja_env.auto_reload}")
    print(f"üîß [INIT] DEBUG: {app.debug}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db.init_app(app)
    bcrypt.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db, render_as_batch=True)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è app.logger
    configure_blog_logger()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º user_loader –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ login_manager
    from blog.models import load_user
    login_manager.user_loader(load_user)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CSRF –∑–∞—â–∏—Ç—É
    csrf.init_app(app)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö —Å—Ä–µ–¥
    cors_origins = ["*"] if app.debug else [
        "https://your-domain.com",
        "https://www.your-domain.com",
        "https://tez-tour.com",
        "https://www.tez-tour.com"
    ]

    CORS(
        app,
        resources={
            r"/*": {
                "origins": cors_origins,
                "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
                "allow_headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "Access-Control-Allow-Origin",
                    "Access-Control-Allow-Headers",
                    "Access-Control-Allow-Methods"
                ],
                "supports_credentials": True,
                "expose_headers": ["Content-Range", "X-Total-Count"]
            }
        }
    )
    print(f"üåê [INIT] CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è origins: {cors_origins}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprint'—ã
    from blog.main.routes import main
    from blog.user.routes import users
    from blog.post.routes import posts
    from blog.call.routes import calls
    from blog.finesse.routes import finesse
    from blog.netmonitor.routes import netmonitor  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    from blog.tasks.routes import tasks_bp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª—é–ø—Ä–∏–Ω—Ç –∑–∞–¥–∞—á
    from blog.tasks.api_routes import api_bp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API –±–ª—é–ø—Ä–∏–Ω—Ç

    app.register_blueprint(main)
    app.register_blueprint(users)
    app.register_blueprint(posts)
    app.register_blueprint(calls)
    app.register_blueprint(finesse, url_prefix="/finesse")
    app.register_blueprint(netmonitor)
    app.register_blueprint(tasks_bp, url_prefix="/tasks")  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–ª—é–ø—Ä–∏–Ω—Ç –∑–∞–¥–∞—á —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    app.register_blueprint(api_bp)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API –±–ª—é–ø—Ä–∏–Ω—Ç (—É–∂–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /tasks/api)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º template helpers –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ö–∞—Ä–¥–∫–æ–¥–∞ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
    from blog.utils.template_helpers import register_template_helpers
    register_template_helpers(app)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    with app.app_context():
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê - –ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
        # try:
        #     import sqlite3
        #     # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        #     db_uri = app.config.get('SQLALCHEMY_DATABASE_URI', '')
        #     if db_uri.startswith('sqlite:///'):
        #         db_path = db_uri.replace('sqlite:///', '')
        #         if os.path.exists(db_path):
        #             conn = sqlite3.connect(db_path)
        #             cursor = conn.cursor()
        #
        #             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ notifications_widget_enabled
        #             cursor.execute("PRAGMA table_info(users)")
        #             columns = [col[1] for col in cursor.fetchall()]
        #
        #             if 'notifications_widget_enabled' not in columns:
        #                 cursor.execute("ALTER TABLE users ADD COLUMN notifications_widget_enabled BOOLEAN DEFAULT 1 NOT NULL")
        #                 cursor.execute("UPDATE users SET notifications_widget_enabled = 1")
        #                 conn.commit()
        #                 print("[INIT] –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ notifications_widget_enabled –≤ —Ç–∞–±–ª–∏—Ü—É users", flush=True)
        #             else:
        #                 print("[INIT] –ü–æ–ª–µ notifications_widget_enabled —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", flush=True)
        #
        #             conn.close()
        #         else:
        #             print(f"[INIT] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}", flush=True)
        #     else:
        #         print("[INIT] –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å SQLite", flush=True)
        # except Exception as e:
        #     print(f"[INIT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: {e}", flush=True)
        #     # –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏

        print("[INIT] –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏", flush=True)

        # Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, CSRF –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã
        print("[INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ push API.", flush=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ Werkzeug
    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
    if os.environ.get("WERKZEUG_RUN_MAIN") == "true" or not app.debug:
        if not scheduler.running:
            try:
                scheduler.init_app(app) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
                scheduler.start()
                app.logger.info("Scheduler initialized and started successfully ONLY in main process or production.")

                job_id = 'check_all_user_notifications_job'
                if not scheduler.get_job(job_id):
                    scheduler.add_job(
                        func=scheduled_check_all_user_notifications,
                        trigger=IntervalTrigger(minutes=1), # –∏–ª–∏ app.config.get('SCHEDULER_INTERVAL_MINUTES', 1)
                        id=job_id,
                        name='Check all user notifications every 1 minute',
                        replace_existing=True
                    )
                    app.logger.info(f"Job '{job_id}' added to scheduler.")
                else:
                    app.logger.info(f"Job '{job_id}' already exists in scheduler.")
            except Exception as e_scheduler_init:
                app.logger.error(f"Error initializing or starting scheduler: {e_scheduler_init}", exc_info=True)
    else:
        if app.debug: # –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏, –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            app.logger.info("Scheduler NOT started in Werkzeug reloader child process.")


    # <<< –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-Session >>>
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ SESSION_TYPE —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Config)
    if not app.config.get("SESSION_TYPE"):
        app.config["SESSION_TYPE"] = "filesystem" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
        print("WARNING: SESSION_TYPE not set in Config, defaulting to 'filesystem'")
    Session(app)
    # <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø >>>

    @app.after_request
    def after_request(response):
        app.logger.debug(f"Session after request: {dict(session)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
        if app.debug:
            response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
            response.headers['Pragma'] = 'no-cache'
            response.headers['Expires'] = '0'

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ CSS
            if response.content_type and 'text/css' in response.content_type:
                response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate, max-age=0'

        return response

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BrowserPushService
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–¥ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ app.browser_push_service
    # –û–±—ã—á–Ω–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π Flask, –Ω–æ –¥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ app
    try:
        setattr(app, 'browser_push_service', BrowserPushService())
        app.logger.info("[INIT] BrowserPushService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ app.")
    except Exception as e:
        app.logger.error(f"[INIT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BrowserPushService: {e}", exc_info=True)
        # –†–µ—à–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏:
        # 1. –ü–æ–∑–≤–æ–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —É–ø–∞—Å—Ç—å (–µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∫—Ä–∏—Ç–∏—á–µ–Ω)
        # 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ None –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å (–µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Å—Ç–∞—Ä—Ç–∞)
        setattr(app, 'browser_push_service', None)

    return app
