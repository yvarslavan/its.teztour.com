/**
 * TasksTable_Simple - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á
 * –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
class TasksTable_Simple {
  constructor() {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    this.eventBus = window.eventBus || this.createEventBus();
    this.loadingManager = window.loadingManager || this.createLoadingManager();

    this.tableElement = null;
    this.isInitialized = false;
    this.currentData = [];
    this.currentPage = 1;
    this.pageSize = 25;
    this.totalRecords = 0;
    this.isLoading = false;
    this.hasMoreData = true;
    this.currentFilters = {};
    this.initializationAttempts = 0;
    this.maxInitializationAttempts = 5;

    console.log('[TasksTable] üöÄ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    this.scheduleInitialization();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π EventBus –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  createEventBus() {
    console.log('[TasksTable] üîß –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π EventBus');
    return {
      listeners: {},
      on: function(event, callback) {
        if (!this.listeners[event]) this.listeners[event] = [];
        this.listeners[event].push(callback);
      },
      emit: function(event, data) {
        if (this.listeners[event]) {
          this.listeners[event].forEach(callback => {
            try {
              callback(data);
            } catch (error) {
              console.error('[EventBus] –û—à–∏–±–∫–∞ –≤ callback:', error);
            }
          });
        }
      }
    };
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π LoadingManager –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  createLoadingManager() {
    console.log('[TasksTable] üîß –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π LoadingManager');
    return {
      show: (message) => {
        console.log('[TasksTable] üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É:', message);
        let loadingDiv = document.getElementById('tasks-loading-indicator');
        if (!loadingDiv) {
          loadingDiv = document.createElement('div');
          loadingDiv.id = 'tasks-loading-indicator';
          loadingDiv.style.cssText = `
            position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
            background: rgba(255, 255, 255, 0.95); padding: 20px; border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); z-index: 1000;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
          `;
          document.body.appendChild(loadingDiv);
        }
        loadingDiv.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${message || '–ó–∞–≥—Ä—É–∑–∫–∞...'}`;
        loadingDiv.style.display = 'block';
      },
      hide: () => {
        const loadingDiv = document.getElementById('tasks-loading-indicator');
        if (loadingDiv) {
          loadingDiv.style.display = 'none';
        }
      }
    };
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–ª–∞–Ω–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  scheduleInitialization() {
    const attemptInitialization = () => {
      this.initializationAttempts++;
      console.log(`[TasksTable] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ${this.initializationAttempts}/${this.maxInitializationAttempts}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å DOM
      if (document.readyState === 'loading') {
        console.log('[TasksTable] ‚è≥ DOM –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º...');
        document.addEventListener('DOMContentLoaded', () => {
          setTimeout(attemptInitialization, 100);
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      this.tableElement = document.getElementById('tasksTable');
      if (!this.tableElement) {
        if (this.initializationAttempts < this.maxInitializationAttempts) {
          console.log('[TasksTable] ‚è≥ –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 500–º—Å...');
          setTimeout(attemptInitialization, 500);
          return;
        } else {
          console.error('[TasksTable] ‚ùå –¢–∞–±–ª–∏—Ü–∞ #tasksTable –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
          this.showError('–¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
          return;
        }
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      this.init().catch(error => {
        console.error('[TasksTable] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        if (this.initializationAttempts < this.maxInitializationAttempts) {
          setTimeout(attemptInitialization, 1000);
        }
      });
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(attemptInitialization, 100);
  }

  async init() {
    try {
      console.log('[TasksTable] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á...');

      if (this.isInitialized) {
        console.log('[TasksTable] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this._setupEventListeners();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
      this._setupScrollListener();

      this.isInitialized = true;
      console.log('[TasksTable] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log('[TasksTable] üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      await this.loadTasks();

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      this.eventBus.emit('table:initialized', {
        component: 'TasksTable_Simple',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('[TasksTable] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: ' + error.message);
      this.eventBus.emit('table:error', { error: error.message });
      throw error;
    }
  }

  _setupEventListeners() {
    console.log('[TasksTable] üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.eventBus.on('filters:changed', (data) => {
      console.log('[TasksTable] üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ filters:changed:', data);
      this.applyFilters(data.filters);
    });

    this.eventBus.on('search:changed', (data) => {
      console.log('[TasksTable] üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ search:changed:', data);
      this.search(data.searchTerm);
    });

    this.eventBus.on('table:refresh', () => {
      console.log('[TasksTable] üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ table:refresh');
      this.refresh();
    });
  }

  _setupScrollListener() {
    console.log('[TasksTable] üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏...');

    const container = document.getElementById('tasks-table-container') ||
                     document.querySelector('.table-responsive') ||
                     this.tableElement?.parentElement;

    if (container) {
      container.addEventListener('scroll', () => {
        if (this.isLoading || !this.hasMoreData) return;

        const scrollTop = container.scrollTop;
        const scrollHeight = container.scrollHeight;
        const clientHeight = container.clientHeight;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –Ω–∞ 80% –≤–Ω–∏–∑
        if (scrollTop + clientHeight >= scrollHeight * 0.8) {
          console.log('[TasksTable] üìú –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ –¥–∞–Ω–Ω—ã–µ...');
          this.loadMoreTasks();
        }
      });
      console.log('[TasksTable] ‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', container.id || container.className);
    } else {
      console.warn('[TasksTable] ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  async loadTasks(resetData = true) {
    console.log('[TasksTable] üì° loadTasks –≤—ã–∑–≤–∞–Ω, resetData:', resetData);

    if (resetData) {
      this.currentPage = 1;
      this.currentData = [];
      this.hasMoreData = true;
    }

    return this.loadMoreTasks();
  }

  async loadMoreTasks() {
    if (this.isLoading || !this.hasMoreData) {
      console.log('[TasksTable] ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: isLoading=', this.isLoading, 'hasMoreData=', this.hasMoreData);
      return;
    }

    try {
      console.log('[TasksTable] üì° –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', this.currentPage);

      this.isLoading = true;
      if (this.currentPage === 1) {
        this.loadingManager.show('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...');
      }

      // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const params = {
        start: (this.currentPage - 1) * this.pageSize,
        length: this.pageSize,
        ...this.currentFilters
      };

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const searchInput = document.getElementById('searchInput');
      const statusFilter = document.getElementById('statusFilter');
      const projectFilter = document.getElementById('projectFilter');
      const priorityFilter = document.getElementById('priorityFilter');

      if (searchInput?.value?.trim()) {
        params.search = searchInput.value.trim();
        console.log('[TasksTable] üîç –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫:', params.search);
      }
      if (statusFilter?.value && statusFilter.value !== '') {
        params.status_filter = statusFilter.value;
        console.log('[TasksTable] üîç –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞:', params.status_filter);
      }
      if (projectFilter?.value && projectFilter.value !== '') {
        params.project_filter = projectFilter.value;
        console.log('[TasksTable] üîç –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–µ–∫—Ç–∞:', params.project_filter);
      }
      if (priorityFilter?.value && priorityFilter.value !== '') {
        params.priority_filter = priorityFilter.value;
        console.log('[TasksTable] üîç –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:', params.priority_filter);
      }

      console.log('[TasksTable] üì° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', params);

      const response = await fetch('/tasks/api/tasks?' + new URLSearchParams(params));

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('[TasksTable] üì° –û—Ç–≤–µ—Ç API:', data);

      if (data.error) {
        throw new Error(data.error);
      }

      const newTasks = data.data || [];
      this.totalRecords = data.recordsTotal || 0;

      console.log('[TasksTable] üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á:', newTasks.length, '–í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ:', this.totalRecords);

      if (this.currentPage === 1) {
        this.currentData = newTasks;
      } else {
        this.currentData = [...this.currentData, ...newTasks];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
      this.hasMoreData = newTasks.length === this.pageSize && this.currentData.length < this.totalRecords;

      this.renderTable(this.currentData, this.currentPage === 1);
      this.currentPage++;

      this.eventBus.emit('table:dataLoaded', {
        data: this.currentData,
        total: this.totalRecords,
        page: this.currentPage - 1,
        hasMoreData: this.hasMoreData
      });

      console.log('[TasksTable] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á:', newTasks.length, '–í—Å–µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü–µ:', this.currentData.length);

    } catch (error) {
      console.error('[TasksTable] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: ' + error.message);
      this.eventBus.emit('table:error', { error: error.message });
    } finally {
      this.isLoading = false;
      this.loadingManager.hide();
    }
  }

  renderTable(data, clearTable = true) {
    console.log('[TasksTable] üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã, –¥–∞–Ω–Ω—ã—Ö:', data?.length, '–æ—á–∏—Å—Ç–∫–∞:', clearTable);

    const tbody = this.tableElement.querySelector('tbody');
    if (!tbody) {
      console.error('[TasksTable] ‚ùå tbody –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ');
      return;
    }

    if (clearTable) {
      tbody.innerHTML = '';
    }

    if (!data || data.length === 0) {
      if (clearTable) {
        tbody.innerHTML = `
          <tr>
            <td colspan="8" class="text-center" style="padding: 2rem; color: #6b7280;">
              <i class="fas fa-inbox" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
              –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            </td>
          </tr>
        `;
      }
      return;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–æ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
    const rowsHTML = data.map(task => {
      try {
        return `
          <tr data-task-id="${task.id || 'unknown'}" style="transition: background-color 0.2s ease;">
            <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
              <a href="/tasks/my-tasks/${task.id || 'unknown'}" class="task-link"
                 style="color: #667eea; font-weight: 600; text-decoration: none;"
                 data-task-id="${task.id || 'unknown'}">
                #${task.id || 'N/A'}
              </a>
            </td>
            <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0; color: #374151;">
              ${this.escapeHtml(task.subject) || '–ë–µ–∑ —Ç–µ–º—ã'}
            </td>
            <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
              <span class="badge badge-status" style="display: inline-block; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; background: #dbeafe; color: #1e40af;">
                ${this.escapeHtml(task.status_name) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </span>
            </td>
            <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0; color: #374151;">
              ${this.escapeHtml(task.project_name) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            </td>
            <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
              <span class="badge badge-priority" style="display: inline-block; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; background: #fef3c7; color: #92400e;">
                ${this.escapeHtml(task.priority_name) || '–û–±—ã—á–Ω—ã–π'}
              </span>
            </td>
            <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0; color: #374151;">
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                <i class="fas fa-envelope" style="color: #6b7280; font-size: 0.8rem;"></i>
                <span style="font-size: 0.9rem;">${this.escapeHtml(task.easy_email_to) || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
              </div>
            </td>
            <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0; color: #6b7280;">
              ${task.created_on ? new Date(task.created_on).toLocaleDateString('ru-RU') : '-'}
            </td>
            <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0; color: #6b7280;">
              ${task.updated_on ? new Date(task.updated_on).toLocaleDateString('ru-RU') : '-'}
            </td>
          </tr>
        `;
      } catch (error) {
        console.error('[TasksTable] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á–∏:', task, error);
        return `
          <tr>
            <td colspan="8" style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0; color: #dc3545;">
              ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            </td>
          </tr>
        `;
      }
    }).join('');

    if (clearTable) {
      tbody.innerHTML = rowsHTML;
    } else {
      tbody.insertAdjacentHTML('beforeend', rowsHTML);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ
    if (this.hasMoreData && !clearTable) {
      const loadingRow = document.createElement('tr');
      loadingRow.innerHTML = `
        <td colspan="8" class="text-center" style="padding: 1rem;">
          <i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...
        </td>
      `;
      tbody.appendChild(loadingRow);
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞
    this.bindRowEvents();

    console.log('[TasksTable] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞, —Å—Ç—Ä–æ–∫:', tbody.querySelectorAll('tr[data-task-id]').length);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
  escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  bindRowEvents() {
    const rows = this.tableElement.querySelectorAll('tbody tr[data-task-id]');
    rows.forEach(row => {
      // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
      row.addEventListener('mouseenter', () => {
        row.style.backgroundColor = '#f8fafc';
      });

      row.addEventListener('mouseleave', () => {
        row.style.backgroundColor = '';
      });

      row.addEventListener('click', (e) => {
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–¥–∞—á–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        if (e.target.classList.contains('task-link') || e.target.closest('.task-link')) {
          return; // –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ href
        }

        const taskId = row.dataset.taskId;
        this.eventBus.emit('task:click', { taskId });
      });
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫ –∑–∞–¥–∞—á
    const taskLinks = this.tableElement.querySelectorAll('.task-link');
    taskLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        const taskId = link.dataset.taskId || link.getAttribute('href').split('/').pop();
        console.log('[TasksTable] üîó –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–¥–∞—á–µ:', taskId);

        // –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      });
    });
  }

  applyFilters(filters) {
    console.log('[TasksTable] üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filters);
    this.currentFilters = filters;
    this.loadTasks(true);
  }

  search(searchTerm) {
    console.log('[TasksTable] üîç –ü–æ–∏—Å–∫:', searchTerm);
    this.currentFilters.search = searchTerm;
    this.loadTasks(true);
  }

  refresh() {
    console.log('[TasksTable] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã');
    this.loadTasks(true);
  }

  showError(message) {
    const tbody = this.tableElement.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = `<tr><td colspan="8" class="text-center text-danger" style="padding: 2rem; color: #dc3545;">‚ö†Ô∏è ${message}</td></tr>`;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TasksApp
  clearFilters() {
    console.log('[TasksTable] üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
    this.currentFilters = {};
    this.loadTasks(true);
  }

  destroy() {
    console.log('[TasksTable] üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
    this.isInitialized = false;
    this.currentData = [];
    this.currentFilters = {};
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = TasksTable_Simple;
} else {
  window.TasksTable_Simple = TasksTable_Simple;
}
