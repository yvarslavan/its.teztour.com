/**
 * KanbanManager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Kanban –¥–æ—Å–∫–æ–π
 * v1.0.0
 */

class KanbanManager {
    constructor() {
        this.currentView = 'list';
        this.tasksData = [];
        this.filters = {};
        this.isLoading = false;
        this.completedTasksLoaded = false;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ Kanban
        this.columns = [
            { id: 'new-column', name: '–ù–æ–≤—ã–µ', icon: 'fas fa-plus-circle' },
            { id: 'in-progress-column', name: '–í —Ä–∞–±–æ—Ç–µ', icon: 'fas fa-cog' },
            { id: 'testing-column', name: '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', icon: 'fas fa-flask' },
            { id: 'completed-column', name: '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ', icon: 'fas fa-check-circle' }
        ];

        this.init();
    }

    init() {
        console.log('[KanbanManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kanban –º–µ–Ω–µ–¥–∂–µ—Ä–∞');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const toggleButtons = document.querySelectorAll('.view-toggle-btn');
        const kanbanBoard = document.getElementById('kanban-board');
        const tableContainer = document.querySelector('.table-container');

        console.log('[KanbanManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
        console.log('- –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', toggleButtons.length);
        console.log('- Kanban –¥–æ—Å–∫–∞:', !!kanbanBoard);
        console.log('- –¢–∞–±–ª–∏—Ü–∞:', !!tableContainer);

        // –°–æ–∑–¥–∞—ë–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        this.createDynamicColumns().then(() => {
            this.setupEventListeners();
            this.initDragAndDrop();
            console.log('[KanbanManager] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }).catch(error => {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        });
    }

    setupEventListeners() {
        console.log('[KanbanManager] üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏
        document.addEventListener('click', (e) => {
            console.log('[KanbanManager] üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É:', e.target);

            if (e.target.closest('.view-toggle-btn')) {
                const btn = e.target.closest('.view-toggle-btn');
                const view = btn.dataset.view;
                console.log('[KanbanManager] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥:', view);
                this.switchView(view);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –∑–∞–¥–∞—á - —É–±—Ä–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –¥–µ—Ç–∞–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –Ω–æ–º–µ—Ä
            // if (e.target.closest('.kanban-card')) {
            //     const card = e.target.closest('.kanban-card');
            //     const taskId = card.dataset.taskId;
            //     if (taskId) {
            //         console.log('[KanbanManager] üîó –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–¥–∞—á–∏:', taskId);
            //         this.openTaskDetails(taskId);
            //     }
            // }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.setupFilterListeners();

        console.log('[KanbanManager] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    setupFilterListeners() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        const filterSelects = ['status-filter', 'project-filter', 'priority-filter'];

        filterSelects.forEach(filterId => {
            const select = document.getElementById(filterId);
            if (select) {
                select.addEventListener('change', () => {
                    this.updateFilters();
                    if (this.currentView === 'kanban') {
                        this.loadKanbanData();
                    }
                });
            }
        });
    }

    updateFilters() {
        this.filters = {
            status: document.getElementById('status-filter')?.value || '',
            project: document.getElementById('project-filter')?.value || '',
            priority: document.getElementById('priority-filter')?.value || ''
        };

        console.log('[KanbanManager] üîç –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.filters);
    }

        switchView(view) {
        console.log(`[KanbanManager] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥: ${view}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        const allButtons = document.querySelectorAll('.view-toggle-btn');
        console.log('[KanbanManager] üîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', allButtons.length);

        allButtons.forEach(btn => {
            btn.classList.remove('active');
        });

        const targetButton = document.querySelector(`[data-view="${view}"]`);
        if (targetButton) {
            targetButton.classList.add('active');
            console.log('[KanbanManager] ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        } else {
            console.error('[KanbanManager] ‚ùå –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', view);
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.toggleViewSections(view);

        this.currentView = view;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Kanban –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–µ–≥–æ
        if (view === 'kanban') {
            console.log('[KanbanManager] üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Kanban');
            this.loadKanbanData();
        }
    }

        toggleViewSections(view) {
        console.log(`[KanbanManager] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞: ${view}`);

        const tableContainer = document.querySelector('.table-container');
        const kanbanBoard = document.getElementById('kanban-board');

        console.log('[KanbanManager] üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
        console.log('- –¢–∞–±–ª–∏—Ü–∞:', !!tableContainer);
        console.log('- Kanban:', !!kanbanBoard);

        if (view === 'list') {
            if (tableContainer) {
                tableContainer.style.display = 'block';
                console.log('[KanbanManager] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
            }
            if (kanbanBoard) {
                kanbanBoard.style.display = 'none';
                console.log('[KanbanManager] ‚úÖ Kanban —Å–∫—Ä—ã—Ç');
            }
        } else if (view === 'kanban') {
            if (tableContainer) {
                tableContainer.style.display = 'none';
                console.log('[KanbanManager] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞');
            }
            if (kanbanBoard) {
                kanbanBoard.style.display = 'block';
                console.log('[KanbanManager] ‚úÖ Kanban –ø–æ–∫–∞–∑–∞–Ω');
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kanban
     */
    async loadKanbanData() {
        console.log('[KanbanManager] üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kanban');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è Kanban –¥–æ—Å–∫–∏ —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            // –£–±–∏—Ä–∞–µ–º exclude_completed=1 —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
            const response = await fetch('/tasks/get-my-tasks-paginated?length=1000&start=0&force_load=1&view=kanban');

            console.log('[KanbanManager] üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            console.log('[KanbanManager] üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

            if (!data.success && data.error) {
                throw new Error(data.error);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ DataTables
            const tasks = data.data || [];

            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è Kanban: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ + "–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ"
            const filteredTasks = tasks.filter(task => {
                const statusId = task.status_id;
                const statusName = task.status_name;

                // –í–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–µ)
                const isActive = !this.isStatusClosed(statusName);

                // –í–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ" (ID: 9)
                const isClarificationRequested = statusId === 9;

                return isActive || isClarificationRequested;
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à
            this.tasksData = filteredTasks;

            console.log('[KanbanManager] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ API:', tasks.length);
            console.log('[KanbanManager] ‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è Kanban:', filteredTasks.length);
            console.log('[KanbanManager] üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', {
                success: data.success,
                draw: data.draw,
                recordsTotal: data.recordsTotal,
                recordsFiltered: data.recordsFiltered,
                dataLength: data.data ? data.data.length : 0
            });

            if (tasks.length > 0) {
                console.log('[KanbanManager] üìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:');
                console.log('–ó–∞–¥–∞—á–∞ 1:', tasks[0]);
                console.log('–ó–∞–¥–∞—á–∞ 2:', tasks[1]);
                console.log('–ó–∞–¥–∞—á–∞ 3:', tasks[2]);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
                const firstTask = tasks[0];
                console.log('[KanbanManager] üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏:');
                console.log('- ID:', firstTask.id);
                console.log('- Subject:', firstTask.subject);
                console.log('- Status:', firstTask.status_name);
                console.log('- Priority:', firstTask.priority_name);
                console.log('- Project:', firstTask.project_name);
                console.log('- Assigned to:', firstTask.assigned_to_name);
            } else {
                console.log('[KanbanManager] ‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }

            // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            await this.createDynamicColumns();

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º Kanban –¥–æ—Å–∫—É —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            this.renderKanbanBoard(filteredTasks);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            this.loadCompletedTasksOnKanbanRender();

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ Kanban –¥–æ—Å–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
     */
    renderKanbanBoard(tasks) {
        console.log('[KanbanManager] üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ Kanban –¥–æ—Å–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏');
        console.log('[KanbanManager] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏:', tasks.length);

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
        const allColumns = document.querySelectorAll('.kanban-column-content');
        allColumns.forEach(column => {
            column.innerHTML = '';
        });

        console.log('[KanbanManager] üìã –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º...');

                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const statusStats = {};
            const statusIdStats = {};
            tasks.forEach(task => {
                const status = task.status_name || '–ù–æ–≤–∞—è';
                const statusId = task.status_id || 'unknown';
                statusStats[status] = (statusStats[status] || 0) + 1;
                statusIdStats[statusId] = (statusIdStats[statusId] || 0) + 1;
            });

            console.log('[KanbanManager] üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏—è):', statusStats);
            console.log('[KanbanManager] üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (ID):', statusIdStats);

                // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞
        tasks.forEach((task, index) => {
            console.log(`[KanbanManager] üìã –ó–∞–¥–∞—á–∞ ${index + 1}: ID=${task.id}, –°—Ç–∞—Ç—É—Å="${task.status_name}", StatusID=${task.status_id}`);

            const status = task.status_name || '–ù–æ–≤–∞—è';
            const statusId = task.status_id || 1; // ID —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∑–∞–¥–∞—á–∏

            console.log(`[KanbanManager] üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞: "${status}" (ID: ${statusId})`);

            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            const columnElement = document.querySelector(`[data-status-id="${statusId}"]`);

            if (columnElement) {
                console.log(`[KanbanManager] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}" (ID: ${statusId})`);

                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏
                this.createTaskCard(task, columnElement);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–æ–Ω–∫–∏
                this.updateColumnCount(columnElement);
            } else {
                console.warn(`[KanbanManager] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}" (ID: ${statusId}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const allColumns = document.querySelectorAll('.kanban-column-content');
                console.log('[KanbanManager] üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:');
                allColumns.forEach(col => {
                    const statusId = col.getAttribute('data-status-id');
                    const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
                    console.log(`  - ID: ${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${columnTitle}`);
                });

                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
                console.log('[KanbanManager] üîç –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞...');
                const columnByTitle = Array.from(allColumns).find(col => {
                    const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
                    return columnTitle && columnTitle.includes(status);
                });

                if (columnByTitle) {
                    console.log(`[KanbanManager] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}"`);
                    this.createTaskCard(task, columnByTitle);
                    this.updateColumnCount(columnByTitle);
                } else {
                    console.error(`[KanbanManager] ‚ùå –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ ID, –Ω–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é`);

                    // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
                    const firstColumn = allColumns[0];
                    if (firstColumn) {
                        console.log(`[KanbanManager] üîÑ Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É`);
                        this.createTaskCard(task, firstColumn);
                        this.updateColumnCount(firstColumn);
                    }
                }
            }
        });

        console.log('[KanbanManager] ‚úÖ Kanban –¥–æ—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        this.validateAndFixColumnStatusMapping();

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        this.fixStatusMismatches();

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        this.monitorNewStatuses();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        this.testStatusMapping();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateKanbanStats(tasks);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Drag & Drop –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        this.initDragAndDrop();

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ"
        this.limitClosedTasks();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
     */
    updateColumnCount(columnElement) {
        const taskCards = columnElement.querySelectorAll('.kanban-card');
        const countElement = columnElement.parentElement.querySelector('.kanban-column-count');

        if (countElement) {
            countElement.textContent = taskCards.length;
        }
    }

        /**
     * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ"
     */
    limitClosedTasks() {
        console.log('[KanbanManager] üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ"...');

        const closedColumn = document.querySelector('[data-status-id="5"]');
        if (closedColumn) {
            const cards = closedColumn.querySelectorAll('.kanban-card');
            console.log(`[KanbanManager] üìä –ù–∞–π–¥–µ–Ω–æ ${cards.length} –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ"`);

            if (cards.length > 5) {
                // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5)
                for (let i = 5; i < cards.length; i++) {
                    cards[i].remove();
                    console.log(`[KanbanManager] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ª–∏—à–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ ${i + 1}`);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                const countElement = closedColumn.parentElement.querySelector('.kanban-column-count');
                if (countElement) {
                    countElement.textContent = '5';
                }

                console.log('[KanbanManager] ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–∫—Ä—ã—Ç–æ" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–æ 5 –∑–∞–¥–∞—á');
            } else if (cards.length < 5) {
                console.log(`[KanbanManager] ‚ö†Ô∏è –í –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ" —Ç–æ–ª—å–∫–æ ${cards.length} –∑–∞–¥–∞—á, –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ`);
                // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                this.loadMoreCompletedTasks();
            }
        } else {
            console.log('[KanbanManager] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–∫—Ä—ã—Ç–æ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    async loadMoreCompletedTasks() {
        console.log('[KanbanManager] üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');

        try {
            const response = await fetch('/tasks/get-completed-tasks?limit=10');
            const data = await response.json();

            if (data.success && data.data.length > 0) {
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
                data.data.sort((a, b) => {
                    const dateA = new Date(a.updated_on);
                    const dateB = new Date(b.updated_on);
                    return dateB - dateA;
                });

                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞—á
                const tasksToAdd = data.data.slice(0, 5);

                const closedColumn = document.querySelector('[data-status-id="5"]');
                if (closedColumn) {
                    tasksToAdd.forEach(task => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∞
                        const existingCard = document.querySelector(`[data-task-id="${task.id}"]`);
                        if (!existingCard) {
                            this.createTaskCard(task, closedColumn);
                        }
                    });

                    this.updateColumnCount(closedColumn);
                    console.log('[KanbanManager] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫—É "–ó–∞–∫—Ä—ã—Ç–æ"');
                }
            }
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
        }
    }

        /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ Kanban
     */
    loadCompletedTasksOnKanbanRender() {
        console.log('[KanbanManager] üîò –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');

        if (!this.completedTasksLoaded) {
            console.log('[KanbanManager] ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            this.loadCompletedTasks();
        } else {
            console.log('[KanbanManager] ‚ö†Ô∏è –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ 5 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    async loadCompletedTasks() {
        console.log('[KanbanManager] üì• –ó–∞–≥—Ä—É–∑–∫–∞ 5 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');

        try {
            const response = await fetch('/tasks/get-completed-tasks');

            console.log('[KanbanManager] üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('[KanbanManager] ‚ùå HTTP –æ—à–∏–±–∫–∞:', errorText);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }

            const data = await response.json();
            console.log('[KanbanManager] üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

            if (!data.success) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
            }

            console.log('[KanbanManager] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', data.data.length);

                        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            data.data.sort((a, b) => {
                const dateA = new Date(a.updated_on);
                const dateB = new Date(b.updated_on);
                return dateB - dateA; // –£–±—ã–≤–∞—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫
            });

            console.log('[KanbanManager] ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            const limitedTasks = data.data.slice(0, 5);
            console.log(`[KanbanManager] üìä –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ ${limitedTasks.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á`);

            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            const closedStatusIds = [5, 6, 7, 14]; // –ó–∞–∫—Ä—ã—Ç–∞, –û—Ç–∫–ª–æ–Ω–µ–Ω–∞, –í—ã–ø–æ–ª–Ω–µ–Ω–∞, –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞
            closedStatusIds.forEach(statusId => {
                const column = document.querySelector(`[data-status-id="${statusId}"]`);
                if (column) {
                    column.innerHTML = '';
                    console.log(`[KanbanManager] ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${statusId} –æ—á–∏—â–µ–Ω–∞`);
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∏—Ö —Å—Ç–∞—Ç—É—Å—É
            limitedTasks.forEach(task => {
                console.log(`[KanbanManager] üìã –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É ${task.id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${task.status_name}" (ID: ${task.status_id})`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const allColumns = document.querySelectorAll('.kanban-column-content');
                console.log('[KanbanManager] üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:');
                allColumns.forEach(col => {
                    const statusId = col.getAttribute('data-status-id');
                    const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
                    console.log(`  - ID: ${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${columnTitle}`);
                });

                // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –ø–æ ID —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
                const targetColumn = document.querySelector(`[data-status-id="${task.status_id}"]`);

                if (targetColumn) {
                    console.log(`[KanbanManager] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${task.status_id}`);
                    this.createTaskCard(task, targetColumn);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–æ–Ω–∫–∏
                    this.updateColumnCount(targetColumn);
                } else {
                    console.warn(`[KanbanManager] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${task.status_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É "–ó–∞–∫—Ä—ã—Ç–∞" –∫–∞–∫ fallback`);

                    // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É "–ó–∞–∫—Ä—ã—Ç–∞"
                    const closedColumn = document.getElementById('status-5-column');
                    if (closedColumn) {
                        const columnContent = closedColumn.querySelector('.kanban-column-content');
                        if (columnContent) {
                            this.createTaskCard(task, columnContent);
                            this.updateColumnCount(columnContent);
                        }
                    }
                }
            });

            this.completedTasksLoaded = true;
            console.log('[KanbanManager] ‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
            this.updateColumnCounts();

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–∫—Ä—ã—Ç–∞" –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞
            const closedTasksCount = data.data.filter(task => task.status_id === 5).length;
            const closedCount = document.getElementById('status-5-count');
            if (closedCount) {
                closedCount.textContent = closedTasksCount;
                console.log('[KanbanManager] üî¢ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∫–æ–ª–æ–Ω–∫–∏ "–ó–∞–∫—Ä—ã—Ç–∞":', closedCount.textContent);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–¥–∞—á
            const totalCount = document.querySelector('.total-tasks-count');
            if (totalCount) {
                const currentTotal = parseInt(totalCount.textContent) || 0;
                const newTotal = currentTotal + data.data.length;
                totalCount.textContent = newTotal;
                console.log('[KanbanManager] üî¢ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫:', newTotal);
            }

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
            this.showKanbanError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${error.message}`);
        }
    }



    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
     */
    createTaskCard(task, columnElement) {
        console.log(`[KanbanManager] üé¥ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}:`, task);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        const existingCard = document.querySelector(`[data-task-id="${task.id}"]`);
        if (existingCard) {
            console.log(`[KanbanManager] ‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–ó–∞–∫—Ä—ã—Ç–æ" (ID: 5)
        const statusId = task.status_id;
        if (statusId === 5) { // –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–∫—Ä—ã—Ç–æ"
            const existingCards = columnElement.querySelectorAll('.kanban-card');
            if (existingCards.length >= 5) {
                console.log(`[KanbanManager] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–∫—Ä—ã—Ç–æ" —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ${existingCards.length} –∑–∞–¥–∞—á, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É ${task.id}`);
                return;
            }
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        const priority = task.priority_name || '–û–±—ã—á–Ω—ã–π';
        console.log(`[KanbanManager] üè∑Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: "${priority}" -> "${this.getPriorityClass(priority)}"`);

        const priorityClass = this.getPriorityClass(priority);

        if (!priority || priority === 'undefined') {
            console.log(`[KanbanManager] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority}" -> priority-normal (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)`);
        }

        // –°–æ–∑–¥–∞–µ–º HTML –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø—Ä–æ—Å—Ç–∞—è –∏ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è)
        const cardHtml = `
            <div class="kanban-card" data-task-id="${task.id}" data-priority="${priorityClass}" draggable="true">
                <div class="kanban-card-header">
                    <div class="kanban-card-id" onclick="event.stopPropagation(); window.open('/tasks/my-tasks/${task.id}', '_blank')" style="cursor: pointer; color: #2563eb;">#${task.id}</div>
                    <div class="kanban-card-priority">
                        <span class="priority-badge ${priorityClass}">${this.escapeHtml(priority)}</span>
                    </div>
                </div>
                <div class="kanban-card-content">
                    <div class="kanban-card-subject">${this.escapeHtml(task.subject || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                    <div class="kanban-card-date">${this.formatDate(task.updated_on)}</div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–ª–æ–Ω–∫—É
        columnElement.insertAdjacentHTML('beforeend', cardHtml);

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
        const newCard = columnElement.lastElementChild;
        if (newCard) {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è onclick –≤ HTML)
            // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–∫—Ä—ã—Ç—å" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ onclick –≤ HTML

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            if (this.boundHandleDragStart && this.boundHandleDragEnd) {
                newCard.addEventListener('dragstart', this.boundHandleDragStart);
                newCard.addEventListener('dragend', this.boundHandleDragEnd);
                console.log(`[KanbanManager] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${task.id}`);
            } else {
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                newCard.addEventListener('dragstart', (e) => {
                    console.log(`üéØ Drag start –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${task.id}`);
                    e.dataTransfer.setData('text/plain', task.id);
                    newCard.style.opacity = '0.5';
                });

                newCard.addEventListener('dragend', (e) => {
                    console.log(`‚úÖ Drag end –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${task.id}`);
                    newCard.style.opacity = '1';
                });

                            console.log(`[KanbanManager] ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${task.id}`);
        }

        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–æ–Ω —Å–±—Ä–æ—Å–∞, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        const dropZones = document.querySelectorAll('.kanban-column-content');
        dropZones.forEach((zone, index) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const hasDropHandler = zone._hasDropHandler;
            if (!hasDropHandler) {
                zone.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    zone.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';
                });

                zone.addEventListener('drop', (e) => {
                    e.preventDefault();
                    const taskId = e.dataTransfer.getData('text/plain');
                    const statusId = zone.getAttribute('data-status-id');
                    console.log(`üéØ Drop –∑–∞–¥–∞—á–∏ ${taskId} –≤ –∑–æ–Ω—É ${index + 1} (—Å—Ç–∞—Ç—É—Å: ${statusId})`);
                    zone.style.backgroundColor = '';

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                    if (window.kanbanManager && window.kanbanManager.updateTaskStatus) {
                        window.kanbanManager.updateTaskStatus(taskId, statusId);
                    }
                });

                zone.addEventListener('dragenter', (e) => {
                    e.preventDefault();
                    zone.style.backgroundColor = 'rgba(59, 130, 246, 0.2)';
                });

                zone.addEventListener('dragleave', (e) => {
                    e.preventDefault();
                    zone.style.backgroundColor = '';
                });

                zone._hasDropHandler = true;
                console.log(`[KanbanManager] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drop –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–æ–Ω—ã ${index + 1}`);
            }
        });
    }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getPriorityClass(priority) {
        if (!priority) return 'priority-normal';

        const priorityLower = priority.toLowerCase();
        console.log(`[KanbanManager] üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: "${priority}" -> "${priorityLower}"`);

        // –í—ã—Å–æ–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–∫—Ä–∞—Å–Ω—ã–π)
        if (priorityLower.includes('—Å—Ä–æ—á–Ω—ã–π') || priorityLower.includes('urgent') || priorityLower.includes('–≤—ã—Å–æ–∫–∏–π') || priorityLower.includes('high') || priorityLower.includes('–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π')) {
            console.log(`[KanbanManager] üî¥ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority}" -> priority-high (–∫—Ä–∞—Å–Ω—ã–π)`);
            return 'priority-high';
        }
        // –ù–∏–∑–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–∑–µ–ª–µ–Ω—ã–π)
        else if (priorityLower.includes('–Ω–∏–∑–∫–∏–π') || priorityLower.includes('low')) {
            console.log(`[KanbanManager] üü¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority}" -> priority-low (–∑–µ–ª–µ–Ω—ã–π)`);
            return 'priority-low';
        }
        // –û–±—ã—á–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (—Å–∏–Ω–∏–π)
        else {
            console.log(`[KanbanManager] üîµ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority}" -> priority-normal (—Å–∏–Ω–∏–π)`);
            return 'priority-normal';
        }
    }

    openTaskDetails(taskId) {
        console.log('[KanbanManager] üîó –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏:', taskId);
        window.location.href = `/tasks/my-tasks/${taskId}`;
    }

    showKanbanLoading() {
        const kanbanBoard = document.getElementById('kanban-board');
        if (kanbanBoard) {
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'kanban-loading';
            loadingDiv.innerHTML = `
                <div class="loading-content">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>–ó–∞–≥—Ä—É–∑–∫–∞ Kanban –¥–æ—Å–∫–∏...</span>
                </div>
            `;
            kanbanBoard.appendChild(loadingDiv);
        }
    }

    hideKanbanLoading() {
        const loadingDiv = document.querySelector('.kanban-loading');
        if (loadingDiv) {
            loadingDiv.remove();
        }
    }

    showKanbanError(message) {
        const kanbanBoard = document.getElementById('kanban-board');
        if (kanbanBoard) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'kanban-error';
            errorDiv.innerHTML = `
                <div class="error-content">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>${message}</span>
                    <button onclick="window.loadKanbanData()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
            kanbanBoard.appendChild(errorDiv);
        }
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        if (!dateString) return '';

        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return '';

            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        } catch (error) {
            return '';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞:', message);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ UI
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
     */
    updateColumnCounts(distribution) {
        console.log('[KanbanManager] üî¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫:', distribution);

        Object.entries(distribution).forEach(([columnId, count]) => {
            const countElement = document.getElementById(columnId);
            if (countElement) {
                countElement.textContent = count;
                console.log(`[KanbanManager] ‚úÖ –°—á–µ—Ç—á–∏–∫ ${columnId}: ${count}`);
            } else {
                console.error(`[KanbanManager] ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ ${columnId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        const totalCount = Object.values(distribution).reduce((sum, count) => sum + count, 0);
        const totalElement = document.getElementById('kanban-total-count');
        if (totalElement) {
            totalElement.textContent = totalCount;
            console.log(`[KanbanManager] ‚úÖ –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫: ${totalCount}`);
        }
    }

            /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤ Redmine
     */
    async createDynamicColumns() {
        console.log('[KanbanManager] üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫');

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Redmine
            console.log('[KanbanManager] üì° –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ –∫ /tasks/get-my-tasks-statuses');
            const response = await fetch('/tasks/get-my-tasks-statuses');

            console.log('[KanbanManager] üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('[KanbanManager] ‚ùå HTTP –æ—à–∏–±–∫–∞:', errorText);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }

            const statuses = await response.json();
            console.log('[KanbanManager] üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:', statuses);

            if (!statuses.success) {
                throw new Error(statuses.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã');
            }

            console.log('[KanbanManager] üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:', statuses.data);

            // –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            const kanbanColumns = document.getElementById('kanban-columns');
            if (!kanbanColumns) {
                throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–ª–æ–Ω–æ–∫ Kanban –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            kanbanColumns.innerHTML = '';

            console.log('[KanbanManager] üèóÔ∏è –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤:');
            statuses.data.forEach(status => {
                console.log(`  - ID: ${status.id}, Name: "${status.name}", is_closed: ${status.is_closed}`);
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç—É—Å "–ó–∞–∫—Ä—ã—Ç–∞" –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const closedStatus = statuses.data.find(s => s.name === '–ó–∞–∫—Ä—ã—Ç–∞');
            if (closedStatus) {
                console.log(`[KanbanManager] ‚úÖ –°—Ç–∞—Ç—É—Å "–ó–∞–∫—Ä—ã—Ç–∞" –Ω–∞–π–¥–µ–Ω: ID=${closedStatus.id}, is_closed=${closedStatus.is_closed}`);
            } else {
                console.warn('[KanbanManager] ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å "–ó–∞–∫—Ä—ã—Ç–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
                console.log('[KanbanManager] üìã –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:');
                statuses.data.forEach(s => console.log(`  - "${s.name}" (ID: ${s.id})`));
            }

            // –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            statuses.data.forEach((status, index) => {
                console.log(`[KanbanManager] üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏: ID=${status.id}, Name="${status.name}"`);

                const columnHtml = `
                    <div class="kanban-column" id="status-${status.id}-column">
                        <div class="kanban-column-header" onclick="this.closest('.kanban-column').classList.toggle('collapsed')">
                            <div class="kanban-column-title">
                                <i class="fas fa-circle" style="color: ${this.getStatusColor(status.name)}"></i>
                                ${status.name}
                            </div>
                            <div class="kanban-column-count" id="status-${status.id}-count">0</div>
                            <div class="kanban-column-toggle">
                                <i class="fas fa-chevron-down"></i>
                            </div>
                        </div>
                        <div class="kanban-column-content" data-status-id="${status.id}">
                            <!-- –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—é–¥–∞ -->
                        </div>
                    </div>
                `;

                kanbanColumns.insertAdjacentHTML('beforeend', columnHtml);
                console.log(`[KanbanManager] ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: data-status-id="${status.id}"`);
            });

            console.log('[KanbanManager] ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫:', error);

            // –°–æ–∑–¥–∞—ë–º fallback –∫–æ–ª–æ–Ω–∫–∏
            console.log('[KanbanManager] üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –∫–æ–ª–æ–Ω–æ–∫');
            this.createFallbackColumns();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ fallback –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
     */
    createFallbackColumns() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ API
        const fallbackStatuses = [
            {id: 1, name: '–ù–æ–≤–∞—è', is_closed: false},
            {id: 2, name: '–í —Ä–∞–±–æ—Ç–µ', is_closed: false},
            {id: 5, name: '–ó–∞–∫—Ä—ã—Ç–∞', is_closed: true},
            {id: 6, name: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞', is_closed: true},
            {id: 7, name: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', is_closed: true},
            {id: 9, name: '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ', is_closed: false},
            {id: 10, name: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', is_closed: false},
            {id: 13, name: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞', is_closed: false},
            {id: 14, name: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞', is_closed: true},
            {id: 15, name: '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', is_closed: false},
            {id: 16, name: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞', is_closed: false},
            {id: 17, name: '–û—Ç–∫—Ä—ã—Ç–∞', is_closed: false},
            {id: 18, name: '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', is_closed: false},
            {id: 19, name: '–í –æ—á–µ—Ä–µ–¥–∏', is_closed: false}
        ];

        const kanbanColumns = document.getElementById('kanban-columns');
        if (!kanbanColumns) {
            console.error('[KanbanManager] ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        kanbanColumns.innerHTML = '';

        // –°–æ–∑–¥–∞—ë–º fallback –∫–æ–ª–æ–Ω–∫–∏
        fallbackStatuses.forEach((status, index) => {
            const columnHtml = `
                <div class="kanban-column" id="status-${status.id}-column">
                    <div class="kanban-column-header" onclick="this.closest('.kanban-column').classList.toggle('collapsed')">
                        <div class="kanban-column-title">
                            <i class="fas fa-circle" style="color: ${this.getStatusColor(status.name)}"></i>
                            ${status.name}
                        </div>
                        <div class="kanban-column-count" id="status-${status.id}-count">0</div>
                        <div class="kanban-column-toggle">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    <div class="kanban-column-content" data-status-id="${status.id}">
                        <!-- –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—é–¥–∞ -->
                    </div>
                </div>
            `;

            kanbanColumns.insertAdjacentHTML('beforeend', columnHtml);
        });

        console.log('[KanbanManager] ‚úÖ Fallback –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
    }

            /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusColor(statusName) {
        const statusColors = {
            '–ù–æ–≤–∞—è': '#3498db',
            '–í —Ä–∞–±–æ—Ç–µ': '#f39c12',
            '–ó–∞–∫—Ä—ã—Ç–∞': '#27ae60',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞': '#95a5a6',
            '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': '#2ecc71',
            '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ': '#e67e22',
            '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞': '#f39c12',
            '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞': '#9b59b6',
            '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞': '#e74c3c',
            '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏': '#f39c12',
            '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞': '#34495e',
            '–û—Ç–∫—Ä—ã—Ç–∞': '#3498db',
            '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏': '#9b59b6',
            '–í –æ—á–µ—Ä–µ–¥–∏': '#95a5a6'
        };

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!statusColors[statusName]) {
            console.log(`[KanbanManager] üé® –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å "${statusName}" - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç`);

            // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞
            let hash = 0;
            for (let i = 0; i < statusName.length; i++) {
                hash = statusName.charCodeAt(i) + ((hash << 5) - hash);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞
            const hue = Math.abs(hash) % 360;
            const saturation = 70 + (Math.abs(hash) % 30); // 70-100%
            const lightness = 45 + (Math.abs(hash) % 20); // 45-65%

            const color = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
            console.log(`[KanbanManager] üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ü–≤–µ—Ç –¥–ª—è "${statusName}": ${color}`);

            return color;
        }

        return statusColors[statusName];
    }

        /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç—ã–º
     */
    isStatusClosed(statusName) {
        const closedStatuses = [
            '–ó–∞–∫—Ä—ã—Ç–∞',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞'
        ];

        return closedStatuses.includes(statusName);
    }

        /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
     */
    updateTaskInCache(taskId, newStatusId, newStatusName) {
        console.log(`[KanbanManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}: —Å—Ç–∞—Ç—É—Å ${newStatusId} (${newStatusName})`);

        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
        const taskIndex = this.tasksData.findIndex(task => task.id == taskId);
        if (taskIndex !== -1) {
            this.tasksData[taskIndex].status_id = parseInt(newStatusId);
            this.tasksData[taskIndex].status_name = newStatusName;
            console.log(`[KanbanManager] ‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫—ç—à–µ`);
        } else {
            console.warn(`[KanbanManager] ‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
     */
    validateAndFixColumnStatusMapping() {
        console.log('[KanbanManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤...');

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_statuses
        const correctStatusMapping = {
            1: '–ù–æ–≤–∞—è',
            2: '–í —Ä–∞–±–æ—Ç–µ',
            5: '–ó–∞–∫—Ä—ã—Ç–∞',
            6: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            7: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            9: '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
            10: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
            13: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞',
            14: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞',
            15: '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            16: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞',
            17: '–û—Ç–∫—Ä—ã—Ç–∞',
            18: '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
            19: '–í –æ—á–µ—Ä–µ–¥–∏'
        };

        const allColumns = document.querySelectorAll('.kanban-column-content');
        const columnStatusMap = {};

        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        allColumns.forEach(col => {
            const statusId = col.getAttribute('data-status-id');
            const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            if (statusId && columnTitle) {
                columnStatusMap[statusId] = columnTitle;
            }
        });

        console.log('[KanbanManager] üìã –ö–∞—Ä—Ç–∞ –∫–æ–ª–æ–Ω–æ–∫:', columnStatusMap);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º
        Object.keys(columnStatusMap).forEach(statusId => {
            const columnTitle = columnStatusMap[statusId];
            const correctStatusName = correctStatusMapping[statusId];

            if (correctStatusName && !columnTitle.includes(correctStatusName)) {
                console.warn(`[KanbanManager] ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–∫–∏: ID ${statusId} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "${correctStatusName}", –Ω–æ –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "${columnTitle}"`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ
        if (this.tasksData && this.tasksData.length > 0) {
            console.log('[KanbanManager] üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –≤ –∫—ç—à–µ...');
            this.tasksData.forEach(task => {
                const taskStatusId = task.status_id;
                const taskStatusName = task.status_name;
                const expectedColumnTitle = columnStatusMap[taskStatusId];
                const correctStatusName = correctStatusMapping[taskStatusId];

                if (expectedColumnTitle && !expectedColumnTitle.includes(taskStatusName)) {
                    console.warn(`[KanbanManager] ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –∑–∞–¥–∞—á–∞ ${task.id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "${taskStatusName}" (ID: ${taskStatusId}), –Ω–æ –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "${expectedColumnTitle}"`);
                }

                if (correctStatusName && taskStatusName !== correctStatusName) {
                    console.warn(`[KanbanManager] ‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: –∑–∞–¥–∞—á–∞ ${task.id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "${taskStatusName}" (ID: ${taskStatusId}), –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "${correctStatusName}"`);
                }
            });
        }

        return columnStatusMap;
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    monitorNewStatuses() {
        console.log('[KanbanManager] üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤...');

        if (!this.tasksData || this.tasksData.length === 0) {
            return;
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –∑–∞–¥–∞—á
        const statusSet = new Set();
        this.tasksData.forEach(task => {
            if (task.status_name) {
                statusSet.add(`${task.status_id}: ${task.status_name}`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        const knownStatuses = new Set([
            '1: –ù–æ–≤–∞—è',
            '2: –í —Ä–∞–±–æ—Ç–µ',
            '5: –ó–∞–∫—Ä—ã—Ç–∞',
            '6: –û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            '7: –í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            '9: –ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
            '10: –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
            '13: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞',
            '14: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞',
            '15: –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            '16: –ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞',
            '17: –û—Ç–∫—Ä—ã—Ç–∞',
            '18: –ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
            '19: –í –æ—á–µ—Ä–µ–¥–∏'
        ]);

        const newStatuses = [];
        statusSet.forEach(status => {
            if (!knownStatuses.has(status)) {
                newStatuses.push(status);
            }
        });

        if (newStatuses.length > 0) {
            console.warn('[KanbanManager] üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã:', newStatuses);
            console.warn('[KanbanManager] üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å fallback –∫–æ–ª–æ–Ω–∫–∏ –∏ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.showNotification(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${newStatuses.join(', ')}`, 'info');
        } else {
            console.log('[KanbanManager] ‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑–≤–µ—Å—Ç–Ω—ã');
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    fixStatusMismatches() {
        console.log('[KanbanManager] üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤...');

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_statuses
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏–∑ API
        const correctStatusMapping = {
            1: '–ù–æ–≤–∞—è',
            2: '–í —Ä–∞–±–æ—Ç–µ',
            5: '–ó–∞–∫—Ä—ã—Ç–∞',
            6: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            7: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            9: '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
            10: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
            13: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞',
            14: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞',
            15: '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            16: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞',
            17: '–û—Ç–∫—Ä—ã—Ç–∞',
            18: '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
            19: '–í –æ—á–µ—Ä–µ–¥–∏'
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –∫—ç—à–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ mapping
        if (this.tasksData && this.tasksData.length > 0) {
            const newStatuses = new Set();
            this.tasksData.forEach(task => {
                if (!correctStatusMapping[task.status_id]) {
                    newStatuses.add(`${task.status_id}: ${task.status_name}`);
                }
            });

            if (newStatuses.size > 0) {
                console.warn('[KanbanManager] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã:', Array.from(newStatuses));
                console.warn('[KanbanManager] ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å correctStatusMapping');
            }
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ
        if (this.tasksData && this.tasksData.length > 0) {
            let fixedCount = 0;
            this.tasksData.forEach(task => {
                const taskStatusId = task.status_id;
                const correctStatusName = correctStatusMapping[taskStatusId];

                if (correctStatusName && task.status_name !== correctStatusName) {
                    console.log(`[KanbanManager] üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ${task.id}: "${task.status_name}" -> "${correctStatusName}"`);
                    task.status_name = correctStatusName;
                    fixedCount++;
                }
            });

            if (fixedCount > 0) {
                console.log(`[KanbanManager] ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤`);
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                this.renderKanbanBoard(this.tasksData);
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ Kanban –¥–æ—Å–∫–∏
     */
    updateKanbanStats(tasks) {
        console.log('[KanbanManager] üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ Kanban');

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–µ)
        const activeTasks = tasks.filter(task => !this.isStatusClosed(task.status_name));

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date();
        const todayStr = today.toISOString().split('T')[0];
        const completedToday = tasks.filter(task => {
            if (!this.isStatusClosed(task.status_name)) return false;
            const updatedDate = new Date(task.updated_on);
            const updatedStr = updatedDate.toISOString().split('T')[0];
            return updatedStr === todayStr;
        });

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Å due_date –≤ –ø—Ä–æ—à–ª–æ–º)
        const overdueTasks = tasks.filter(task => {
            if (!task.due_date) return false;
            const dueDate = new Date(task.due_date);
            const now = new Date();
            return dueDate < now && !this.isStatusClosed(task.status_name);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const activeCountElement = document.getElementById('kanban-active-count');
        const completedTodayElement = document.getElementById('kanban-completed-today');
        const overdueCountElement = document.getElementById('kanban-overdue-count');

        if (activeCountElement) {
            activeCountElement.textContent = activeTasks.length;
        }
        if (completedTodayElement) {
            completedTodayElement.textContent = completedToday.length;
        }
        if (overdueCountElement) {
            overdueCountElement.textContent = overdueTasks.length;
        }

        console.log('[KanbanManager] ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
            active: activeTasks.length,
            completedToday: completedToday.length,
            overdue: overdueTasks.length
        });
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    testStatusMapping() {
        console.log('[KanbanManager] üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
        const allColumns = document.querySelectorAll('.kanban-column-content');
        console.log('[KanbanManager] üìã –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏:');
        allColumns.forEach((col, index) => {
            const statusId = col.getAttribute('data-status-id');
            const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            console.log(`  ${index + 1}. ID: ${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${columnTitle}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ
        if (this.tasksData && this.tasksData.length > 0) {
            console.log('[KanbanManager] üìã –ó–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ:');
            this.tasksData.forEach((task, index) => {
                console.log(`  ${index + 1}. ID: ${task.id}, –°—Ç–∞—Ç—É—Å: "${task.status_name}" (ID: ${task.status_id})`);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        console.log('[KanbanManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:');
        if (this.tasksData) {
            this.tasksData.forEach(task => {
                const targetColumn = document.querySelector(`[data-status-id="${task.status_id}"]`);
                const columnTitle = targetColumn?.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();

                if (targetColumn) {
                    console.log(`  ‚úÖ –ó–∞–¥–∞—á–∞ ${task.id}: "${task.status_name}" -> "${columnTitle}"`);
                } else {
                    console.log(`  ‚ùå –ó–∞–¥–∞—á–∞ ${task.id}: "${task.status_name}" -> –ö–û–õ–û–ù–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê`);
                }
            });
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
    refreshData() {
        console.log('[KanbanManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Kanban');
        this.loadKanbanData();
    }

    applyFilters(filters) {
        this.filters = { ...this.filters, ...filters };
        if (this.currentView === 'kanban') {
            this.loadKanbanData();
        }
    }

        /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drag & Drop
     */
    initDragAndDrop() {
        console.log('[KanbanManager] üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drag & Drop');

        try {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á
            const taskCards = document.querySelectorAll('.kanban-card');
            const dropZones = document.querySelectorAll('.kanban-column-content');

            console.log(`[KanbanManager] üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${taskCards.length}, –∑–æ–Ω —Å–±—Ä–æ—Å–∞: ${dropZones.length}`);

            if (taskCards.length === 0) {
                console.warn('[KanbanManager] ‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            if (dropZones.length === 0) {
                console.warn('[KanbanManager] ‚ö†Ô∏è –ó–æ–Ω—ã —Å–±—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.boundHandleDragStart = this.handleDragStart.bind(this);
            this.boundHandleDragEnd = this.handleDragEnd.bind(this);
            this.boundHandleDragOver = this.handleDragOver.bind(this);
            this.boundHandleDrop = this.handleDrop.bind(this);
            this.boundHandleDragEnter = this.handleDragEnter.bind(this);
            this.boundHandleDragLeave = this.handleDragLeave.bind(this);

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
            taskCards.forEach(card => {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                card.removeEventListener('dragstart', this.boundHandleDragStart);
                card.removeEventListener('dragend', this.boundHandleDragEnd);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º draggable –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                card.setAttribute('draggable', true);
                card.addEventListener('dragstart', this.boundHandleDragStart);
                card.addEventListener('dragend', this.boundHandleDragEnd);

                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                card.title = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞';
            });

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–æ–Ω —Å–±—Ä–æ—Å–∞
            dropZones.forEach(zone => {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                zone.removeEventListener('dragover', this.boundHandleDragOver);
                zone.removeEventListener('drop', this.boundHandleDrop);
                zone.removeEventListener('dragenter', this.boundHandleDragEnter);
                zone.removeEventListener('dragleave', this.boundHandleDragLeave);

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                zone.addEventListener('dragover', this.boundHandleDragOver);
                zone.addEventListener('drop', this.boundHandleDrop);
                zone.addEventListener('dragenter', this.boundHandleDragEnter);
                zone.addEventListener('dragleave', this.boundHandleDragLeave);

                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                zone.title = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∑–∞–¥–∞—á—É —Å—é–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞';
            });

            console.log('[KanbanManager] ‚úÖ Drag & Drop –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.showNotification('Drag & Drop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'info');

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Drag & Drop:', error);
            this.showErrorMessage('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Drag & Drop');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
        handleDragStart(event) {
        console.log('[KanbanManager] üéØ handleDragStart –≤—ã–∑–≤–∞–Ω');
        console.log('[KanbanManager] üìã event.target:', event.target);
        console.log('[KanbanManager] üìã event.target.tagName:', event.target.tagName);
        console.log('[KanbanManager] üìã event.target.className:', event.target.className);

        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å data-task-id (–∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏)
        const taskCard = event.target.closest('[data-task-id]');
        console.log('[KanbanManager] üìã taskCard –Ω–∞–π–¥–µ–Ω:', taskCard);

        const taskId = taskCard ? taskCard.getAttribute('data-task-id') : null;
        console.log('[KanbanManager] üìã taskId:', taskId);

        if (!taskId) {
            console.error('[KanbanManager] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è');
            console.error('[KanbanManager] üìã event.target:', event.target);
            console.error('[KanbanManager] üìã event.target.closest("[data-task-id]"):', event.target.closest('[data-task-id]'));
            event.preventDefault();
            return;
        }

        const taskTitle = taskCard.querySelector('.kanban-card-subject')?.textContent || `–ó–∞–¥–∞—á–∞ #${taskId}`;

        console.log('[KanbanManager] üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dataTransfer...');
        event.dataTransfer.setData('text/plain', taskId);
        event.dataTransfer.setData('text/html', taskTitle);
        event.dataTransfer.effectAllowed = 'move';

        taskCard.classList.add('dragging');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showNotification(`–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ: ${taskTitle}`, 'info');

        console.log(`[KanbanManager] üéØ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ #${taskId}: ${taskTitle}`);
        console.log(`[KanbanManager] üìã DataTransfer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: text/plain = "${taskId}"`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragEnd(event) {
        event.target.classList.remove('dragging');
        console.log('[KanbanManager] ‚úÖ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞–¥ –∑–æ–Ω–æ–π
     */
    handleDragOver(event) {
        event.preventDefault();
        event.currentTarget.classList.add('drag-over');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∑–æ–Ω—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragEnter(event) {
        event.currentTarget.classList.add('drag-over');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–æ–Ω—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragLeave(event) {
        event.currentTarget.classList.remove('drag-over');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–¥–∞—á–∏
     */
    async handleDrop(event) {
        console.log('[KanbanManager] üéØ handleDrop –≤—ã–∑–≤–∞–Ω');
        console.log('[KanbanManager] üìã event.dataTransfer:', event.dataTransfer);
        console.log('[KanbanManager] üìã event.dataTransfer.types:', event.dataTransfer.types);

        event.preventDefault();
        const dropZone = event.currentTarget;
        const taskId = event.dataTransfer.getData('text/plain');
        const newStatusId = dropZone.getAttribute('data-status-id');

        console.log('[KanbanManager] üìã taskId –∏–∑ dataTransfer:', taskId);
        console.log('[KanbanManager] üìã newStatusId –∏–∑ dropZone:', newStatusId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!taskId) {
            console.error('[KanbanManager] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–¥–∞—á–∏ –∏–∑ dataTransfer');
            console.error('[KanbanManager] üìã event.dataTransfer.types:', event.dataTransfer.types);
            console.error('[KanbanManager] üìã –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å text/html:', event.dataTransfer.getData('text/html'));
            this.showErrorMessage('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
            return;
        }

        if (!newStatusId) {
            console.error('[KanbanManager] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ dropZone');
            this.showErrorMessage('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏
        const columnTitle = dropZone.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';

        console.log(`[KanbanManager] üéØ –°–±—Ä–æ—Å –∑–∞–¥–∞—á–∏ #${taskId} –≤ —Å—Ç–∞—Ç—É—Å ${newStatusId} (${columnTitle})`);
        console.log(`[KanbanManager] üìã DataTransfer –ø–æ–ª—É—á–µ–Ω: text/plain = "${taskId}"`);

        // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        dropZone.classList.remove('drag-over');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const taskCard = document.querySelector(`[data-task-id="${taskId}"]`);
        if (taskCard) {
            taskCard.classList.add('updating');
            this.showUpdateIndicator(taskCard);
        }

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Redmine
            const success = await this.updateTaskStatus(taskId, newStatusId);

            if (success) {
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                if (taskCard) {
                    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                    const targetColumn = document.querySelector(`[data-status-id="${newStatusId}"]`);

                    if (targetColumn) {
                        console.log(`[KanbanManager] üéØ –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${newStatusId}`);

                                                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                        taskCard.setAttribute('data-status-id', newStatusId);
                        taskCard.setAttribute('data-status-name', columnTitle);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
                        const statusElement = taskCard.querySelector('.task-status');
                        if (statusElement) {
                            statusElement.textContent = columnTitle;
                            statusElement.className = `task-status status-${newStatusId}`;
                        }

                        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
                        this.moveCardWithAnimation(taskCard, targetColumn);

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
                        this.updateColumnCounts();

                        this.showSuccessMessage(`–ó–∞–¥–∞—á–∞ #${taskId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "${columnTitle}"`);
                        console.log(`[KanbanManager] ‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å ${newStatusId} (${columnTitle})`);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
                        this.updateTaskInCache(taskId, newStatusId, columnTitle);
                    } else {
                        console.warn(`[KanbanManager] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${newStatusId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ dropZone –∫–∞–∫ fallback
                        this.moveCardWithAnimation(taskCard, dropZone);
                        this.updateColumnCounts();
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
                    this.updateColumnCounts();

                    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —Å—Ç–∞—Ç—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    const closedStatusIds = [5, 6, 7, 14]; // ID –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: –ó–∞–∫—Ä—ã—Ç–∞, –û—Ç–∫–ª–æ–Ω–µ–Ω–∞, –í—ã–ø–æ–ª–Ω–µ–Ω–∞, –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞
                    if (closedStatusIds.includes(parseInt(newStatusId))) {
                        console.log(`[KanbanManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —Å—Ç–∞—Ç—É—Å ${newStatusId}`);
                        setTimeout(() => {
                            this.loadCompletedTasks();
                        }, 1000);
                    }
                }
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                this.showErrorMessage(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #${taskId}`);
                console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #${taskId}`);
            }
        } catch (error) {
            this.showErrorMessage(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #${taskId}`);
            console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:`, error);
        } finally {
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (taskCard) {
                taskCard.classList.remove('updating');
                this.hideUpdateIndicator(taskCard);
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Redmine
     */
    async updateTaskStatus(taskId, newStatusId) {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...', 'info');

            const response = await fetch(`/tasks/api/task/${taskId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify({
                    status_id: newStatusId
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();

            if (result.success) {
                console.log(`[KanbanManager] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #${taskId} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ Redmine`);
                return true;
            } else {
                console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${result.error}`);
                return false;
            }
        } catch (error) {
            console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:`, error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
     */
    getCSRFToken() {
        const token = document.querySelector('meta[name="csrf-token"]');
        return token ? token.getAttribute('content') : '';
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    moveCardWithAnimation(card, targetZone) {
        console.log(`[KanbanManager] üéØ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∑–æ–Ω—É:`, targetZone);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        const originalTransition = card.style.transition;
        const originalTransform = card.style.transform;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        card.style.transition = 'all 0.3s ease';
        card.style.transform = 'scale(1.05)';
        card.style.opacity = '0.8';

        setTimeout(() => {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            targetZone.appendChild(card);

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            card.style.transform = 'scale(1)';
            card.style.opacity = '1';

            setTimeout(() => {
                card.style.transition = originalTransition;
                card.style.transform = originalTransform;
            }, 300);

            console.log(`[KanbanManager] ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É`);
        }, 150);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    showUpdateIndicator(card) {
        const indicator = document.createElement('div');
        indicator.className = 'update-indicator';
        indicator.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        card.appendChild(indicator);
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    hideUpdateIndicator(card) {
        const indicator = card.querySelector('.update-indicator');
        if (indicator) {
            indicator.remove();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccessMessage(message) {
        this.showNotification(message, 'success');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showErrorMessage(message) {
        this.showNotification(message, 'error');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `kanban-notification ${type}`;
        notification.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
            <span>${message}</span>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let container = document.querySelector('.kanban-notifications');
        if (!container) {
            container = document.createElement('div');
            container.className = 'kanban-notifications';
            document.body.appendChild(container);
        }

        container.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.classList.add('fade-out');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
     */
    updateColumnCounts() {
        const columns = document.querySelectorAll('.kanban-column');

        columns.forEach(column => {
            const countElement = column.querySelector('.kanban-column-count');
            const taskCards = column.querySelectorAll('.kanban-card');

            if (countElement) {
                countElement.textContent = taskCards.length;
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initKanbanManager() {
    console.log('[KanbanManager] üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DOM –≥–æ—Ç–æ–≤
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log('[KanbanManager] üìÑ DOM –≥–æ—Ç–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
            window.kanbanManager = new KanbanManager();
        });
    } else {
        console.log('[KanbanManager] üìÑ DOM —É–∂–µ –≥–æ—Ç–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É...');
        window.kanbanManager = new KanbanManager();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    window.loadKanbanData = function() {
        if (window.kanbanManager) {
            window.kanbanManager.loadKanbanData();
        } else {
            console.error('[KanbanManager] ‚ùå KanbanManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    };

    window.loadCompletedTasks = function() {
        if (window.kanbanManager) {
            window.kanbanManager.loadCompletedTasks();
        } else {
            console.error('[KanbanManager] ‚ùå KanbanManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.testKanbanStatuses = function() {
        if (window.kanbanManager) {
            window.kanbanManager.testStatusMapping();
        } else {
            console.error('KanbanManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    };

    window.debugKanbanColumns = function() {
        const allColumns = document.querySelectorAll('.kanban-column-content');
        console.log('üîç –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ Kanban:');
        allColumns.forEach((col, index) => {
            const statusId = col.getAttribute('data-status-id');
            const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            console.log(`  ${index + 1}. ID: ${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${columnTitle}"`);
        });
    };

    window.debugKanbanCards = function() {
        const allCards = document.querySelectorAll('.kanban-card');
        console.log('üé¥ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á:');
        allCards.forEach((card, index) => {
            const taskId = card.getAttribute('data-task-id');
            const priority = card.getAttribute('data-priority');
            const subject = card.querySelector('.kanban-card-subject')?.textContent?.trim();
            console.log(`  ${index + 1}. ID: ${taskId}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${subject}"`);
        });
    };

        window.testDragAndDrop = function() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Drag & Drop...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        const allCards = document.querySelectorAll('.kanban-card');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${allCards.length}`);

        allCards.forEach((card, index) => {
            const taskId = card.getAttribute('data-task-id');
            const draggable = card.getAttribute('draggable');
            console.log(`  –ö–∞—Ä—Ç–æ—á–∫–∞ ${index + 1}: ID=${taskId}, draggable=${draggable}`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã —Å–±—Ä–æ—Å–∞
        const allDropZones = document.querySelectorAll('.kanban-column-content');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω —Å–±—Ä–æ—Å–∞: ${allDropZones.length}`);

        allDropZones.forEach((zone, index) => {
            const statusId = zone.getAttribute('data-status-id');
            const columnTitle = zone.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            console.log(`  –ó–æ–Ω–∞ ${index + 1}: statusId=${statusId}, –Ω–∞–∑–≤–∞–Ω–∏–µ="${columnTitle}"`);
        });
    };

    window.testDragStart = function() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dragstart —Å–æ–±—ã—Ç–∏—è...');

        const firstCard = document.querySelector('.kanban-card');
        if (firstCard) {
            console.log('üìã –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ dragstart –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏');
            const dragEvent = new DragEvent('dragstart', {
                bubbles: true,
                cancelable: true,
                dataTransfer: new DataTransfer()
            });
            firstCard.dispatchEvent(dragEvent);
        } else {
            console.error('‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    };

        window.testDragEvent = function() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ drag —Å–æ–±—ã—Ç–∏—è...');

        const firstCard = document.querySelector('.kanban-card');
        const firstZone = document.querySelector('.kanban-column-content');

        if (firstCard && firstZone) {
            console.log('üìã –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ drop');
            const dropEvent = new DragEvent('drop', {
                bubbles: true,
                cancelable: true,
                dataTransfer: new DataTransfer()
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ dataTransfer
            dropEvent.dataTransfer.setData('text/plain', firstCard.getAttribute('data-task-id'));

            firstZone.dispatchEvent(dropEvent);
        } else {
            console.error('‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ –∑–æ–Ω—ã —Å–±—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    };

            window.testAccordion = function() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫...');

        const allColumns = document.querySelectorAll('.kanban-column');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: ${allColumns.length}`);

        allColumns.forEach((column, index) => {
            const isCollapsed = column.classList.contains('collapsed');
            const title = column.querySelector('.kanban-column-title')?.textContent?.trim();
            console.log(`  –ö–æ–ª–æ–Ω–∫–∞ ${index + 1}: "${title}", collapsed=${isCollapsed}`);
        });

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        const firstColumn = allColumns[0];
        if (firstColumn) {
            console.log('üìã –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É');
            firstColumn.classList.toggle('collapsed');
        }
    };

        window.debugTaskStatus = function() {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –∏ –∫–æ–ª–æ–Ω–æ–∫...');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
        const allColumns = document.querySelectorAll('.kanban-column-content');
        console.log('üìã –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏:');
        allColumns.forEach((col, index) => {
            const statusId = col.getAttribute('data-status-id');
            const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            const taskCount = col.querySelectorAll('.kanban-card').length;
            console.log(`  ${index + 1}. ID=${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ="${columnTitle}", –ó–∞–¥–∞—á=${taskCount}`);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        const allTasks = document.querySelectorAll('.kanban-card');
        console.log('üìã –í—Å–µ –∑–∞–¥–∞—á–∏:');
        allTasks.forEach((task, index) => {
            const taskId = task.getAttribute('data-task-id');
            const priority = task.getAttribute('data-priority');
            const column = task.closest('.kanban-column-content');
            const columnTitle = column?.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            console.log(`  ${index + 1}. ID=${taskId}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç=${priority}, –ö–æ–ª–æ–Ω–∫–∞="${columnTitle}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É "–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ"
        const clarificationTasks = Array.from(allTasks).filter(task => {
            const column = task.closest('.kanban-column-content');
            const columnTitle = column?.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            return columnTitle && columnTitle.includes('–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ');
        });

        console.log(`üîç –ó–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ "–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ": ${clarificationTasks.length}`);
        clarificationTasks.forEach((task, index) => {
            const taskId = task.getAttribute('data-task-id');
            console.log(`  ${index + 1}. –ó–∞–¥–∞—á–∞ #${taskId}`);
        });
    };

        window.findTaskById = function(taskId) {
        console.log(`üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ #${taskId}...`);

        const task = document.querySelector(`[data-task-id="${taskId}"]`);
        if (task) {
            const column = task.closest('.kanban-column-content');
            const columnTitle = column?.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            const priority = task.getAttribute('data-priority');
            console.log(`‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –Ω–∞–π–¥–µ–Ω–∞:`);
            console.log(`  - –ö–æ–ª–æ–Ω–∫–∞: "${columnTitle}"`);
            console.log(`  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority}`);
            console.log(`  - –≠–ª–µ–º–µ–Ω—Ç:`, task);
        } else {
            console.log(`‚ùå –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
            const allColumns = document.querySelectorAll('.kanban-column-content');
            console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏:');
            allColumns.forEach((col, index) => {
                const statusId = col.getAttribute('data-status-id');
                const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
                const taskCount = col.querySelectorAll('.kanban-card').length;
                console.log(`  ${index + 1}. ID=${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ="${columnTitle}", –ó–∞–¥–∞—á=${taskCount}`);
            });
        }
    };

        window.testLoadAllTasks = async function() {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const response = await fetch('/tasks/get-my-tasks-paginated?length=1000&start=0&force_load=1&view=kanban');

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('üìã –û—Ç–≤–µ—Ç API (–≤—Å–µ –∑–∞–¥–∞—á–∏):', data);

            if (data.success && data.data) {
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: ${data.data.length}`);

                // –ò—â–µ–º –∑–∞–¥–∞—á—É #258367
                const targetTask = data.data.find(task => task.id == 258367);
                if (targetTask) {
                    console.log('‚úÖ –ó–∞–¥–∞—á–∞ #258367 –Ω–∞–π–¥–µ–Ω–∞ –≤ API:');
                    console.log('  - ID:', targetTask.id);
                    console.log('  - Subject:', targetTask.subject);
                    console.log('  - Status:', targetTask.status_name);
                    console.log('  - Status ID:', targetTask.status_id);
                    console.log('  - Priority:', targetTask.priority_name);
                    console.log('  - Project:', targetTask.project_name);
                    console.log('  - Assigned to:', targetTask.assigned_to_name);
                } else {
                    console.log('‚ùå –ó–∞–¥–∞—á–∞ #258367 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API');

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    console.log('üìã –í—Å–µ –∑–∞–¥–∞—á–∏ –≤ API:');
                    data.data.forEach((task, index) => {
                        console.log(`${index + 1}. ID=${task.id}, –°—Ç–∞—Ç—É—Å="${task.status_name}", StatusID=${task.status_id}`);
                    });
                }
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:', data);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        }
    };

        window.testLoadTasksWithParams = async function() {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...');

        const testParams = [
            { name: '–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤', params: 'length=1000&start=0&force_load=1&view=kanban' },
            { name: '–° exclude_completed=0', params: 'length=1000&start=0&exclude_completed=0&force_load=1&view=kanban' },
            { name: '–° exclude_completed=1', params: 'length=1000&start=0&exclude_completed=1&force_load=1&view=kanban' },
            { name: '–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ', params: 'length=1000&start=0&exclude_completed=1&force_load=1&view=kanban&status=9' }
        ];

        for (const test of testParams) {
            console.log(`\nüìã –¢–µ—Å—Ç: ${test.name}`);
            try {
                const response = await fetch(`/tasks/get-my-tasks-paginated?${test.params}`);
                const data = await response.json();

                if (data.success && data.data) {
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: ${data.data.length}`);

                    // –ò—â–µ–º –∑–∞–¥–∞—á—É #258367
                    const targetTask = data.data.find(task => task.id == 258367);
                    if (targetTask) {
                        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ #258367 –Ω–∞–π–¥–µ–Ω–∞ –≤ "${test.name}":`);
                        console.log(`  - –°—Ç–∞—Ç—É—Å: "${targetTask.status_name}" (ID: ${targetTask.status_id})`);
                    } else {
                        console.log(`‚ùå –ó–∞–¥–∞—á–∞ #258367 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ "${test.name}"`);
                    }
                } else {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ "${test.name}":`, data);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ "${test.name}":`, error);
            }
        }
    };

                window.forceRefreshStyles = function() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π...');

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        const priorityBadges = document.querySelectorAll('.priority-badge');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${priorityBadges.length} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

        priorityBadges.forEach((badge, index) => {
            const priority = badge.textContent;
            console.log(`üîç –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${index + 1}: "${priority}"`);

            badge.className = 'priority-badge';

            if (priority.toLowerCase().includes('—Å—Ä–æ—á–Ω—ã–π') || priority.toLowerCase().includes('urgent') || priority.toLowerCase().includes('–≤—ã—Å–æ–∫–∏–π') || priority.toLowerCase().includes('high')) {
                badge.classList.add('priority-high');
                badge.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
                badge.style.color = 'white';
                console.log(`üî¥ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority}" -> –ö–†–ê–°–ù–´–ô`);
            } else if (priority.toLowerCase().includes('–Ω–∏–∑–∫–∏–π') || priority.toLowerCase().includes('low')) {
                badge.classList.add('priority-low');
                badge.style.background = 'linear-gradient(135deg, #10b981, #059669)';
                badge.style.color = 'white';
                console.log(`üü¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority}" -> –ó–ï–õ–ï–ù–´–ô`);
            } else {
                badge.classList.add('priority-normal');
                badge.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
                badge.style.color = 'white';
                console.log(`üîµ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority}" -> –°–ò–ù–ò–ô`);
            }
        });

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${priorityBadges.length} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤`);
    };

        window.limitClosedTasks = function() {
        console.log('üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ"...');

        const closedColumn = document.querySelector('[data-status-id="5"]');
        if (closedColumn) {
            const cards = closedColumn.querySelectorAll('.kanban-card');
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${cards.length} –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ"`);

            if (cards.length > 5) {
                // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5)
                for (let i = 5; i < cards.length; i++) {
                    cards[i].remove();
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ª–∏—à–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ ${i + 1}`);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                const countElement = closedColumn.parentElement.querySelector('.kanban-column-count');
                if (countElement) {
                    countElement.textContent = '5';
                }

                console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–∫—Ä—ã—Ç–æ" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–æ 5 –∑–∞–¥–∞—á');
            } else if (cards.length < 5) {
                console.log(`‚ö†Ô∏è –í –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ" —Ç–æ–ª—å–∫–æ ${cards.length} –∑–∞–¥–∞—á, –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ`);
                // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                window.kanbanManager.loadMoreCompletedTasks();
            }
        } else {
            console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–∫—Ä—ã—Ç–æ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    };

                window.applyAllFixes = function() {
        console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');

        // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        forceRefreshStyles();

        // 2. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–æ"
        limitClosedTasks();

        // 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –∫–æ–ª–æ–Ω–æ–∫
        const collapsedColumns = document.querySelectorAll('.kanban-column.collapsed');
        collapsedColumns.forEach(column => {
            column.style.minHeight = 'auto';
            column.style.height = 'auto';
        });

        // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º drag & drop
        fixDragAndDrop();

        console.log('‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    };

            window.fixDragAndDrop = function() {
        console.log('üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Drag & Drop...');

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º draggable –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        const cards = document.querySelectorAll('.kanban-card');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);

        cards.forEach((card, index) => {
            const taskId = card.getAttribute('data-task-id');
            card.setAttribute('draggable', 'true');
            card.style.cursor = 'grab';

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newCard = card.cloneNode(true);
            card.parentNode.replaceChild(newCard, card);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            newCard.addEventListener('dragstart', function(e) {
                console.log(`üéØ Drag start –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${taskId}`);
                e.dataTransfer.setData('text/plain', taskId);
                newCard.style.opacity = '0.5';
            });

            newCard.addEventListener('dragend', function(e) {
                console.log(`‚úÖ Drag end –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${taskId}`);
                newCard.style.opacity = '1';
            });

            console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ ${taskId} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è drag & drop`);
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–æ–Ω—ã —Å–±—Ä–æ—Å–∞
        const dropZones = document.querySelectorAll('.kanban-column-content');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${dropZones.length} –∑–æ–Ω —Å–±—Ä–æ—Å–∞`);

        dropZones.forEach((zone, index) => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newZone = zone.cloneNode(true);
            zone.parentNode.replaceChild(newZone, zone);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            newZone.addEventListener('dragover', function(e) {
                e.preventDefault();
                newZone.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';
            });

                        newZone.addEventListener('drop', function(e) {
                e.preventDefault();
                const taskId = e.dataTransfer.getData('text/plain');
                const statusId = newZone.getAttribute('data-status-id');
                console.log(`üéØ Drop –∑–∞–¥–∞—á–∏ ${taskId} –≤ –∑–æ–Ω—É ${index + 1} (—Å—Ç–∞—Ç—É—Å: ${statusId})`);
                newZone.style.backgroundColor = '';

                // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏
                const taskCard = document.querySelector(`[data-task-id="${taskId}"]`);
                if (taskCard) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    taskCard.classList.add('updating');

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                    if (window.kanbanManager && window.kanbanManager.updateTaskStatus) {
                        window.kanbanManager.updateTaskStatus(taskId, statusId).then(success => {
                            if (success) {
                                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                                window.kanbanManager.moveCardWithAnimation(taskCard, newZone);

                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                                window.kanbanManager.updateColumnCounts();

                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                                const columnTitle = newZone.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
                                window.kanbanManager.showSuccessMessage(`–ó–∞–¥–∞—á–∞ #${taskId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "${columnTitle}"`);

                                console.log(`‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å ${statusId}`);
                            } else {
                                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                window.kanbanManager.showErrorMessage(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #${taskId}`);
                                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #${taskId}`);
                            }

                            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                            taskCard.classList.remove('updating');
                        });
                    }
                } else {
                    console.error(`‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
            });

            newZone.addEventListener('dragenter', function(e) {
                e.preventDefault();
                newZone.style.backgroundColor = 'rgba(59, 130, 246, 0.2)';
            });

            newZone.addEventListener('dragleave', function(e) {
                e.preventDefault();
                newZone.style.backgroundColor = '';
            });

            console.log(`‚úÖ –ó–æ–Ω–∞ —Å–±—Ä–æ—Å–∞ ${index + 1} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`);
        });

        console.log('‚úÖ Drag & Drop –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏');
    };

            window.checkCurrentState = function() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–ó–∞–∫—Ä—ã—Ç–æ"
        const closedColumn = document.querySelector('[data-status-id="5"]');
        if (closedColumn) {
            const cards = closedColumn.querySelectorAll('.kanban-card');
            console.log(`üìä –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–∫—Ä—ã—Ç–æ": ${cards.length} –∑–∞–¥–∞—á`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        const priorityBadges = document.querySelectorAll('.priority-badge');
        console.log(`üé® –ù–∞–π–¥–µ–Ω–æ ${priorityBadges.length} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:`);
        priorityBadges.forEach((badge, index) => {
            const text = badge.textContent;
            const classes = badge.className;
            const style = badge.style.background;
            console.log(`  ${index + 1}. "${text}" -> –∫–ª–∞—Å—Å—ã: "${classes}", —Å—Ç–∏–ª—å: "${style}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
        const collapsedColumns = document.querySelectorAll('.kanban-column.collapsed');
        console.log(`üìè –°–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: ${collapsedColumns.length}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º drag & drop
        const draggableCards = document.querySelectorAll('.kanban-card[draggable="true"]');
        const dropZones = document.querySelectorAll('.kanban-column-content');
        console.log(`üéØ Drag & Drop: ${draggableCards.length} –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, ${dropZones.length} –∑–æ–Ω —Å–±—Ä–æ—Å–∞`);

        return {
            closedTasks: closedColumn ? closedColumn.querySelectorAll('.kanban-card').length : 0,
            priorityBadges: priorityBadges.length,
            collapsedColumns: collapsedColumns.length,
            draggableCards: draggableCards.length,
            dropZones: dropZones.length
        };
    };

        window.diagnoseDragAndDrop = function() {
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Drag & Drop...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        const allCards = document.querySelectorAll('.kanban-card');
        console.log(`üìä –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${allCards.length}`);

        allCards.forEach((card, index) => {
            const draggable = card.getAttribute('draggable');
            const taskId = card.getAttribute('data-task-id');
            const cursor = card.style.cursor;

            console.log(`  –ö–∞—Ä—Ç–æ—á–∫–∞ ${index + 1}: ID=${taskId}, draggable=${draggable}, cursor=${cursor}`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã —Å–±—Ä–æ—Å–∞
        const allZones = document.querySelectorAll('.kanban-column-content');
        console.log(`üìä –í—Å–µ–≥–æ –∑–æ–Ω —Å–±—Ä–æ—Å–∞: ${allZones.length}`);

        allZones.forEach((zone, index) => {
            const statusId = zone.getAttribute('data-status-id');
            const columnTitle = zone.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();

            console.log(`  –ó–æ–Ω–∞ ${index + 1}: statusId=${statusId}, title="${columnTitle}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

        const testCard = allCards[0];
        if (testCard) {
            const events = getEventListeners ? getEventListeners(testCard) : 'getEventListeners –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            console.log(`  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏:`, events);
        }

        return {
            totalCards: allCards.length,
            totalZones: allZones.length,
            draggableCards: document.querySelectorAll('.kanban-card[draggable="true"]').length
        };
    };

    window.resetDragAndDrop = function() {
        console.log('üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Drag & Drop...');

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const allCards = document.querySelectorAll('.kanban-card');
        const allZones = document.querySelectorAll('.kanban-column-content');

        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å ${allCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ ${allZones.length} –∑–æ–Ω...`);

        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        allCards.forEach(card => {
            const newCard = card.cloneNode(true);
            card.parentNode.replaceChild(newCard, card);
        });

        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–æ–Ω—ã —Å–±—Ä–æ—Å–∞
        allZones.forEach(zone => {
            const newZone = zone.cloneNode(true);
            zone.parentNode.replaceChild(newZone, zone);
        });

        console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã');

        // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π drag & drop
        setTimeout(() => {
            fixDragAndDrop();
        }, 100);

        return 'Drag & Drop —Å–±—Ä–æ—à–µ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    };

    window.findSpecificTask = async function(taskId = 258367) {
        console.log(`üîç –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ #${taskId}...`);

        try {
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            const queries = [
                { name: '–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ ID', url: `/tasks/api/task/${taskId}` },
                { name: '–í—Å–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤', url: '/tasks/get-my-tasks-paginated?length=10000&start=0&force_load=1' },
                { name: '–ó–∞–¥–∞—á–∏ —Å –≤–∞—à–∏–º ID', url: `/tasks/get-my-tasks-paginated?length=10000&start=0&force_load=1&assigned_to=${encodeURIComponent('Varslavan Yury')}` },
                { name: '–ó–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 9', url: '/tasks/get-my-tasks-paginated?length=10000&start=0&force_load=1&status=9' }
            ];

            for (const query of queries) {
                console.log(`\nüìã ${query.name}:`);
                try {
                    const response = await fetch(query.url);
                    const data = await response.json();

                                    if (data.success && data.data) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ data.data –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
                    if (Array.isArray(data.data)) {
                        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: ${data.data.length}`);

                        // –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ –º–∞—Å—Å–∏–≤–µ
                        const targetTask = data.data.find(task => task.id == taskId);
                        if (targetTask) {
                            console.log(`‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –Ω–∞–π–¥–µ–Ω–∞:`);
                            console.log(`  - ID: ${targetTask.id}`);
                            console.log(`  - Subject: ${targetTask.subject}`);
                            console.log(`  - Status: "${targetTask.status_name}" (ID: ${targetTask.status_id})`);
                            console.log(`  - Priority: ${targetTask.priority_name}`);
                            console.log(`  - Project: ${targetTask.project_name}`);
                            console.log(`  - Assigned to: ${targetTask.assigned_to_name}`);
                            console.log(`  - Created: ${targetTask.created_on}`);
                            console.log(`  - Updated: ${targetTask.updated_on}`);
                            return targetTask;
                        } else {
                            console.log(`‚ùå –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞—Å—Å–∏–≤–µ`);
                        }
                    } else {
                        // data.data - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ–π
                        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞:`, data.data);

                        if (data.data.id == taskId) {
                            console.log(`‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –Ω–∞–π–¥–µ–Ω–∞:`);
                            console.log(`  - ID: ${data.data.id}`);
                            console.log(`  - Subject: ${data.data.subject}`);
                            console.log(`  - Status: "${data.data.status_name}" (ID: ${data.data.status_id})`);
                            console.log(`  - Priority: ${data.data.priority_name}`);
                            console.log(`  - Project: ${data.data.project_name}`);
                            console.log(`  - Assigned to: ${data.data.assigned_to_name}`);
                            console.log(`  - Created: ${data.data.created_on}`);
                            console.log(`  - Updated: ${data.data.updated_on}`);
                            return data.data;
                        } else {
                            console.log(`‚ùå –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #${data.data.id})`);
                        }
                    }
                } else {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ API:`, data);
                }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error);
                }
            }

            console.log(`\n‚ùå –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ`);
            return null;

        } catch (error) {
            console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
            return null;
        }
    };

    window.expandAllColumns = function() {
        console.log('üìã –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏');
        const allColumns = document.querySelectorAll('.kanban-column');
        allColumns.forEach(column => column.classList.remove('collapsed'));
    };

    window.collapseAllColumns = function() {
        console.log('üìã –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏');
        const allColumns = document.querySelectorAll('.kanban-column');
        allColumns.forEach(column => column.classList.add('collapsed'));
    };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initKanbanManager();
