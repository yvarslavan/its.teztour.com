/**
 * KanbanManager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Kanban –¥–æ—Å–∫–æ–π
 * v1.0.0
 */

class KanbanManager {
    constructor() {
        this.currentView = 'list';
        this.tasksData = [];
        this.filters = {};
        this.isLoading = false;
        this.isInitialized = false;
        this.eventListenersInitialized = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.cache = {
            tasks: null,
            statuses: null,
            completedTasks: null,
            lastUpdate: null,
            cacheTimeout: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
        };

        // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö (–ø—É—Å—Ç—ã—Ö) –∫–æ–ª–æ–Ω–æ–∫
        this.ensureCompactColumnStyles();

        console.log('[KanbanManager] üöÄ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Kanban –º–µ–Ω–µ–¥–∂–µ—Ä–∞');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DOM –≥–æ—Ç–æ–≤
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.init();
            });
        } else {
            this.init();
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    ensureCompactColumnStyles() {
        if (document.getElementById('kanban-compact-columns-style')) return;
        const style = document.createElement('style');
        style.id = 'kanban-compact-columns-style';
        style.textContent = `
            /* –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –≤—ã—Å–æ—Ç—ã */
            .kanban-column, .kanban-column .kanban-column-content { transition: min-height .25s ease; }
            /* –°–∂–∞—Ç–∏–µ –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ–º –ª—é–±—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ */
            .kanban-column.kanban-column-empty { min-height: 120px !important; }
            .kanban-columns .kanban-column.kanban-column-empty .kanban-column-content { min-height: 100px !important; }
            /* –ú–∏–Ω–∏-—Å—Ç–∞—Ç—É—Å (—Ç–æ—á–∫–∞ –∏ –±–æ—Ä–¥–µ—Ä) –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ */
            .kanban-card{ position: relative; border-left: 3px solid var(--status-dot, transparent); }
            .kanban-card.has-status-dot::before{ content:''; position:absolute; top:8px; left:8px; width:8px; height:8px; border-radius:50%; background: var(--status-dot, #94a3b8); box-shadow: 0 0 6px var(--status-dot, transparent); }
            .kanban-card-header { display: flex; justify-content: space-between; align-items: center; gap: 10px; }
            .kanban-card-meta { display: flex; align-items: center; gap: 8px; }
        `;
        document.head.appendChild(style);
    }

    // (–£–±—Ä–∞–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)

    adjustEmptyColumns() {
        try {
            const columns = document.querySelectorAll('.kanban-column');
            columns.forEach(col => {
                const content = col.querySelector('.kanban-column-content');
                if (!content) return;
                const cards = content.querySelectorAll('.kanban-card');
                const isEmpty = cards.length === 0;
                col.classList.toggle('kanban-column-empty', isEmpty);
            });
            console.log('[KanbanManager] ‚úÖ –ü—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–∂–∞—Ç—ã');
        } catch (e) {
            console.warn('[KanbanManager] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∂–∞—Ç–∏–µ –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:', e);
        }
    }

    init() {
        console.log('[KanbanManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kanban –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const toggleButtons = document.querySelectorAll('.view-toggle-btn');
            const kanbanBoard = document.getElementById('kanban-board');
            const tableContainer = document.querySelector('.table-container');
            console.log('[KanbanManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
            console.log('- –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', toggleButtons.length);
            console.log('- Kanban –¥–æ—Å–∫–∞:', !!kanbanBoard);
            console.log('- –¢–∞–±–ª–∏—Ü–∞:', !!tableContainer);

            // –°–æ–∑–¥–∞—ë–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            this.createDynamicColumns().then(() => {
                this.setupEventListeners();
                this.initDragAndDrop();
                this.initTooltips();
                // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ —Ç–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                this.adjustEmptyColumns();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –≤ Kanban
                this.loadKanbanDataOptimized().then(() => {
                    console.log('[KanbanManager] üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
                    this.isInitialized = true;
                    console.log('[KanbanManager] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                }).catch(error => {
                    console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Kanban:', error);
                    this.isInitialized = true;
                });
            }).catch(error => {
                console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                this.isInitialized = false;
            });
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.isInitialized = false;
        }
    }

    setupEventListeners() {
        try {
            console.log('[KanbanManager] üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');

            // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if (this.eventListenersInitialized) {
                console.log('[KanbanManager] ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                return;
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏
            document.addEventListener('click', (e) => {
                console.log('[KanbanManager] üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É:', e.target);

                if (e.target.closest('.view-toggle-btn')) {
                    const btn = e.target.closest('.view-toggle-btn');
                    const view = btn.dataset.view;
                    console.log('[KanbanManager] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥:', view);
                    this.switchView(view);
                }

                                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ ID –∑–∞–¥–∞—á–∏ –≤ Kanban –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                if (e.target.closest('.kanban-card-id')) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Å–ø–ª—ã—Ç–∏–µ

                    const taskIdElement = e.target.closest('.kanban-card-id');
                    const taskId = taskIdElement.dataset.taskId;

                    if (taskId) {
                        console.log(`[KanbanManager] üéØ –ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ ${taskId} –≤ Kanban`);
                        console.log(`[KanbanManager] üîç Target:`, e.target);
                        console.log(`[KanbanManager] üîç CurrentTarget:`, e.currentTarget);

                        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                        if (taskIdElement.dataset.clicking === 'true') {
                            console.log(`[KanbanManager] ‚ö†Ô∏è –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ ${taskId} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
                            return;
                        }

                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–ª–∏–∫–∞
                        taskIdElement.dataset.clicking = 'true';
                        setTimeout(() => {
                            taskIdElement.dataset.clicking = 'false';
                        }, 1000);

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        const currentView = document.querySelector('.view-toggle-btn.active')?.dataset.view || 'list';
                        sessionStorage.setItem('return_from_task_view', currentView);
                        console.log(`[KanbanManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${currentView}`);

                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                        window.open(`/tasks/my-tasks/${taskId}`, '_blank');
                    }
                }

                // –£–î–ê–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≤—Å–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ Kanban
                // –¢–µ–ø–µ—Ä—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞—á–∏ (.kanban-card-id)
                // –ö–ª–∏–∫–∏ –ø–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            this.setupFilterListeners();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.eventListenersInitialized = true;
            console.log('[KanbanManager] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π:', error);
        }
    }

    setupFilterListeners() {
        try {
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
            const filterSelects = ['status-filter', 'project-filter', 'priority-filter'];

            filterSelects.forEach(filterId => {
                const select = document.getElementById(filterId);
                if (select) {
                    select.addEventListener('change', () => {
                        this.updateFilters();
                        if (this.currentView === 'kanban') {
                            this.loadKanbanDataOptimized();
                        }
                    });
                }
            });
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    updateFilters() {
        this.filters = {
            status: document.getElementById('status-filter')?.value || '',
            project: document.getElementById('project-filter')?.value || '',
            priority: document.getElementById('priority-filter')?.value || ''
        };

        console.log('[KanbanManager] üîç –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.filters);
    }

    switchView(view) {
        console.log(`[KanbanManager] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥: ${view}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Kanban –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!this.isInitialized) {
            console.warn('[KanbanManager] ‚ö†Ô∏è Kanban –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
            this.init();
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        const allButtons = document.querySelectorAll('.view-toggle-btn');
        console.log('[KanbanManager] üîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', allButtons.length);

        allButtons.forEach(btn => {
            btn.classList.remove('active');
        });

        const targetButton = document.querySelector(`[data-view="${view}"]`);
        if (targetButton) {
            targetButton.classList.add('active');
            console.log('[KanbanManager] ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        } else {
            console.error('[KanbanManager] ‚ùå –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', view);
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.toggleViewSections(view);

        this.currentView = view;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Kanban –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–µ–≥–æ
        if (view === 'kanban') {
            console.log('[KanbanManager] üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Kanban');
            this.loadKanbanDataOptimized();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –∫–∞–Ω–±–∞–Ω
            // this.showOnboardingIfNeeded(); // –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª
     */
    showOnboardingIfNeeded() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        if (typeof window.KanbanOnboarding !== 'undefined') {
            const onboarding = new window.KanbanOnboarding();
            onboarding.showIfNeeded();
        } else {
            console.log('[KanbanManager] ‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    showTipsBanner() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–∞–Ω–Ω–µ—Ä
        const existingBanner = document.getElementById('kanban-tips-banner');
        if (existingBanner) {
            console.log('[KanbanManager] ‚ö†Ô∏è –ë–∞–Ω–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫
        if (typeof window.KanbanTips !== 'undefined') {
            const tips = new window.KanbanTips();
            tips.showIfKanbanActive();
        } else {
            console.log('[KanbanManager] ‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
     */
    initTooltips() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const showKanbanTips = window.showKanbanTips !== undefined ? window.showKanbanTips : true;

        if (!showKanbanTips) {
            console.log('[KanbanManager] üö´ –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        if (typeof window.KanbanTooltips !== 'undefined') {
            const tooltips = new window.KanbanTooltips();
            tooltips.init();
            console.log('[KanbanManager] ‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } else {
            console.log('[KanbanManager] ‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    toggleViewSections(view) {
        console.log(`[KanbanManager] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞: ${view}`);

        const tableContainer = document.querySelector('.table-container');
        const kanbanBoard = document.getElementById('kanban-board');

        console.log('[KanbanManager] üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
        console.log('- –¢–∞–±–ª–∏—Ü–∞:', !!tableContainer);
        console.log('- Kanban:', !!kanbanBoard);

        if (view === 'list') {
            if (tableContainer) {
                tableContainer.style.display = 'block';
                console.log('[KanbanManager] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
            }
            if (kanbanBoard) {
                kanbanBoard.style.display = 'none';
                console.log('[KanbanManager] ‚úÖ Kanban —Å–∫—Ä—ã—Ç');
            }
        } else if (view === 'kanban') {
            if (tableContainer) {
                tableContainer.style.display = 'none';
                console.log('[KanbanManager] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞');
            }
            if (kanbanBoard) {
                kanbanBoard.style.display = 'block';
                console.log('[KanbanManager] ‚úÖ Kanban –ø–æ–∫–∞–∑–∞–Ω');
            }
        }
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kanban —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async loadKanbanDataOptimized() {
        console.log('[KanbanManager] üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kanban');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.isCacheValid()) {
            console.log('[KanbanManager] üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            this.renderKanbanBoard(this.cache.tasks);
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.showKanbanLoading();
        this.isLoading = true;

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä—è–º–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞
            const response = await fetch('/tasks/get-my-tasks-direct-sql?force_load=1&view=kanban&exclude_completed=0');

            console.log('[KanbanManager] üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            console.log('[KanbanManager] üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

            if (!data.success && data.error) {
                throw new Error(data.error);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const tasks = data.data || [];
            const statusCounts = data.status_counts || {};

            console.log('[KanbanManager] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ SQL API:', tasks.length);
            console.log('[KanbanManager] üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', statusCounts);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à
            this.cache.tasks = tasks;
            this.cache.statusCounts = statusCounts;
            this.cache.lastUpdate = Date.now();
            this.tasksData = tasks;

            // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            await this.createDynamicColumns();

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º Kanban –¥–æ—Å–∫—É —Å –∑–∞–¥–∞—á–∞–º–∏
            this.renderKanbanBoard(tasks);

            // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            console.log('[KanbanManager] ‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ');

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        } finally {
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.hideKanbanLoading();
            this.isLoading = false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
     */
    isCacheValid() {
        if (!this.cache.tasks || !this.cache.lastUpdate) {
            return false;
        }

        const now = Date.now();
        const cacheAge = now - this.cache.lastUpdate;

        return cacheAge < this.cache.cacheTimeout;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache = {
            tasks: null,
            statuses: null,
            completedTasks: null,
            statusCounts: null,
            lastUpdate: null,
            cacheTimeout: 5 * 60 * 1000
        };
        console.log('[KanbanManager] üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kanban (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    async loadKanbanData() {
        return this.loadKanbanDataOptimized();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ Kanban –¥–æ—Å–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
     */
    renderKanbanBoard(tasks) {
        console.log('[KanbanManager] üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ Kanban –¥–æ—Å–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏');
        console.log('[KanbanManager] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏:', tasks.length);
        const allColumns = document.querySelectorAll('.kanban-column-content');
        allColumns.forEach(column => { column.innerHTML = ''; });
        console.log('[KanbanManager] üìã –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º...');

                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const statusStats = {};
            const statusIdStats = {};
            tasks.forEach(task => {
                const status = task.status_name || '–ù–æ–≤–∞—è';
                const statusId = task.status_id || 'unknown';
                statusStats[status] = (statusStats[status] || 0) + 1;
                statusIdStats[statusId] = (statusIdStats[statusId] || 0) + 1;
            });

            console.log('[KanbanManager] üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏—è):', statusStats);
            console.log('[KanbanManager] üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (ID):', statusIdStats);

                // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞
        tasks.forEach((task, index) => {
            console.log(`[KanbanManager] üìã –ó–∞–¥–∞—á–∞ ${index + 1}: ID=${task.id}, –°—Ç–∞—Ç—É—Å="${task.status_name}", StatusID=${task.status_id}`);

            const status = task.status_name || '–ù–æ–≤–∞—è';
            const statusId = task.status_id || 1; // ID —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∑–∞–¥–∞—á–∏

            console.log(`[KanbanManager] üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞: "${status}" (ID: ${statusId})`);

            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            const columnElement = document.querySelector(`[data-status-id="${statusId}"]`);

            if (columnElement) {
                console.log(`[KanbanManager] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}" (ID: ${statusId})`);

                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏
                this.createTaskCard(task, columnElement);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–æ–Ω–∫–∏
                this.updateColumnCount(columnElement);
            } else {
                console.warn(`[KanbanManager] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}" (ID: ${statusId}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const allColumns = document.querySelectorAll('.kanban-column-content');
                console.log('[KanbanManager] üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:');
                allColumns.forEach(col => {
                    const statusId = col.getAttribute('data-status-id');
                    const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
                    console.log(`  - ID: ${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${columnTitle}`);
                });

                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
                console.log('[KanbanManager] üîç –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞...');
                const columnByTitle = Array.from(allColumns).find(col => {
                    const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
                    return columnTitle && columnTitle.includes(status);
                });

                if (columnByTitle) {
                    console.log(`[KanbanManager] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}"`);
                    this.createTaskCard(task, columnByTitle);
                    this.updateColumnCount(columnByTitle);
                } else {
                    console.error(`[KanbanManager] ‚ùå –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "${status}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ ID, –Ω–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é`);

                    // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
                    const firstColumn = allColumns[0];
                    if (firstColumn) {
                        console.log(`[KanbanManager] üîÑ Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É`);
                        this.createTaskCard(task, firstColumn);
                        this.updateColumnCount(firstColumn);
                    }
                }
            }
        });

        console.log('[KanbanManager] ‚úÖ Kanban –¥–æ—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
        this.updateTaskCountIndicators();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        this.validateAndFixColumnStatusMapping();

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        this.fixStatusMismatches();

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        this.monitorNewStatuses();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        this.testStatusMapping();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateKanbanStats(tasks);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Drag & Drop –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        this.initDragAndDrop();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        this.showTipsBanner();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
        this.adjustEmptyColumns();

        console.log('[KanbanManager] ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ 10 –∑–∞–¥–∞—á –≤ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
     */
    updateTaskCountIndicators() {
        console.log('[KanbanManager] üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á...');

        const statusCounts = this.cache.statusCounts || {};

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
        Object.keys(statusCounts).forEach(statusId => {
            const countInfo = statusCounts[statusId];
            const columnElement = document.querySelector(`[data-status-id="${statusId}"]`);

            if (columnElement) {
                const columnHeader = columnElement.closest('.kanban-column')?.querySelector('.kanban-column-header');
                const countElement = columnHeader?.querySelector('.kanban-column-count');

                if (countElement) {
                    const shown = countInfo.shown || 0;
                    const total = countInfo.total || 0;

                    if (total > shown) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ü–æ–∫–∞–∑–∞–Ω–æ X –∏–∑ Y"
                        countElement.textContent = `${shown} –∏–∑ ${total}`;
                        countElement.title = `–ü–æ–∫–∞–∑–∞–Ω–æ ${shown} –∏–∑ ${total} –∑–∞–¥–∞—á`;
                        countElement.style.color = '#ff6b35'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        countElement.textContent = shown.toString();
                        countElement.title = `${shown} –∑–∞–¥–∞—á`;
                        countElement.style.color = ''; // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
                    }
                }
            }
        });

        console.log('[KanbanManager] ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
     */
    updateColumnCount(columnElement) {
        if (!columnElement) return;

        // –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–º–µ—é—Ç –∫–ª–∞—Å—Å .kanban-card
        const taskCards = columnElement.querySelectorAll('.kanban-card');
        const count = taskCards.length;

        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∫–æ–ª–æ–Ω–∫–∏
        const columnHeader = columnElement.closest('.kanban-column')?.querySelector('.kanban-column-header');
        const countElement = columnHeader?.querySelector('.kanban-column-count');

        if (countElement) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤ –∫—ç—à–µ
            const statusId = columnElement.getAttribute('data-status-id');
            const statusCounts = this.cache.statusCounts || {};
            const countInfo = statusCounts[statusId];

            if (countInfo && countInfo.total > countInfo.shown) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                const shown = countInfo.shown || count;
                const total = countInfo.total;
                countElement.textContent = `${shown} –∏–∑ ${total}`;
                countElement.title = `–ü–æ–∫–∞–∑–∞–Ω–æ ${shown} –∏–∑ ${total} –∑–∞–¥–∞—á`;
                countElement.style.color = '#ff6b35'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                countElement.textContent = count.toString();
                countElement.title = `${count} –∑–∞–¥–∞—á`;
                countElement.style.color = ''; // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
            }

            console.log(`[KanbanManager] üìä –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–æ–Ω–∫–∏: ${count} –∑–∞–¥–∞—á`);
        }
        // –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        this.adjustEmptyColumns();
    }

        /**
     * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ "–ó–∞–∫—Ä—ã—Ç–∞" - –£–ë–†–ê–ù–û
     */
    limitClosedTasks() {
        console.log('[KanbanManager] üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö - –û–¢–ö–õ–Æ–ß–ï–ù–û');

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        const limitedIndicators = document.querySelectorAll('.kanban-column-limited-indicator');
        limitedIndicators.forEach(indicator => indicator.remove());

        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        const showMoreBtns = document.querySelectorAll('.kanban-show-more-btn');
        showMoreBtns.forEach(btn => btn.remove());

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –∫–æ–ª–æ–Ω–æ–∫
        const limitedColumns = document.querySelectorAll('.kanban-column-limited');
        limitedColumns.forEach(col => col.classList.remove('kanban-column-limited'));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        const allColumns = document.querySelectorAll('.kanban-column-content');
        allColumns.forEach(col => {
            const cards = col.querySelectorAll('.kanban-card');
            const countElement = col.parentElement.querySelector('.kanban-column-count');
            if (countElement) {
                countElement.textContent = cards.length;
                countElement.title = `–ó–∞–¥–∞—á: ${cards.length}`;
            }
        });

        console.log('[KanbanManager] ‚úÖ –í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —É–±—Ä–∞–Ω—ã');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    async loadMoreCompletedTasks() {
        console.log('[KanbanManager] üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');

        try {
            const response = await fetch('/tasks/get-completed-tasks?limit=10');
            const data = await response.json();

            if (data.success && data.data.length > 0) {
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
                data.data.sort((a, b) => {
                    const dateA = new Date(a.updated_on);
                    const dateB = new Date(b.updated_on);
                    return dateB - dateA;
                });

                // –ë–µ—Ä–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                const tasksToAdd = data.data;

                const closedColumn = document.querySelector('[data-status-id="5"]');
                if (closedColumn) {
                    tasksToAdd.forEach(task => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∞
                        const existingCard = document.querySelector(`[data-task-id="${task.id}"]`);
                        if (!existingCard) {
                            this.createTaskCard(task, closedColumn);
                        }
                    });

                    this.updateColumnCount(closedColumn);
                    console.log('[KanbanManager] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫—É "–ó–∞–∫—Ä—ã—Ç–∞"');
                }
            }
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
        }
    }

        /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ Kanban
     */
    loadCompletedTasksOnKanbanRender() {
        console.log('[KanbanManager] üîò –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');

        if (!this.completedTasksLoaded) {
            console.log('[KanbanManager] ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            this.loadCompletedTasks();
        } else {
            console.log('[KanbanManager] ‚ö†Ô∏è –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ 5 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    async loadCompletedTasks() {
        console.log('[KanbanManager] üì• –ó–∞–≥—Ä—É–∑–∫–∞ 5 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');

        try {
            const response = await fetch('/tasks/get-completed-tasks');

            console.log('[KanbanManager] üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('[KanbanManager] ‚ùå HTTP –æ—à–∏–±–∫–∞:', errorText);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }

            const data = await response.json();
            console.log('[KanbanManager] üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

            if (!data.success) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
            }

            console.log('[KanbanManager] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', data.data.length);

                        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            data.data.sort((a, b) => {
                const dateA = new Date(a.updated_on);
                const dateB = new Date(b.updated_on);
                return dateB - dateA; // –£–±—ã–≤–∞—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫
            });

            console.log('[KanbanManager] ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            const limitedTasks = data.data;
            console.log(`[KanbanManager] üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ ${limitedTasks.length} –∑–∞–¥–∞—á`);

            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            const statusDistribution = {};
            limitedTasks.forEach(task => {
                const statusName = task.status_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                statusDistribution[statusName] = (statusDistribution[statusName] || 0) + 1;
            });
            console.log('[KanbanManager] üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', statusDistribution);

            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            const closedStatusIds = [5, 6, 14]; // –ó–∞–∫—Ä—ã—Ç–∞, –û—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞
            closedStatusIds.forEach(statusId => {
                const column = document.querySelector(`[data-status-id="${statusId}"]`);
                if (column) {
                    column.innerHTML = '';
                    console.log(`[KanbanManager] ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${statusId} –æ—á–∏—â–µ–Ω–∞`);
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∏—Ö —Å—Ç–∞—Ç—É—Å—É
            limitedTasks.forEach(task => {
                console.log(`[KanbanManager] üìã –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É ${task.id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${task.status_name}" (ID: ${task.status_id})`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const allColumns = document.querySelectorAll('.kanban-column-content');
                console.log('[KanbanManager] üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:');
                allColumns.forEach(col => {
                    const statusId = col.getAttribute('data-status-id');
                    const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
                    console.log(`  - ID: ${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${columnTitle}`);
                });

                // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –ø–æ ID —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
                const targetColumn = document.querySelector(`[data-status-id="${task.status_id}"]`);

                if (targetColumn) {
                    console.log(`[KanbanManager] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${task.status_id}`);
                    this.createTaskCard(task, targetColumn);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–æ–Ω–∫–∏
                    this.updateColumnCount(targetColumn);
                } else {
                    console.warn(`[KanbanManager] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${task.status_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É "–ó–∞–∫—Ä—ã—Ç–∞" –∫–∞–∫ fallback`);

                    // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É "–ó–∞–∫—Ä—ã—Ç–∞"
                    const closedColumn = document.getElementById('status-5-column');
                    if (closedColumn) {
                        const columnContent = closedColumn.querySelector('.kanban-column-content');
                        if (columnContent) {
                            this.createTaskCard(task, columnContent);
                            this.updateColumnCount(columnContent);
                        }
                    }
                }
            });

            this.completedTasksLoaded = true;
            console.log('[KanbanManager] ‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
            this.updateColumnCounts();

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–∫—Ä—ã—Ç–∞" –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞
            const closedTasksCount = data.data.filter(task => task.status_id === 5).length;
            const closedCount = document.getElementById('status-5-count');
            if (closedCount) {
                closedCount.textContent = closedTasksCount;
                console.log('[KanbanManager] üî¢ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∫–æ–ª–æ–Ω–∫–∏ "–ó–∞–∫—Ä—ã—Ç–∞":', closedCount.textContent);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–¥–∞—á
            const totalCount = document.querySelector('.total-tasks-count');
            if (totalCount) {
                const currentTotal = parseInt(totalCount.textContent) || 0;
                const newTotal = currentTotal + data.data.length;
                totalCount.textContent = newTotal;
                console.log('[KanbanManager] üî¢ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫:', newTotal);
            }

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
            this.showKanbanError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${error.message}`);
        }
    }



    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
     */
    createTaskCard(task, columnElement) {
        console.log(`[KanbanManager] üé¥ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}:`, task);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        const existingCard = document.querySelector(`[data-task-id="${task.id}"]`);
        if (existingCard) {
            console.log(`[KanbanManager] ‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ`);
            return;
        }

        // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–ó–∞–∫—Ä—ã—Ç–æ" (ID: 5)
        const statusId = task.status_id;
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        const priority = task.priority_name || '–û–±—ã—á–Ω—ã–π';
        const priorityClass = this.getPriorityClass(priority, task.priority_position);

        if (!priority || priority === 'undefined') {
            console.log(`[KanbanManager] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority}" -> priority-normal (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)`);
        }

        // –°–æ–∑–¥–∞–µ–º HTML –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        const projectName = task.project_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç';
        const statusColor = this.getStatusColor(task.status_name || '');
        const cardHtml = `
            <div class="kanban-card has-status-dot" data-task-id="${task.id}" data-priority="${priorityClass}" data-updated-on="${task.updated_on || ''}" draggable="true" style="--status-dot:${statusColor}">
                <div class="kanban-card-header">
                    <div class="kanban-card-meta"><div class="kanban-card-id" data-task-id="${task.id}" style="cursor: pointer; color: #2563eb;">#${task.id}</div></div>
                    <div class="kanban-card-priority">
                        <span class="priority-badge ${priorityClass}">${this.escapeHtml(priority)}</span>
                    </div>
                </div>
                <div class="kanban-card-content">
                    <div class="kanban-card-project" style="font-size: 0.8em; color: #6b7280; margin-bottom: 4px;">${this.escapeHtml(projectName)}</div>
                    <div class="kanban-card-subject">${this.escapeHtml(task.subject || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                    <div class="kanban-card-date">${this.formatDate(task.updated_on)}</div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–ª–æ–Ω–∫—É
        columnElement.insertAdjacentHTML('beforeend', cardHtml);

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
        const newCard = columnElement.lastElementChild;
        if (newCard) {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è onclick –≤ HTML)
            // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–∫—Ä—ã—Ç—å" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ onclick –≤ HTML

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            if (this.boundHandleDragStart && this.boundHandleDragEnd) {
                newCard.addEventListener('dragstart', this.boundHandleDragStart);
                newCard.addEventListener('dragend', this.boundHandleDragEnd);
                console.log(`[KanbanManager] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${task.id}`);
            } else {
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                newCard.addEventListener('dragstart', (e) => {
                    console.log(`üéØ Drag start –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${task.id}`);
                    e.dataTransfer.setData('text/plain', task.id);
                    newCard.style.opacity = '0.5';
                });

                newCard.addEventListener('dragend', (e) => {
                    console.log(`‚úÖ Drag end –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${task.id}`);
                    newCard.style.opacity = '1';
                });

                            console.log(`[KanbanManager] ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${task.id}`);
        }

        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–æ–Ω —Å–±—Ä–æ—Å–∞, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        const dropZones = document.querySelectorAll('.kanban-column-content');
        dropZones.forEach((zone, index) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const hasDropHandler = zone._hasDropHandler;
            if (!hasDropHandler) {
                zone.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    zone.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';
                });

                zone.addEventListener('drop', (e) => {
                    e.preventDefault();
                    const taskId = e.dataTransfer.getData('text/plain');
                    const statusId = zone.getAttribute('data-status-id');
                    console.log(`üéØ –°–¢–ê–†–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: Drop –∑–∞–¥–∞—á–∏ ${taskId} –≤ –∑–æ–Ω—É ${index + 1} (—Å—Ç–∞—Ç—É—Å: ${statusId})`);
                    zone.style.backgroundColor = '';

                    // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤ —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    const taskCard = document.querySelector(`[data-task-id="${taskId}"]`);
                    if (taskCard) {
                        const currentColumn = taskCard.closest('[data-status-id]');
                        const currentStatusId = currentColumn ? currentColumn.getAttribute('data-status-id') : null;

                        console.log(`üéØ –°–¢–ê–†–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ - —Ç–µ–∫—É—â–∏–π: ${currentStatusId}, –Ω–æ–≤—ã–π: ${statusId}`);

                        if (String(currentStatusId) === String(statusId)) {
                            console.log(`üéØ –°–¢–ê–†–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –°—Ç–∞—Ç—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updateTaskStatus`);
                            return; // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updateTaskStatus
                        }
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–∑–Ω—ã–µ
                    console.log(`üéØ –°–¢–ê–†–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –°—Ç–∞—Ç—É—Å—ã —Ä–∞–∑–Ω—ã–µ, –≤—ã–∑—ã–≤–∞–µ–º updateTaskStatus`);
                    if (window.kanbanManager && window.kanbanManager.updateTaskStatus) {
                        window.kanbanManager.updateTaskStatus(taskId, statusId);
                    }
                });

                zone.addEventListener('dragenter', (e) => {
                    e.preventDefault();
                    zone.style.backgroundColor = 'rgba(59, 130, 246, 0.2)';
                });

                zone.addEventListener('dragleave', (e) => {
                    e.preventDefault();
                    zone.style.backgroundColor = '';
                });

                zone._hasDropHandler = true;
                console.log(`[KanbanManager] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drop –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–æ–Ω—ã ${index + 1}`);
            }
        });
    }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getPriorityClass(priority, priorityPosition) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (enumerations.position), –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
        if (typeof priorityPosition === 'number') {
            if (priorityPosition >= 7) return 'priority-high';
            if (priorityPosition <= 3) return 'priority-low';
            return 'priority-normal';
        }
        return 'priority-normal';
    }

    openTaskDetails(taskId) {
        console.log('[KanbanManager] üîó –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏:', taskId);
        window.location.href = `/tasks/my-tasks/${taskId}`;
    }

    showKanbanLoading() {
        const kanbanBoard = document.getElementById('kanban-board');
        if (kanbanBoard) {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const existingLoading = kanbanBoard.querySelector('.kanban-loading');
            if (existingLoading) {
                existingLoading.remove();
            }

            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'kanban-loading';
            loadingDiv.innerHTML = `
                <div class="loading-content">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                    </div>
                    <div class="loading-text">
                        <h3>–ó–∞–≥—Ä—É–∑–∫–∞ Kanban –¥–æ—Å–∫–∏</h3>
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ Kanban-–¥–æ—Å–∫—É...</p>
                    </div>
                    <div class="loading-progress">
                        <div class="progress-bar">
                            <div class="progress-fill"></div>
                        </div>
                    </div>
                </div>
            `;
            kanbanBoard.appendChild(loadingDiv);

            // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            const progressFill = loadingDiv.querySelector('.progress-fill');
            if (progressFill) {
                let progress = 0;
                const interval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressFill.style.width = progress + '%';
                }, 200);

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    clearInterval(interval);
                }, 5000);
            }
        }
    }

    hideKanbanLoading() {
        const loadingDiv = document.querySelector('.kanban-loading');
        if (loadingDiv) {
            // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loadingDiv.style.opacity = '0';
            loadingDiv.style.transform = 'scale(0.95)';

            setTimeout(() => {
                loadingDiv.remove();
            }, 300);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É Kanban
     */
    showKanbanError(message) {
        try {
            const kanbanBoard = document.getElementById('kanban-board');
            if (kanbanBoard) {
                // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏
                const existingError = kanbanBoard.querySelector('.kanban-error');
                if (existingError) {
                    existingError.remove();
                }

                const errorDiv = document.createElement('div');
                errorDiv.className = 'kanban-error';
                errorDiv.innerHTML = `
                    <div class="error-content">
                        <div class="error-icon">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <div class="error-text">
                            <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                            <p>${this.escapeHtml(message)}</p>
                        </div>
                        <div class="error-actions">
                            <button onclick="window.kanbanManager.forceRefresh()" class="btn btn-primary">
                                <i class="fas fa-redo"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </button>
                            <button onclick="window.kanbanManager.hideKanbanError()" class="btn btn-secondary">
                                <i class="fas fa-times"></i> –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </div>
                `;

                kanbanBoard.appendChild(errorDiv);
            }
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ Kanban:', error);
            console.error('[KanbanManager] üì¢ KANBAN ERROR:', message);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É Kanban
     */
    hideKanbanError() {
        try {
            const kanbanBoard = document.getElementById('kanban-board');
            if (kanbanBoard) {
                const errorDiv = kanbanBoard.querySelector('.kanban-error');
                if (errorDiv) {
                    errorDiv.remove();
                }
            }
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –æ—à–∏–±–∫–∏ Kanban:', error);
        }
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        if (!dateString) return '';

        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return '';

            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        } catch (error) {
            return '';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        try {
            this.showErrorMessage(message);
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏:', error);
            console.error('[KanbanManager] üì¢ ERROR:', message);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
     */
    updateColumnCounts(distribution) {
        console.log('[KanbanManager] üî¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫:', distribution);

        Object.entries(distribution).forEach(([columnId, count]) => {
            const countElement = document.getElementById(columnId);
            if (countElement) {
                countElement.textContent = count;
                console.log(`[KanbanManager] ‚úÖ –°—á–µ—Ç—á–∏–∫ ${columnId}: ${count}`);
            } else {
                console.error(`[KanbanManager] ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ ${columnId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        const totalCount = Object.values(distribution).reduce((sum, count) => sum + count, 0);
        const totalElement = document.getElementById('kanban-total-count');
        if (totalElement) {
            totalElement.textContent = totalCount;
            console.log(`[KanbanManager] ‚úÖ –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫: ${totalCount}`);
        }
    }

            /**
     * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    sortStatusesByOrder(statuses) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ –ø–æ–ª—é position –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const sortedStatuses = [...statuses].sort((a, b) => {
            // –ï—Å–ª–∏ —É —Å—Ç–∞—Ç—É—Å–∞ –µ—Å—Ç—å position, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if (a.position !== undefined && b.position !== undefined) {
                return a.position - b.position;
            }
            // –ï—Å–ª–∏ position –Ω–µ—Ç, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID
            return a.id - b.id;
        });

        console.log('[KanbanManager] üìã –°—Ç–∞—Ç—É—Å—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ position:', sortedStatuses.map(s => `${s.name} (pos: ${s.position || 'N/A'})`));

        return sortedStatuses;
    }

    /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤ Redmine —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
     */
    async createDynamicColumns() {
        console.log('[KanbanManager] üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            const statuses = await this.loadStatusesOptimized();

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            const sortedStatuses = this.sortStatusesByOrder(statuses);

            // –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            const kanbanColumns = document.getElementById('kanban-columns');
            if (!kanbanColumns) {
                throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–ª–æ–Ω–æ–∫ Kanban –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            kanbanColumns.innerHTML = '';

            console.log('[KanbanManager] üèóÔ∏è –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤:');
            console.log('[KanbanManager] üìã –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:', sortedStatuses);

            sortedStatuses.forEach((status, index) => {
                console.log(`- ${status.name} (ID: ${status.id}, is_closed: ${status.is_closed})`);

                const columnHtml = `
                    <div class="kanban-column" id="kanban-column-${status.id}">
                        <div class="kanban-column-header" onclick="this.closest('.kanban-column').classList.toggle('collapsed')">
                            <div class="kanban-column-title">
                                <i class="fas fa-circle" style="color: ${this.getStatusColor(status.name)}"></i>
                                ${this.escapeHtml(status.name)}
                            </div>
                            <div class="kanban-column-count" id="count-${status.id}">0</div>
                            <div class="kanban-column-toggle">
                                <i class="fas fa-chevron-down"></i>
                            </div>
                        </div>
                        <div class="kanban-column-content" data-status-id="${status.id}" data-status-name="${this.escapeHtml(status.name)}">
                            <!-- –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                `;

                kanbanColumns.insertAdjacentHTML('beforeend', columnHtml);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–∑–¥–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                const columnElement = kanbanColumns.lastElementChild;
                const header = columnElement.querySelector('.kanban-column-header');
                const title = columnElement.querySelector('.kanban-column-title');
                console.log(`[KanbanManager] üîç –ö–æ–ª–æ–Ω–∫–∞ ${index + 1}:`, {
                    id: status.id,
                    name: status.name,
                    headerExists: !!header,
                    titleExists: !!title,
                    titleText: title ? title.textContent : 'null'
                });
            });

            console.log('[KanbanManager] ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ');

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', error);
            console.log('[KanbanManager] üîÑ –°–æ–∑–¥–∞–µ–º fallback –∫–æ–ª–æ–Ω–∫–∏...');
            this.createFallbackColumns();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ fallback –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
     */
    createFallbackColumns() {
        try {
            console.log('[KanbanManager] üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –∫–æ–ª–æ–Ω–æ–∫...');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API
            const fallbackStatuses = [
                {id: 1, name: '–ù–æ–≤–∞—è', position: 1, is_closed: false},
                {id: 17, name: '–û—Ç–∫—Ä—ã—Ç–∞', position: 2, is_closed: false},
                {id: 19, name: '–í –æ—á–µ—Ä–µ–¥–∏', position: 3, is_closed: false},
                {id: 15, name: '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', position: 4, is_closed: false},
                {id: 2, name: '–í —Ä–∞–±–æ—Ç–µ', position: 5, is_closed: false},
                {id: 9, name: '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ', position: 6, is_closed: false},
                {id: 10, name: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', position: 7, is_closed: false},
                {id: 16, name: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞', position: 8, is_closed: false},
                {id: 18, name: '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', position: 9, is_closed: false},
                {id: 13, name: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞', position: 10, is_closed: false},
                {id: 14, name: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞', position: 11, is_closed: true},
                {id: 7, name: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', position: 12, is_closed: false},
                {id: 6, name: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞', position: 13, is_closed: true},
                {id: 5, name: '–ó–∞–∫—Ä—ã—Ç–∞', position: 14, is_closed: true}
            ];

            const kanbanColumns = document.getElementById('kanban-columns');
            if (!kanbanColumns) {
                throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            kanbanColumns.innerHTML = '';

            // –°–æ–∑–¥–∞—ë–º fallback –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            fallbackStatuses.forEach((status, index) => {
                const columnHtml = `
                    <div class="kanban-column" id="status-${status.id}-column">
                        <div class="kanban-column-header" onclick="this.closest('.kanban-column').classList.toggle('collapsed')">
                            <div class="kanban-column-title">
                                <i class="fas fa-circle" style="color: ${this.getStatusColor(status.name)}"></i>
                                ${status.name}
                            </div>
                            <div class="kanban-column-count" id="status-${status.id}-count">0</div>
                            <div class="kanban-column-toggle">
                                <i class="fas fa-chevron-down"></i>
                            </div>
                        </div>
                        <div class="kanban-column-content" data-status-id="${status.id}" data-status-name="${this.escapeHtml(status.name)}">
                            <!-- –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—é–¥–∞ -->
                        </div>
                    </div>
                `;

                kanbanColumns.insertAdjacentHTML('beforeend', columnHtml);
            });

            console.log('[KanbanManager] ‚úÖ Fallback –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ');
            // –°–∂–∏–º–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            this.adjustEmptyColumns();
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∫–æ–ª–æ–Ω–æ–∫:', error);
        }
    }

            /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusColor(statusName) {
        const statusColors = {
            // –ù–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã - —Å–∏–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏ (–Ω–æ–≤—ã–µ, —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ)
            '–ù–æ–≤–∞—è': '#2563eb',           // –ß–∏—Å—Ç–æ —Å–∏–Ω–∏–π - –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
            '–û—Ç–∫—Ä—ã—Ç–∞': '#3b82f6',         // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π - –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã

            // –û–∂–∏–¥–∞–Ω–∏–µ - —Å–µ—Ä—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            '–í –æ—á–µ—Ä–µ–¥–∏': '#95a5a6',       // –°–µ—Ä—ã–π - –∂–¥–µ—Ç —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏

            // –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –∑–µ–ª–µ–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ (–ø—Ä–æ—Ü–µ—Å—Å)
            '–í —Ä–∞–±–æ—Ç–µ': '#27ae60',        // –ó–µ–ª–µ–Ω—ã–π - –∞–∫—Ç–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

            // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—Ä–∞–Ω–∂–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è)
            '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏': '#f39c12', // –û—Ä–∞–Ω–∂–µ–≤—ã–π - –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏
            '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏': '#e67e22', // –¢–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è

            // –¢—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π - –∫—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ': '#e74c3c', // –ö—Ä–∞—Å–Ω—ã–π - —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è

            // –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞/–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ - —Ç–µ–º–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞': '#34495e',  // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞': '#2c3e50',      // –û—á–µ–Ω—å —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π - –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞

            // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞': '#9b59b6',  // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - –ø—Ä–æ—à–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –∂–µ–ª—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–µ
            '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞': '#f1c40f',  // –ñ–µ–ª—Ç—ã–π - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞

            // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ - –∑–µ–ª–µ–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': '#2ecc71',       // –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            '–ó–∞–∫—Ä—ã—Ç–∞': '#27ae60',         // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π - –∑–∞–∫—Ä—ã—Ç–∞

            // –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ - —Å–µ—Ä—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞': '#7f8c8d'        // –°–µ—Ä—ã–π - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
        };

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!statusColors[statusName]) {
            console.log(`[KanbanManager] üé® –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å "${statusName}" - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç`);

            // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞
            let hash = 0;
            for (let i = 0; i < statusName.length; i++) {
                hash = statusName.charCodeAt(i) + ((hash << 5) - hash);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞
            const hue = Math.abs(hash) % 360;
            const saturation = 70 + (Math.abs(hash) % 30); // 70-100%
            const lightness = 45 + (Math.abs(hash) % 20); // 45-65%

            const color = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
            console.log(`[KanbanManager] üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ü–≤–µ—Ç –¥–ª—è "${statusName}": ${color}`);

            return color;
        }

        return statusColors[statusName];
    }

        /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç—ã–º
     */
    isStatusClosed(statusName) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        try {
            // –ü—Ä–∏ –≤—ã–∑–æ–≤–∞—Ö –Ω–∏–∂–µ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ name, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ
            return false; // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫; —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç task.status_is_closed
        } catch (e) {
            return false;
        }
    }

        /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
     */
    updateTaskInCache(taskId, newStatusId, newStatusName) {
        console.log(`[KanbanManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}: —Å—Ç–∞—Ç—É—Å ${newStatusId} (${newStatusName})`);

        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
        const taskIndex = this.tasksData.findIndex(task => task.id == taskId);
        if (taskIndex !== -1) {
            this.tasksData[taskIndex].status_id = parseInt(newStatusId);
            this.tasksData[taskIndex].status_name = newStatusName;
            console.log(`[KanbanManager] ‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫—ç—à–µ`);
        } else {
            console.warn(`[KanbanManager] ‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
     */
    validateAndFixColumnStatusMapping() {
        console.log('[KanbanManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤...');

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_statuses
        const correctStatusMapping = {
            // –ú–∞–ø–ø–∏–Ω–≥ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Redmine API –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            'Closed': '–ó–∞–∫—Ä—ã—Ç–∞',
            'New': '–ù–æ–≤–∞—è',
            'In Progress': '–í —Ä–∞–±–æ—Ç–µ',
            'Rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'Executed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            'The request specification': '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
            'Paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
            'Tested': '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞',
            'Redirected': '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞',
            'On the coordination': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            'Frozen': '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞',
            'Open': '–û—Ç–∫—Ä—ã—Ç–∞',
            'On testing': '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
            'In queue': '–í –æ—á–µ—Ä–µ–¥–∏'
        };

        const allColumns = document.querySelectorAll('.kanban-column-content');
        const columnStatusMap = {};

        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        allColumns.forEach(col => {
            const statusId = col.getAttribute('data-status-id');
            const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            if (statusId && columnTitle) {
                columnStatusMap[statusId] = columnTitle;
            }
        });

        console.log('[KanbanManager] üìã –ö–∞—Ä—Ç–∞ –∫–æ–ª–æ–Ω–æ–∫:', columnStatusMap);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º
        Object.keys(columnStatusMap).forEach(statusId => {
            const columnTitle = columnStatusMap[statusId];
            const correctStatusName = correctStatusMapping[statusId];

            if (correctStatusName && !columnTitle.includes(correctStatusName)) {
                console.warn(`[KanbanManager] ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–∫–∏: ID ${statusId} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "${correctStatusName}", –Ω–æ –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "${columnTitle}"`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ
        if (this.tasksData && this.tasksData.length > 0) {
            console.log('[KanbanManager] üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –≤ –∫—ç—à–µ...');
            this.tasksData.forEach(task => {
                const taskStatusId = task.status_id;
                const taskStatusName = task.status_name;
                const expectedColumnTitle = columnStatusMap[taskStatusId];
                const correctStatusName = correctStatusMapping[taskStatusId];

                if (expectedColumnTitle && !expectedColumnTitle.includes(taskStatusName)) {
                    console.warn(`[KanbanManager] ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –∑–∞–¥–∞—á–∞ ${task.id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "${taskStatusName}" (ID: ${taskStatusId}), –Ω–æ –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "${expectedColumnTitle}"`);
                }

                if (correctStatusName && taskStatusName !== correctStatusName) {
                    console.warn(`[KanbanManager] ‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: –∑–∞–¥–∞—á–∞ ${task.id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "${taskStatusName}" (ID: ${taskStatusId}), –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "${correctStatusName}"`);
                }
            });
        }

        return columnStatusMap;
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    monitorNewStatuses() {
        console.log('[KanbanManager] üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤...');

        if (!this.tasksData || this.tasksData.length === 0) {
            return;
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –∑–∞–¥–∞—á
        const statusSet = new Set();
        this.tasksData.forEach(task => {
            if (task.status_name) {
                statusSet.add(`${task.status_id}: ${task.status_name}`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        const knownStatuses = new Set([
            '1: –ù–æ–≤–∞—è',
            '2: –í —Ä–∞–±–æ—Ç–µ',
            '5: –ó–∞–∫—Ä—ã—Ç–∞',
            '6: –û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            '7: –í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            '9: –ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
            '10: –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
            '13: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞',
            '14: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞',
            '15: –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            '16: –ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞',
            '17: –û—Ç–∫—Ä—ã—Ç–∞',
            '18: –ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
            '19: –í –æ—á–µ—Ä–µ–¥–∏'
        ]);

        const newStatuses = [];
        statusSet.forEach(status => {
            if (!knownStatuses.has(status)) {
                newStatuses.push(status);
            }
        });

        if (newStatuses.length > 0) {
            console.warn('[KanbanManager] üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã:', newStatuses);
            console.warn('[KanbanManager] üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å fallback –∫–æ–ª–æ–Ω–∫–∏ –∏ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.showNotification(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${newStatuses.join(', ')}`, 'info');
        } else {
            console.log('[KanbanManager] ‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑–≤–µ—Å—Ç–Ω—ã');
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    fixStatusMismatches() {
        console.log('[KanbanManager] üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤...');

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_statuses
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏–∑ API
        const correctStatusMapping = {
            // –ú–∞–ø–ø–∏–Ω–≥ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Redmine API –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            'Closed': '–ó–∞–∫—Ä—ã—Ç–∞',
            'New': '–ù–æ–≤–∞—è',
            'In Progress': '–í —Ä–∞–±–æ—Ç–µ',
            'Rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'Executed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            'The request specification': '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
            'Paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
            'Tested': '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞',
            'Redirected': '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞',
            'On the coordination': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            'Frozen': '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞',
            'Open': '–û—Ç–∫—Ä—ã—Ç–∞',
            'On testing': '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
            'In queue': '–í –æ—á–µ—Ä–µ–¥–∏'
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –∫—ç—à–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ mapping
        if (this.tasksData && this.tasksData.length > 0) {
            const newStatuses = new Set();
            this.tasksData.forEach(task => {
                if (!correctStatusMapping[task.status_id]) {
                    newStatuses.add(`${task.status_id}: ${task.status_name}`);
                }
            });

            if (newStatuses.size > 0) {
                console.warn('[KanbanManager] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã:', Array.from(newStatuses));
                console.warn('[KanbanManager] ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å correctStatusMapping');
            }
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ
        if (this.tasksData && this.tasksData.length > 0) {
            let fixedCount = 0;
            this.tasksData.forEach(task => {
                const taskStatusId = task.status_id;
                const correctStatusName = correctStatusMapping[taskStatusId];

                if (correctStatusName && task.status_name !== correctStatusName) {
                    console.log(`[KanbanManager] üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ${task.id}: "${task.status_name}" -> "${correctStatusName}"`);
                    task.status_name = correctStatusName;
                    fixedCount++;
                }
            });

            if (fixedCount > 0) {
                console.log(`[KanbanManager] ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤`);
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                this.renderKanbanBoard(this.tasksData);
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ Kanban –¥–æ—Å–∫–∏
     */
    updateKanbanStats(tasks) {
        console.log('[KanbanManager] üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ Kanban');

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–µ)
        const activeTasks = tasks.filter(task => !task.status_is_closed);

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date();
        const todayStr = today.toISOString().split('T')[0];
        const completedToday = tasks.filter(task => {
            if (!task.status_is_closed) return false;
            const updatedDate = new Date(task.updated_on);
            const updatedStr = updatedDate.toISOString().split('T')[0];
            return updatedStr === todayStr;
        });

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Å due_date –≤ –ø—Ä–æ—à–ª–æ–º)
        const overdueTasks = tasks.filter(task => {
            if (!task.due_date) return false;
            const dueDate = new Date(task.due_date);
            const now = new Date();
            return dueDate < now && !task.status_is_closed;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const activeCountElement = document.getElementById('kanban-active-count');
        const completedTodayElement = document.getElementById('kanban-completed-today');
        const overdueCountElement = document.getElementById('kanban-overdue-count');

        if (activeCountElement) {
            activeCountElement.textContent = activeTasks.length;
        }
        if (completedTodayElement) {
            completedTodayElement.textContent = completedToday.length;
        }
        if (overdueCountElement) {
            overdueCountElement.textContent = overdueTasks.length;
        }

        console.log('[KanbanManager] ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
            active: activeTasks.length,
            completedToday: completedToday.length,
            overdue: overdueTasks.length
        });
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    testStatusMapping() {
        console.log('[KanbanManager] üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
        const allColumns = document.querySelectorAll('.kanban-column-content');
        console.log('[KanbanManager] üìã –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏:');
        allColumns.forEach((col, index) => {
            const statusId = col.getAttribute('data-status-id');
            const columnTitle = col.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();
            console.log(`  ${index + 1}. ID: ${statusId}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${columnTitle}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ
        if (this.tasksData && this.tasksData.length > 0) {
            console.log('[KanbanManager] üìã –ó–∞–¥–∞—á–∏ –≤ –∫—ç—à–µ:');
            this.tasksData.forEach((task, index) => {
                console.log(`  ${index + 1}. ID: ${task.id}, –°—Ç–∞—Ç—É—Å: "${task.status_name}" (ID: ${task.status_id})`);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        console.log('[KanbanManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:');
        if (this.tasksData) {
            this.tasksData.forEach(task => {
                const targetColumn = document.querySelector(`[data-status-id="${task.status_id}"]`);
                const columnTitle = targetColumn?.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim();

                if (targetColumn) {
                    console.log(`  ‚úÖ –ó–∞–¥–∞—á–∞ ${task.id}: "${task.status_name}" -> "${columnTitle}"`);
                } else {
                    console.log(`  ‚ùå –ó–∞–¥–∞—á–∞ ${task.id}: "${task.status_name}" -> –ö–û–õ–û–ù–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê`);
                }
            });
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
    refreshData() {
        console.log('[KanbanManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Kanban');
        this.clearCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.loadKanbanDataOptimized();
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
     */
    async forceRefresh() {
        console.log('[KanbanManager] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Kanban');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.showKanbanLoading();
        this.isLoading = true;

        try {
            // –û—á–∏—â–∞–µ–º –∫—ç—à
            this.clearCache();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
            await this.loadKanbanDataOptimized();

            console.log('[KanbanManager] ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        } finally {
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.hideKanbanLoading();
            this.isLoading = false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    getLoadingState() {
        return this.isLoading;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    getCacheStats() {
        const now = Date.now();
        const cacheAge = this.cache.lastUpdate ? now - this.cache.lastUpdate : 0;
        const isValid = this.isCacheValid();

        return {
            hasTasks: !!this.cache.tasks,
            hasStatuses: !!this.cache.statuses,
            hasCompletedTasks: !!this.cache.completedTasks,
            lastUpdate: this.cache.lastUpdate,
            cacheAge: cacheAge,
            isValid: isValid,
            tasksCount: this.cache.tasks ? this.cache.tasks.length : 0,
            statusesCount: this.cache.statuses ? this.cache.statuses.length : 0
        };
    }

    applyFilters(filters) {
        this.filters = { ...this.filters, ...filters };
        if (this.currentView === 'kanban') {
            this.loadKanbanData();
        }
    }

        /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drag & Drop
     */
    initDragAndDrop() {
        try {
            console.log('[KanbanManager] üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag & drop');

            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á
            const cards = document.querySelectorAll('.kanban-card');
            const dropZones = document.querySelectorAll('.kanban-column-content');

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
            cards.forEach(card => {
                card.setAttribute('draggable', true);
                card.addEventListener('dragstart', this.handleDragStart.bind(this));
                card.addEventListener('dragend', this.handleDragEnd.bind(this));
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–æ–Ω —Å–±—Ä–æ—Å–∞
            dropZones.forEach(zone => {
                zone.addEventListener('dragover', this.handleDragOver.bind(this));
                zone.addEventListener('dragenter', this.handleDragEnter.bind(this));
                zone.addEventListener('dragleave', this.handleDragLeave.bind(this));
                zone.addEventListener('drop', this.handleDrop.bind(this));
            });

            console.log('[KanbanManager] ‚úÖ Drag & drop –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag & drop:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragStart(event) {
        try {
            console.log('[KanbanManager] üéØ handleDragStart –≤—ã–∑–≤–∞–Ω');
            console.log('[KanbanManager] üìã event.target:', event.target);
            console.log('[KanbanManager] üìã event.target.tagName:', event.target.tagName);
            console.log('[KanbanManager] üìã event.target.className:', event.target.className);

            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å data-task-id (–∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏)
            const taskCard = event.target.closest('[data-task-id]');
            console.log('[KanbanManager] üìã taskCard –Ω–∞–π–¥–µ–Ω:', taskCard);

            const taskId = taskCard ? taskCard.getAttribute('data-task-id') : null;
            console.log('[KanbanManager] üìã taskId:', taskId);

            if (!taskId) {
                console.error('[KanbanManager] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è');
                console.error('[KanbanManager] üìã event.target:', event.target);
                console.error('[KanbanManager] üìã event.target.closest("[data-task-id]"):', event.target.closest('[data-task-id]'));
                event.preventDefault();
                return;
            }

            const taskTitle = taskCard.querySelector('.kanban-card-subject')?.textContent || `–ó–∞–¥–∞—á–∞ #${taskId}`;

            console.log('[KanbanManager] üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dataTransfer...');
            event.dataTransfer.setData('text/plain', taskId);
            event.dataTransfer.setData('text/html', taskTitle);
            event.dataTransfer.effectAllowed = 'move';

            taskCard.classList.add('dragging');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            this.showNotification(`–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ: ${taskTitle}`, 'info');

            console.log(`[KanbanManager] üéØ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ #${taskId}: ${taskTitle}`);
            console.log(`[KanbanManager] üìã DataTransfer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: text/plain = "${taskId}"`);
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –≤ handleDragStart:', error);
            event.preventDefault();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragEnd(event) {
        console.log('[KanbanManager] ‚úÖ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ drag-—Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.clearAllDragStates();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            this.clearAllDragStates();
        }, 100);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞–¥ –∑–æ–Ω–æ–π
     */
    handleDragOver(event) {
        event.preventDefault();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å –≤ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É
        const dropZone = event.currentTarget;
        const newStatusId = dropZone.getAttribute('data-status-id');

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        const draggingCard = document.querySelector('.kanban-card.dragging');
        if (draggingCard) {
            const currentColumn = draggingCard.closest('[data-status-id]');
            const currentStatusId = currentColumn ? currentColumn.getAttribute('data-status-id') : null;

            // –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å—ã –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const currentStatusStr = String(currentStatusId);
            const newStatusStr = String(newStatusId);

            if (currentStatusStr === newStatusStr) {
                // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞ –∂–µ –∫–æ–ª–æ–Ω–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                dropZone.classList.add('drag-same-column');
                dropZone.classList.remove('drag-over');
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –∫–æ–ª–æ–Ω–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                dropZone.classList.add('drag-over');
                dropZone.classList.remove('drag-same-column');
            }
        } else {
            // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            dropZone.classList.add('drag-over');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∑–æ–Ω—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragEnter(event) {
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ handleDragOver –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        this.handleDragOver(event);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–æ–Ω—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragLeave(event) {
        const dropZone = event.currentTarget;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –∑–æ–Ω—É (–Ω–µ –ø–µ—Ä–µ—à–ª–∞ –Ω–∞ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        if (!dropZone.contains(event.relatedTarget)) {
            dropZone.classList.remove('drag-over');
            dropZone.classList.remove('drag-same-column');
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö drag-—Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    clearAllDragStates() {
        console.log('[KanbanManager] üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö drag-—Å–æ—Å—Ç–æ—è–Ω–∏–π');

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã drag-over –∏ drag-same-column
        const allDropZones = document.querySelectorAll('.kanban-column-content');
        allDropZones.forEach(zone => {
            zone.classList.remove('drag-over');
            zone.classList.remove('drag-same-column');
        });

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å dragging —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        const allCards = document.querySelectorAll('.kanban-card');
        allCards.forEach(card => {
            card.classList.remove('dragging');
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–¥–∞—á–∏
     */
    async handleDrop(event) {
        console.log('[KanbanManager] üéØ handleDrop –≤—ã–∑–≤–∞–Ω');
        console.log('[KanbanManager] üìã event.dataTransfer:', event.dataTransfer);
        console.log('[KanbanManager] üìã event.dataTransfer.types:', event.dataTransfer.types);

        event.preventDefault();
        const dropZone = event.currentTarget;
        const taskId = event.dataTransfer.getData('text/plain');
        const newStatusId = dropZone.getAttribute('data-status-id');

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (this._isProcessingDrop) {
            console.log('[KanbanManager] ‚ö†Ô∏è Drop —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤');
            return;
        }
        this._isProcessingDrop = true;

        // –≠–ö–°–ü–†–ï–°–°-–ü–†–û–í–ï–†–ö–ê: –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        const quickTaskCard = document.querySelector(`[data-task-id="${taskId}"]`);
        const quickCurrentColumn = quickTaskCard ? quickTaskCard.closest('[data-status-id]') : null;
        const quickCurrentStatusId = quickCurrentColumn ? quickCurrentColumn.getAttribute('data-status-id') : null;

        console.log(`[KanbanManager] ‚ö° –≠–ö–°–ü–†–ï–°–°-–ü–†–û–í–ï–†–ö–ê: —Ç–µ–∫—É—â–∏–π=${quickCurrentStatusId}, –Ω–æ–≤—ã–π=${newStatusId}`);

        if (quickCurrentStatusId && String(quickCurrentStatusId) === String(newStatusId)) {
            console.log(`[KanbanManager] ‚ö° –≠–ö–°–ü–†–ï–°–°-–ü–†–û–í–ï–†–ö–ê: —Å—Ç–∞—Ç—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é`);
            this.clearAllDragStates();
            this.showNotification(`–ó–∞–¥–∞—á–∞ #${taskId} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Å—Ç–∞—Ç—É—Å–µ`, 'info');
            this._isProcessingDrop = false;
            return;
        }

        console.log('[KanbanManager] üìã taskId –∏–∑ dataTransfer:', taskId);
        console.log('[KanbanManager] üìã newStatusId –∏–∑ dropZone:', newStatusId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!taskId) {
            console.error('[KanbanManager] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–¥–∞—á–∏ –∏–∑ dataTransfer');
            console.error('[KanbanManager] üìã event.dataTransfer.types:', event.dataTransfer.types);
            console.error('[KanbanManager] üìã –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å text/html:', event.dataTransfer.getData('text/html'));
            this.showErrorMessage('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
            this._isProcessingDrop = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            return;
        }

        if (!newStatusId) {
            console.error('[KanbanManager] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ dropZone');
            this.showErrorMessage('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å');
            this._isProcessingDrop = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –≤ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É
        console.log('[KanbanManager] üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏ —Å ID:', taskId);

        // –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–∞–Ω–Ω—ã–º ID (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        const allTaskCards = document.querySelectorAll(`[data-task-id="${taskId}"]`);
        console.log('[KanbanManager] üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å ID', taskId, ':', allTaskCards.length);

        // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        const taskCard = allTaskCards[0];
        console.log('[KanbanManager] üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É:', taskCard);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–ª–∞—Å—Å–æ–º dragging
        const draggingCard = document.querySelector('.kanban-card.dragging');
        console.log('[KanbanManager] üîç –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–ª–∞—Å—Å–æ–º dragging:', draggingCard);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º dragging –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ID
        const finalTaskCard = (draggingCard && draggingCard.getAttribute('data-task-id') === taskId) ? draggingCard : taskCard;
        console.log('[KanbanManager] üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalTaskCard);

        if (finalTaskCard) {
            const currentColumn = finalTaskCard.closest('[data-status-id]');
            console.log('[KanbanManager] üîç –¢–µ–∫—É—â–∞—è –∫–æ–ª–æ–Ω–∫–∞:', currentColumn);

            const currentStatusId = currentColumn ? currentColumn.getAttribute('data-status-id') : null;
            console.log('[KanbanManager] üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', currentStatusId, '(—Ç–∏–ø:', typeof currentStatusId, ')');
            console.log('[KanbanManager] üìã –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', newStatusId, '(—Ç–∏–ø:', typeof newStatusId, ')');

            // –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å—ã –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const currentStatusStr = String(currentStatusId);
            const newStatusStr = String(newStatusId);

            console.log('[KanbanManager] üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ (—Å—Ç—Ä–æ–∫–∏):', {
                currentStatusStr,
                newStatusStr,
                —Ä–∞–≤–Ω—ã: currentStatusStr === newStatusStr,
                —Å—Ç—Ä–æ–≥–æ–†–∞–≤–Ω—ã: currentStatusId === newStatusId
            });

            if (currentStatusStr === newStatusStr) {
                console.log('[KanbanManager] ‚ö†Ô∏è –°–¢–ê–¢–£–°–´ –û–î–ò–ù–ê–ö–û–í–´–ï - –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é');
                console.log('[KanbanManager] ‚ö†Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ handleDrop');

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ drag-—Å–æ—Å—Ç–æ—è–Ω–∏—è
                this.clearAllDragStates();

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                this.showNotification(`–ó–∞–¥–∞—á–∞ #${taskId} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Å—Ç–∞—Ç—É—Å–µ`, 'info');

                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                this._isProcessingDrop = false;
                console.log('[KanbanManager] ‚ö†Ô∏è RETURN - —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∑–¥–µ—Å—å');
                return;
            } else {
                console.log('[KanbanManager] ‚úÖ –°–¢–ê–¢–£–°–´ –†–ê–ó–ù–´–ï - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é');
            }
        } else {
            console.log('[KanbanManager] ‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ –ù–ï –ù–ê–ô–î–ï–ù–ê - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é');
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏
        const columnTitle = dropZone.closest('.kanban-column')?.querySelector('.kanban-column-title')?.textContent?.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';

        console.log(`[KanbanManager] üéØ –°–±—Ä–æ—Å –∑–∞–¥–∞—á–∏ #${taskId} –≤ —Å—Ç–∞—Ç—É—Å ${newStatusId} (${columnTitle})`);
        console.log(`[KanbanManager] üìã DataTransfer –ø–æ–ª—É—á–µ–Ω: text/plain = "${taskId}"`);

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ drag-—Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.clearAllDragStates();

        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
        const taskCardAfterCleanup = document.querySelector(`[data-task-id="${taskId}"]`);
        console.log('[KanbanManager] üîç –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π:', taskCardAfterCleanup);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const cardForUpdate = taskCardAfterCleanup || finalTaskCard;
        if (cardForUpdate) {
            cardForUpdate.classList.add('updating');
            this.showUpdateIndicator(cardForUpdate);
            console.log('[KanbanManager] ‚è≥ –ü–æ–∫–∞–∑–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:', cardForUpdate);
        } else {
            console.log('[KanbanManager] ‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Redmine
            const success = await this.updateTaskStatus(taskId, newStatusId);
            console.log(`[KanbanManager] üìã –†–µ–∑—É–ª—å—Ç–∞—Ç updateTaskStatus –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}:`, success);

            if (success) {
                console.log(`[KanbanManager] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É`);
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                if (taskCard) {
                    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                    const targetColumn = document.querySelector(`[data-status-id="${newStatusId}"]`);

                    if (targetColumn) {
                        console.log(`[KanbanManager] üéØ –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${newStatusId}`);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                        taskCard.setAttribute('data-status-id', newStatusId);
                        taskCard.setAttribute('data-status-name', columnTitle);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
                        const statusElement = taskCard.querySelector('.task-status');
                        if (statusElement) {
                            statusElement.textContent = columnTitle;
                            statusElement.className = `task-status status-${newStatusId}`;
                        }

                        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
                        this.moveCardWithAnimation(taskCard, targetColumn);

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
                        this.updateColumnCounts();

                        this.showSuccessMessage(`–ó–∞–¥–∞—á–∞ #${taskId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "${columnTitle}"`);
                        console.log(`[KanbanManager] ‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å ${newStatusId} (${columnTitle})`);

                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
                        this.updateTaskInCache(taskId, newStatusId, columnTitle);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å
                        setTimeout(() => {
                            const movedCard = document.querySelector(`[data-task-id="${taskId}"]`);
                            if (movedCard && movedCard.closest(`[data-status-id="${newStatusId}"]`)) {
                                console.log(`[KanbanManager] ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ #${taskId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫—É ${newStatusId}`);
                            } else {
                                console.warn(`[KanbanManager] ‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ ${newStatusId}`);
                            }
                        }, 500);
                    } else {
                        console.warn(`[KanbanManager] ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${newStatusId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ dropZone –∫–∞–∫ fallback
                        this.moveCardWithAnimation(taskCard, dropZone);
                        this.updateColumnCounts();
                    }

                    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —Å—Ç–∞—Ç—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    const closedStatusIds = [5, 6, 14]; // ID –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: –ó–∞–∫—Ä—ã—Ç–∞, –û—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞
                    if (closedStatusIds.includes(parseInt(newStatusId))) {
                        console.log(`[KanbanManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —Å—Ç–∞—Ç—É—Å ${newStatusId}`);
                        setTimeout(() => {
                            this.loadCompletedTasks();
                        }, 1000);
                    }
                }
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #${taskId}`);
                // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ updateTaskStatus —É–∂–µ –ø–æ–∫–∞–∑–∞–ª –æ—à–∏–±–∫—É
            }
        } catch (error) {
            console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #${taskId}:`, error);
            this.showErrorMessage(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
        } finally {
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (taskCard) {
                taskCard.classList.remove('updating');
                this.hideUpdateIndicator(taskCard);
            }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this._isProcessingDrop = false;
            console.log('[KanbanManager] üèÅ handleDrop –∑–∞–≤–µ—Ä—à–µ–Ω, —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Redmine
     */
    async updateTaskStatus(taskId, newStatusId) {
        console.log(`[KanbanManager] üîÑ updateTaskStatus –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newStatusId}`);

        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—â—ë —Ä–∞–∑ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
        const taskCard = document.querySelector(`[data-task-id="${taskId}"]`);
        if (taskCard) {
            const currentColumn = taskCard.closest('[data-status-id]');
            const currentStatusId = currentColumn ? currentColumn.getAttribute('data-status-id') : null;

            console.log(`[KanbanManager] üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ updateTaskStatus:`);
            console.log(`[KanbanManager] üîÑ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${currentStatusId}, –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newStatusId}`);

            if (String(currentStatusId) === String(newStatusId)) {
                console.log(`[KanbanManager] ‚ö†Ô∏è –î–£–ë–õ–ò–†–£–Æ–©–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—Ç–∞—Ç—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É`);
                this.showNotification(`–ó–∞–¥–∞—á–∞ #${taskId} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ ${newStatusId}`, 'info');
                return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        const updateKey = `updating_${taskId}`;
        if (this[updateKey]) {
            console.log(`[KanbanManager] ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #${taskId} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...`);
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            while (this[updateKey]) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            console.log(`[KanbanManager] ‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this[updateKey] = true;

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...', 'info');

            const response = await fetch(`/tasks/api/task/${taskId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify({
                    status_id: newStatusId
                })
            });

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            let result;
            try {
                result = await response.json();
                console.log(`[KanbanManager] üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}:`, result);
            } catch (jsonError) {
                console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞:`, jsonError);
                throw new Error(`HTTP ${response.status}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞`);
            }

            if (!response.ok) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ JSON
                if (result && result.error) {
                    throw new Error(`HTTP ${response.status}: ${result.error}`);
                } else {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
            }

            if (result.success) {
                console.log(`[KanbanManager] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #${taskId} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ Redmine`);
                this.showNotification(`–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #${taskId} –æ–±–Ω–æ–≤–ª—ë–Ω`, 'success');
                return true;
            } else {
                const errorMessage = result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${errorMessage}`);
                console.error(`[KanbanManager] üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, result);
                this.showErrorMessage(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${errorMessage}`);
                return false;
            }
        } catch (error) {
            console.error(`[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:`, error);
            this.showErrorMessage(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
            return false;
        } finally {
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this[updateKey] = false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
     */
    getCSRFToken() {
        const token = document.querySelector('meta[name="csrf-token"]');
        return token ? token.getAttribute('content') : '';
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    moveCardWithAnimation(card, targetZone) {
        console.log(`[KanbanManager] üéØ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∑–æ–Ω—É:`, targetZone);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        const originalTransition = card.style.transition;
        const originalTransform = card.style.transform;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        card.style.transition = 'all 0.3s ease';
        card.style.transform = 'scale(1.05)';
        card.style.opacity = '0.8';

        setTimeout(() => {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            targetZone.appendChild(card);

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            card.style.transform = 'scale(1)';
            card.style.opacity = '1';

            setTimeout(() => {
                card.style.transition = originalTransition;
                card.style.transform = originalTransform;
            }, 300);

            console.log(`[KanbanManager] ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É`);
        }, 150);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    showUpdateIndicator(card) {
        const indicator = document.createElement('div');
        indicator.className = 'update-indicator';
        indicator.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        card.appendChild(indicator);
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    hideUpdateIndicator(card) {
        const indicator = card.querySelector('.update-indicator');
        if (indicator) {
            indicator.remove();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccessMessage(message) {
        try {
            this.showNotification(message, 'success');
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ:', error);
            console.log('[KanbanManager] üì¢ SUCCESS:', message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showErrorMessage(message) {
        try {
            this.showNotification(message, 'error');
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
            console.error('[KanbanManager] üì¢ ERROR:', message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        try {
            const notification = document.createElement('div');
            notification.className = `kanban-notification ${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
                <span>${message}</span>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            let container = document.querySelector('.kanban-notifications');
            if (!container) {
                container = document.createElement('div');
                container.className = 'kanban-notifications';
                document.body.appendChild(container);
            }

            container.appendChild(notification);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                notification.classList.add('fade-out');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º console.log
            console.log(`[KanbanManager] üì¢ ${type.toUpperCase()}: ${message}`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
     */
    updateColumnCounts() {
        const columns = document.querySelectorAll('.kanban-column');

        columns.forEach(column => {
            const countElement = column.querySelector('.kanban-column-count');
            const taskCards = column.querySelectorAll('.kanban-card');

            if (countElement) {
                countElement.textContent = taskCards.length;
            }
        });
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    async loadStatusesOptimized() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤
        if (this.cache.statuses && this.isCacheValid()) {
            console.log('[KanbanManager] üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã');
            return this.cache.statuses;
        }

        try {
            console.log('[KanbanManager] üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤...');
            const response = await fetch('/tasks/get-my-tasks-statuses');

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const statuses = await response.json();

            if (!statuses.success) {
                throw new Error(statuses.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã');
            }

            // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
            this.cache.statuses = statuses.data;
            this.cache.lastUpdate = Date.now();

            console.log('[KanbanManager] ‚úÖ –°—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', statuses.data.length);
            console.log('[KanbanManager] üìã –î–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', statuses.data);
            return statuses.data;

        } catch (error) {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
     */
    forceUpdateColumnOrder() {
        console.log('[KanbanManager] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫...');

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        this.createDynamicColumns().then(() => {
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.loadKanbanDataOptimized().then(() => {
                console.log('[KanbanManager] ‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');
            });
        }).catch(error => {
            console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫:', error);
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.forceUpdateKanbanColumns = function() {
    if (window.kanbanManager) {
        window.kanbanManager.forceUpdateColumnOrder();
    } else {
        console.error('[Global] ‚ùå KanbanManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.resetKanbanColumns = function() {
    if (window.kanbanManager) {
        window.kanbanManager.clearCache();
        window.kanbanManager.forceUpdateColumnOrder();
    } else {
        console.error('[Global] ‚ùå KanbanManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KanbanManager
function initKanbanManager() {
    try {
        console.log('[KanbanManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä KanbanManager
        window.kanbanManager = new KanbanManager();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        window.kanbanManager.init();

        console.log('[KanbanManager] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
        console.error('[KanbanManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initKanbanManager();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ drag-—Å–æ—Å—Ç–æ—è–Ω–∏–π
window.emergencyDragCleanup = function() {
    console.log('[Emergency] üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ drag-—Å–æ—Å—Ç–æ—è–Ω–∏–π...');

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã drag-over –∏ drag-same-column
    const allDropZones = document.querySelectorAll('.kanban-column-content');
    allDropZones.forEach(zone => {
        zone.classList.remove('drag-over');
        zone.classList.remove('drag-same-column');
        zone.style.backgroundColor = '';
        zone.style.border = '';
    });

    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å dragging —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const allCards = document.querySelectorAll('.kanban-card');
    allCards.forEach(card => {
        card.classList.remove('dragging');
        card.style.opacity = '';
    });

    console.log('[Emergency] ‚úÖ –í—Å–µ drag-—Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—á–∏—â–µ–Ω—ã');
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
window.debugKanbanCards = function() {
    console.log('[Debug] üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ Kanban...');

    const allCards = document.querySelectorAll('.kanban-card[data-task-id]');
    console.log(`[Debug] –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${allCards.length}`);

    allCards.forEach((card, index) => {
        const taskId = card.getAttribute('data-task-id');
        const column = card.closest('[data-status-id]');
        const statusId = column ? column.getAttribute('data-status-id') : '–ù–ï –ù–ê–ô–î–ï–ù';
        const columnTitle = column ? column.querySelector('.kanban-column-title')?.textContent?.trim() : '–ù–ï –ù–ê–ô–î–ï–ù';

        console.log(`[Debug] –ö–∞—Ä—Ç–æ—á–∫–∞ ${index + 1}:`, {
            taskId,
            statusId,
            columnTitle,
            element: card,
            column: column
        });
    });

    console.log('[Debug] ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
window.testTaskStatus = function(taskId) {
    console.log(`[Test] üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #${taskId}...`);

    const taskCard = document.querySelector(`[data-task-id="${taskId}"]`);
    if (!taskCard) {
        console.log(`[Test] ‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ #${taskId} –ù–ï –ù–ê–ô–î–ï–ù–ê`);
        return;
    }

    const currentColumn = taskCard.closest('[data-status-id]');
    const currentStatusId = currentColumn ? currentColumn.getAttribute('data-status-id') : null;
    const columnTitle = currentColumn ? currentColumn.querySelector('.kanban-column-title')?.textContent?.trim() : '–ù–ï –ù–ê–ô–î–ï–ù';

    console.log(`[Test] üìã –ó–∞–¥–∞—á–∞ #${taskId}:`, {
        currentStatusId: currentStatusId,
        currentStatusType: typeof currentStatusId,
        currentStatusString: String(currentStatusId),
        columnTitle: columnTitle,
        taskCard: taskCard,
        currentColumn: currentColumn
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    const allColumns = document.querySelectorAll('[data-status-id]');
    allColumns.forEach(column => {
        const statusId = column.getAttribute('data-status-id');
        const title = column.querySelector('.kanban-column-title')?.textContent?.trim();
        const isSame = String(currentStatusId) === String(statusId);

        console.log(`[Test] üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–ª–æ–Ω–∫–æ–π "${title}" (ID: ${statusId}): ${isSame ? '–û–î–ò–ù–ê–ö–û–í–´–ï' : '–†–ê–ó–ù–´–ï'}`);
    });
};
