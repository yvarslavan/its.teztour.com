/**
 * StatisticsPanel - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á
 */
class StatisticsPanel {
    constructor(eventBus, loadingManager, tasksAPI) {
        this.eventBus = eventBus;
        this.loadingManager = loadingManager;
        this.tasksAPI = tasksAPI;

        this.statisticsData = null;
        this.isInitialized = false;
        this.updateInterval = null;

        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.selectors = {
            totalTasks: '#total-tasks-summary, #total-tasks',
            openTasks: '#open-tasks',
            closedTasks: '#closed-db-tasks',
            pausedTasks: '#paused-tasks',
            breakdownCards: '.status-breakdown-card',
            totalBreakdown: '#total-breakdown',
            openBreakdown: '#open-breakdown',
            closedBreakdown: '#closed-breakdown',
            pausedBreakdown: '#paused-breakdown',
            expandButton: '#expandBreakdownBtn'
        };

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.handleStatisticsUpdate = this.handleStatisticsUpdate.bind(this);
        this.handleCardToggle = this.handleCardToggle.bind(this);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async init() {
        try {
            console.log('[StatisticsPanel] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

            this._setupEventListeners();
            this._initializeCardToggleButtons();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadStatistics();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
            this._setupAutoUpdate(30000);

            this.isInitialized = true;
            console.log('[StatisticsPanel] ‚úÖ –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

            this.eventBus.emit('statistics:initialized');

        } catch (error) {
            console.error('[StatisticsPanel] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.eventBus.emit('statistics:error', { error: error.message });
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async loadStatistics() {
        try {
            console.log('[StatisticsPanel] üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

            this._showLoadingState();
            this.loadingManager.show('statistics', '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API endpoint
            const response = await fetch('/tasks/get-my-tasks-statistics-optimized');

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.success || data.total_tasks !== undefined) {
                this.statisticsData = data;
                this._updateStatisticsDisplay(data);
                this.eventBus.emit('statistics:loaded', { data });
            } else {
                throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
            }

        } catch (error) {
            console.error('[StatisticsPanel] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            this._showErrorState();
            this.eventBus.emit('statistics:error', { error: error.message });
        } finally {
            this.loadingManager.hide('statistics');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    _updateStatisticsDisplay(stats) {
        console.log('[StatisticsPanel] üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', stats);

        // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this._hideLoadingState();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        const metrics = this._extractMetrics(stats);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this._animateAndUpdateValue(this.selectors.totalTasks, metrics.total);
        this._animateAndUpdateValue(this.selectors.openTasks, metrics.open);
        this._animateAndUpdateValue(this.selectors.closedTasks, metrics.closed);
        this._animateAndUpdateValue(this.selectors.pausedTasks, metrics.paused);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        this._updateCardBreakdowns(stats.statistics?.debug_status_counts || {}, metrics);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
        window.detailedStatusData = stats.statistics?.debug_status_counts || {};

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        this._updateExpandButton();

        console.log('[StatisticsPanel] ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', metrics);
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    _extractMetrics(stats) {
        const total = stats.total_tasks || stats.total || 0;
        const newTasks = stats.new_tasks || stats.new || 0;
        const inProgressTasks = stats.in_progress_tasks || stats.in_progress || 0;
        const actuallyClosedTasks = stats.statistics?.additional_stats?.actually_closed_tasks || 0;

        return {
            total: total,
            open: newTasks,        // API –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç NEW –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–µ
            paused: inProgressTasks, // API –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç IN_PROGRESS –∫–∞–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
            closed: actuallyClosedTasks
        };
    }

    /**
     * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    _animateAndUpdateValue(selector, value) {
        const elements = $(selector);
        elements.each(function() {
            const $element = $(this);
            $element.addClass('animate-count').text(value);
            setTimeout(() => $element.removeClass('animate-count'), 600);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
     */
    _updateCardBreakdowns(statusCounts, metrics) {
        console.log('[StatisticsPanel] üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫...');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        this._updateCardBreakdown(
            this.selectors.openBreakdown,
            statusCounts,
            ['New', 'Open', '–ù–æ–≤–∞—è', '–ù–æ–≤—ã–π', '–û—Ç–∫—Ä—ã—Ç–∞', '–û—Ç–∫—Ä—ã—Ç', '–û—Ç–∫—Ä—ã—Ç–∞—è']
        );

        this._updateCardBreakdown(
            this.selectors.closedBreakdown,
            statusCounts,
            ['Closed', 'Rejected', 'Redirected', '–ó–∞–∫—Ä—ã—Ç–∞', '–ó–∞–∫—Ä—ã—Ç', '–ó–∞–∫—Ä—ã—Ç–∞—è',
             '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞', '–û—Ç–∫–ª–æ–Ω–µ–Ω', '–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω–∞—è', '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞', '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω']
        );

        this._updateCardBreakdown(
            this.selectors.pausedBreakdown,
            statusCounts,
            ['Paused', 'Frozen', 'In Progress', 'Executed', 'On testing',
             'The request specification', 'On the coordination', 'Tested',
             '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞', '–ó–∞–º–æ—Ä–æ–∂–µ–Ω',
             '–í —Ä–∞–±–æ—Ç–µ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–í—ã–ø–æ–ª–Ω–µ–Ω', '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
             '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ', '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ', '–£—Ç–æ—á–Ω–µ–Ω–∏–µ',
             '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞', '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω']
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã)
        this._updateCardBreakdownAll(this.selectors.totalBreakdown, statusCounts);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            $('.card-breakdown').addClass('collapsed').removeClass('expanded');
            $('.card-toggle-btn').removeClass('expanded');
            console.log('[StatisticsPanel] üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–±—Ä–æ—à–µ–Ω–æ');
        }, 100);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    _updateCardBreakdown(containerSelector, statusCounts, relevantStatuses) {
        const container = $(containerSelector);

        if (container.length === 0) {
            console.warn(`[StatisticsPanel] ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerSelector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        container.empty();

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        const filteredStatuses = this._filterStatusesByRelevance(statusCounts, relevantStatuses);

        if (filteredStatuses.length === 0) {
            container.html('<div class="breakdown-item"><span class="breakdown-status-name">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span></div>');
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        filteredStatuses.sort((a, b) => b.count - a.count);

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        filteredStatuses.forEach(item => {
            const breakdownItem = $(`
                <div class="breakdown-item">
                    <span class="breakdown-status-name">${this._escapeHtml(item.name)}</span>
                    <span class="breakdown-status-count">${item.count}</span>
                </div>
            `);
            container.append(breakdownItem);
        });

        console.log(`[StatisticsPanel] ‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${containerSelector}:`, filteredStatuses.length);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã)
     */
    _updateCardBreakdownAll(containerSelector, statusCounts) {
        const container = $(containerSelector);

        if (container.length === 0) {
            console.warn(`[StatisticsPanel] ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerSelector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        container.empty();

        if (!statusCounts || Object.keys(statusCounts).length === 0) {
            container.html('<div class="breakdown-item"><span class="breakdown-status-name">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span></div>');
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        const allStatuses = Object.entries(statusCounts)
            .map(([name, count]) => ({ name, count }))
            .filter(item => item.count > 0)
            .sort((a, b) => b.count - a.count);

        if (allStatuses.length === 0) {
            container.html('<div class="breakdown-item"><span class="breakdown-status-name">–ù–µ—Ç –∑–∞–¥–∞—á</span></div>');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        allStatuses.forEach(item => {
            const breakdownItem = $(`
                <div class="breakdown-item">
                    <span class="breakdown-status-name">${this._escapeHtml(item.name)}</span>
                    <span class="breakdown-status-count">${item.count}</span>
                </div>
            `);
            container.append(breakdownItem);
        });

        console.log(`[StatisticsPanel] ‚úÖ –ü–æ–ª–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`, allStatuses.length);
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
     */
    _filterStatusesByRelevance(statusCounts, relevantStatuses) {
        const allStatusEntries = Object.entries(statusCounts)
            .map(([name, count]) => ({ name, count }))
            .filter(item => item.count > 0);

        return allStatusEntries.filter(item => {
            const statusName = item.name.toLowerCase();
            return relevantStatuses.some(relevantStatus => {
                const relevantLower = relevantStatus.toLowerCase();
                return statusName === relevantLower ||
                       statusName.includes(relevantLower) ||
                       relevantLower.includes(statusName);
            });
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    _showLoadingState() {
        $(this.selectors.breakdownCards).addClass('loading');
        $('#total-tasks-summary').addClass('loading').text('...');
        $('#total-tasks, #open-tasks, #closed-db-tasks, #paused-tasks').text('...');
    }

    /**
     * –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    _hideLoadingState() {
        $(this.selectors.breakdownCards).removeClass('loading');
        $('#total-tasks-summary').removeClass('loading');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    _showErrorState() {
        this._hideLoadingState();
        $('#total-tasks-summary').text('–û—à–∏–±–∫–∞');
        $('#total-tasks, #open-tasks, #closed-db-tasks, #paused-tasks').text('–û—à–∏–±–∫–∞');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
     */
    _updateExpandButton() {
        const expandButton = $(this.selectors.expandButton);
        if (expandButton.length > 0) {
            const hasData = window.detailedStatusData && Object.keys(window.detailedStatusData).length > 0;
            expandButton.toggleClass('disabled', !hasData).prop('disabled', !hasData);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    _initializeCardToggleButtons() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        $(document).on('click', '.card-toggle-btn', this.handleCardToggle);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        $('.card-breakdown').addClass('collapsed').removeClass('expanded');
        $('.card-toggle-btn').removeClass('expanded');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    handleCardToggle(event) {
        event.preventDefault();

        const button = $(event.currentTarget);
        const card = button.closest('.status-breakdown-card');
        const breakdown = card.find('.card-breakdown');

        const isExpanded = breakdown.hasClass('expanded');

        if (isExpanded) {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            breakdown.removeClass('expanded').addClass('collapsed');
            button.removeClass('expanded');
        } else {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            breakdown.removeClass('collapsed').addClass('expanded');
            button.addClass('expanded');
        }

        console.log('[StatisticsPanel] üîÑ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞:', isExpanded ? '—Å–≤–µ—Ä–Ω—É—Ç–∞' : '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    _setupAutoUpdate(interval) {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }

        this.updateInterval = setInterval(() => {
            if (this.isInitialized) {
                console.log('[StatisticsPanel] üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
                this.loadStatistics();
            }
        }, interval);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    _setupEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.eventBus.on('table:dataLoaded', this.handleStatisticsUpdate);
        this.eventBus.on('filters:changed', this.handleStatisticsUpdate);
        this.eventBus.on('statistics:refresh', () => {
            this.loadStatistics();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    handleStatisticsUpdate(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        setTimeout(() => {
            this.loadStatistics();
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
     */
    _escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getCurrentData() {
        return this.statisticsData;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    refresh() {
        console.log('[StatisticsPanel] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return this.loadStatistics();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }

        $(document).off('click', '.card-toggle-btn', this.handleCardToggle);

        this.isInitialized = false;
        console.log('[StatisticsPanel] üóëÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—á–∏—â–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = StatisticsPanel;
} else if (typeof window !== 'undefined') {
    window.StatisticsPanel = StatisticsPanel;
}
