/**
 * FiltersPanel - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 */
class FiltersPanel {
    constructor(eventBus, loadingManager, tasksAPI) {
        this.eventBus = eventBus;
        this.loadingManager = loadingManager;
        this.tasksAPI = tasksAPI;

        this.filtersData = null;
        this.isInitialized = false;
        this.isLoading = false;

        // –ö—ç—à —Ñ–∏–ª—å—Ç—Ä–æ–≤ (5 –º–∏–Ω—É—Ç)
        this.cache = {
            data: null,
            timestamp: null,
            isValid: () => {
                const now = Date.now();
                const validTime = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
                return this.cache.data &&
                       this.cache.timestamp &&
                       (now - this.cache.timestamp) < validTime;
            }
        };

        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.selectors = {
            statusFilter: '#status-filter',
            projectFilter: '#project-filter',
            priorityFilter: '#priority-filter',
            searchFilter: '#search-filter',
            clearButtons: '.clear-filter-btn',
            filterContainers: '.filter-container'
        };

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.handleFilterChange = this.handleFilterChange.bind(this);
        this.handleClearFilter = this.handleClearFilter.bind(this);
        this.handleSearchInput = this.handleSearchInput.bind(this);
        this.debouncedSearch = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async init() {
        try {
            console.log('[FiltersPanel] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º debounced –ø–æ–∏—Å–∫
            this.debouncedSearch = debounce(this.performSearch.bind(this), 500);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this._setupEventListeners();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            await this.loadFilters();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            this._initializeFilterState();

            this.isInitialized = true;
            console.log('[FiltersPanel] ‚úÖ –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

            this.eventBus.emit('filters:initialized');

        } catch (error) {
            console.error('[FiltersPanel] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.eventBus.emit('filters:error', { error: error.message });
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async loadFilters() {
        if (this.isLoading) {
            console.log('[FiltersPanel] –§–∏–ª—å—Ç—Ä—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.isValid()) {
            console.log('[FiltersPanel] üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã');
            this._updateFilterOptions(this.cache.data);
            return;
        }

        try {
            console.log('[FiltersPanel] üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
            this.isLoading = true;
            this._showLoadingIndicator(true);

            // –ü—Ä–æ–±—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API
            let response = await this._tryOptimizedAPI();

            if (!response) {
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API
                console.log('[FiltersPanel] üîÑ Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API...');
                response = await this._tryFallbackAPI();
            }

            if (response && response.success) {
                const filters = {
                    statuses: response.statuses || [],
                    projects: response.projects || [],
                    priorities: response.priorities || [],
                    hierarchical: response.hierarchical || false
                };

                // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                this.cache.data = filters;
                this.cache.timestamp = Date.now();
                this.filtersData = filters;

                this._updateFilterOptions(filters);
                this.eventBus.emit('filters:loaded', { filters });

                console.log('[FiltersPanel] ‚úÖ –§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                    statuses: filters.statuses.length,
                    projects: filters.projects.length,
                    priorities: filters.priorities.length
                });

            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
            }

        } catch (error) {
            console.error('[FiltersPanel] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            this._clearAndDisableFilters();
            this.eventBus.emit('filters:error', { error: error.message });
        } finally {
            this.isLoading = false;
            this._showLoadingIndicator(false);
        }
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API
     */
    async _tryOptimizedAPI() {
        try {
            const response = await fetch('/tasks/get-my-tasks-filters-optimized');
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    console.log('[FiltersPanel] ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —É—Å–ø–µ—à–µ–Ω');
                    return data;
                }
            }
        } catch (error) {
            console.warn('[FiltersPanel] ‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        }
        return null;
    }

    /**
     * Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API
     */
    async _tryFallbackAPI() {
        try {
            const response = await fetch('/tasks/get-my-tasks-filters-direct-api');
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    console.log('[FiltersPanel] ‚úÖ Fallback API —É—Å–ø–µ—à–µ–Ω');
                    return data;
                }
            }
        } catch (error) {
            console.warn('[FiltersPanel] ‚ö†Ô∏è Fallback API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        }
        return null;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    _updateFilterOptions(filters) {
        console.log('[FiltersPanel] üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤...');

        this._populateStandardSelect(this.selectors.statusFilter, filters.statuses, '–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã');
        this._populateStandardSelect(this.selectors.priorityFilter, filters.priorities, '–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã');
        this._populateProjectSelect(this.selectors.projectFilter, filters.projects, '–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã');

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –æ—á–∏—Å—Ç–∫–∏
        setTimeout(() => {
            this._updateAllClearButtons();
        }, 100);

        console.log('[FiltersPanel] ‚úÖ –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–∞
     */
    _populateStandardSelect(selector, options, defaultText) {
        const select = $(selector);
        if (!select.length) {
            console.warn(`[FiltersPanel] ‚ö†Ô∏è –°–µ–ª–µ–∫—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ–ø—Ü–∏—é
        select.empty().append(`<option value="">${defaultText}</option>`);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
        (options || []).forEach(opt => {
            // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
            let id = opt.id;
            if (typeof id === 'string') {
                const numId = parseInt(id, 10);
                if (!isNaN(numId)) {
                    id = numId;
                }
            }

            const option = $('<option></option>')
                .attr('value', id)
                .text(opt.name);

            select.append(option);
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –¥–µ—Ñ–æ–ª—Ç—É
        select.val('');
        select.closest('.filter-container').removeClass('has-value');

        console.log(`[FiltersPanel] ‚úÖ –°–µ–ª–µ–∫—Ç ${selector} –∑–∞–ø–æ–ª–Ω–µ–Ω: ${options.length} –æ–ø—Ü–∏–π`);
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
     */
    _populateProjectSelect(selector, options, defaultText) {
        const select = $(selector);
        if (!select.length) {
            console.warn(`[FiltersPanel] ‚ö†Ô∏è –°–µ–ª–µ–∫—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ–ø—Ü–∏—é
        select.empty().append(`<option value="">${defaultText}</option>`);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        const sortedProjects = (options || []).sort((a, b) => {
            const nameA = (a.original_name || a.name || '').toLowerCase();
            const nameB = (b.original_name || b.name || '').toLowerCase();
            return nameA.localeCompare(nameB);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã
        sortedProjects.forEach(opt => {
            let id = opt.id;
            if (typeof id === 'string') {
                const numId = parseInt(id, 10);
                if (!isNaN(numId)) {
                    id = numId;
                }
            }

            const displayName = opt.original_name || opt.name;
            const option = $('<option></option>')
                .attr('value', id)
                .attr('data-name', displayName.toLowerCase())
                .text(displayName);

            select.append(option);
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –¥–µ—Ñ–æ–ª—Ç—É
        select.val('');
        select.closest('.filter-container').removeClass('has-value');

        console.log(`[FiltersPanel] ‚úÖ –°–µ–ª–µ–∫—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω: ${sortedProjects.length} –æ–ø—Ü–∏–π`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    getCurrentFilters() {
        return {
            status: $(this.selectors.statusFilter).val() || '',
            project: $(this.selectors.projectFilter).val() || '',
            priority: $(this.selectors.priorityFilter).val() || '',
            search: $(this.selectors.searchFilter).val() || ''
        };
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    applyFilters(filters = {}) {
        console.log('[FiltersPanel] üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filters);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        if (filters.status !== undefined) {
            $(this.selectors.statusFilter).val(filters.status);
        }
        if (filters.project !== undefined) {
            $(this.selectors.projectFilter).val(filters.project);
        }
        if (filters.priority !== undefined) {
            $(this.selectors.priorityFilter).val(filters.priority);
        }
        if (filters.search !== undefined) {
            $(this.selectors.searchFilter).val(filters.search);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
        this._updateAllClearButtons();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.eventBus.emit('filters:changed', {
            filters: this.getCurrentFilters()
        });
    }

    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    resetAllFilters() {
        console.log('[FiltersPanel] üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤');

        $(this.selectors.statusFilter).val('');
        $(this.selectors.projectFilter).val('');
        $(this.selectors.priorityFilter).val('');
        $(this.selectors.searchFilter).val('');

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        $(this.selectors.filterContainers).removeClass('has-value');
        $(this.selectors.clearButtons).removeClass('show').hide();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.eventBus.emit('filters:changed', {
            filters: this.getCurrentFilters()
        });

        this.eventBus.emit('filters:reset');
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    performSearch(searchTerm) {
        console.log('[FiltersPanel] üîç –ü–æ–∏—Å–∫:', searchTerm);
        this.eventBus.emit('search:changed', { searchTerm });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    _setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        $(document).on('change', this.selectors.statusFilter, this.handleFilterChange);
        $(document).on('change', this.selectors.projectFilter, this.handleFilterChange);
        $(document).on('change', this.selectors.priorityFilter, this.handleFilterChange);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
        $(document).on('input', this.selectors.searchFilter, this.handleSearchInput);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—á–∏—Å—Ç–∫–∏
        $(document).on('click', this.selectors.clearButtons, this.handleClearFilter);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
        $(document).on('click', '#reset-all-filters', () => {
            this.resetAllFilters();
        });

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.eventBus.on('filters:refresh', () => {
            this.loadFilters();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
     */
    handleFilterChange(event) {
        const filter = $(event.target);
        const value = filter.val();
        const filterId = filter.attr('id');

        console.log('[FiltersPanel] üîÑ –§–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω:', filterId, '=', value);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        this._updateFilterVisibility(filter);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.loadingManager.show('table', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞...');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.eventBus.emit('filters:changed', {
            filters: this.getCurrentFilters()
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫
     */
    handleSearchInput(event) {
        const searchTerm = $(event.target).val();
        console.log('[FiltersPanel] üîç –í–≤–æ–¥ –ø–æ–∏—Å–∫–∞:', searchTerm);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounced –ø–æ–∏—Å–∫
        if (this.debouncedSearch) {
            this.debouncedSearch(searchTerm);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    handleClearFilter(event) {
        event.preventDefault();

        const button = $(event.target);
        const filterId = button.data('filter') || button.attr('data-filter');

        if (filterId) {
            const filterSelector = `#${filterId}`;
            const filter = $(filterSelector);

            console.log('[FiltersPanel] üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞:', filterId);

            filter.val('');
            this._updateFilterVisibility(filter);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            this.eventBus.emit('filters:changed', {
                filters: this.getCurrentFilters()
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    _updateFilterVisibility(filterElement) {
        const value = filterElement.val();
        const filterId = filterElement.attr('id');
        const clearBtnId = `#clear-${filterId.replace('-filter', '')}-filter`;
        const clearBtn = $(clearBtnId);
        const container = filterElement.closest('.filter-container');

        const hasValue = value && value !== '' && value !== 'null';

        if (hasValue) {
            clearBtn.addClass('show').css('display', 'flex');
            container.addClass('has-value');
        } else {
            clearBtn.removeClass('show').css('display', 'none');
            container.removeClass('has-value');
        }

        console.log(`[FiltersPanel] üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ ${clearBtnId}:`, hasValue ? '–ø–æ–∫–∞–∑–∞–Ω–∞' : '—Å–∫—Ä—ã—Ç–∞');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –æ—á–∏—Å—Ç–∫–∏
     */
    _updateAllClearButtons() {
        $(this.selectors.statusFilter).each((_, el) => this._updateFilterVisibility($(el)));
        $(this.selectors.projectFilter).each((_, el) => this._updateFilterVisibility($(el)));
        $(this.selectors.priorityFilter).each((_, el) => this._updateFilterVisibility($(el)));
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    _showLoadingIndicator(show) {
        const indicator = $('.filters-loading-indicator');
        if (show) {
            indicator.show();
            $(this.selectors.statusFilter + ', ' + this.selectors.projectFilter + ', ' + this.selectors.priorityFilter)
                .prop('disabled', true);
        } else {
            indicator.hide();
            $(this.selectors.statusFilter + ', ' + this.selectors.projectFilter + ', ' + this.selectors.priorityFilter)
                .prop('disabled', false);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    _clearAndDisableFilters() {
        console.log('[FiltersPanel] üö´ –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤');

        $(this.selectors.statusFilter + ', ' + this.selectors.projectFilter + ', ' + this.selectors.priorityFilter)
            .empty()
            .append('<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>')
            .prop('disabled', true);

        $(this.selectors.clearButtons).hide();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    _initializeFilterState() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        this.resetAllFilters();

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
        this._updateAllClearButtons();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    hasActiveFilters() {
        const filters = this.getCurrentFilters();
        return Object.values(filters).some(value => value && value !== '');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    getActiveFiltersCount() {
        const filters = this.getCurrentFilters();
        return Object.values(filters).filter(value => value && value !== '').length;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    getFiltersData() {
        return this.filtersData;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    refresh() {
        console.log('[FiltersPanel] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        this.cache.data = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
        return this.loadFilters();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        $(document).off('change', this.selectors.statusFilter, this.handleFilterChange);
        $(document).off('change', this.selectors.projectFilter, this.handleFilterChange);
        $(document).off('change', this.selectors.priorityFilter, this.handleFilterChange);
        $(document).off('input', this.selectors.searchFilter, this.handleSearchInput);
        $(document).off('click', this.selectors.clearButtons, this.handleClearFilter);

        this.isInitialized = false;
        console.log('[FiltersPanel] üóëÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—á–∏—â–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FiltersPanel;
} else if (typeof window !== 'undefined') {
    window.FiltersPanel = FiltersPanel;
}
