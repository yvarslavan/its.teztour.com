/**
 * LoadingManager - –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏–Ω–µ—Ä–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
 */
class LoadingManager {
  constructor(eventBus = null) {
    this.eventBus = eventBus;
    this.activeLoaders = new Set();
    this.containers = new Map();
    this.templates = new Map();

    // –¢–∏–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
    this.STATES = {
      INITIAL: 'initial',
      TABLE: 'table',
      STATISTICS: 'statistics',
      FILTERS: 'filters',
      SEARCH: 'search'
    };

    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  init() {
    this.setupContainers();
    this.setupTemplates();
    this.bindEvents();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  setupContainers() {
    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–µ—Ä
    this.containers.set(this.STATES.INITIAL, {
      selector: '#loading-spinner',
      type: 'overlay'
    });

    // –°–ø–∏–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    this.containers.set(this.STATES.TABLE, {
      selector: '#tasksTable_wrapper',
      type: 'inline'
    });

    // –°–ø–∏–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.containers.set(this.STATES.STATISTICS, {
      selector: '.status-breakdown-dashboard',
      type: 'inline'
    });

    // –°–ø–∏–Ω–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    this.containers.set(this.STATES.FILTERS, {
      selector: '.filters-section',
      type: 'inline'
    });

    // –°–ø–∏–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    this.containers.set(this.STATES.SEARCH, {
      selector: '.search-container',
      type: 'inline'
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  setupTemplates() {
    // –®–∞–±–ª–æ–Ω –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–µ—Ä–∞
    this.templates.set('overlay', (message) => `
      <div class="loading-overlay" data-loading-type="overlay">
        <div class="loading-content">
          <div class="loading-spinner">
            <i class="fas fa-cog fa-spin loading-icon"></i>
          </div>
          <div class="loading-text">
            <h3>${message}</h3>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</p>
          </div>
        </div>
      </div>
    `);

    // –®–∞–±–ª–æ–Ω inline —Å–ø–∏–Ω–µ—Ä–∞
    this.templates.set('inline', (message) => `
      <div class="loading-inline" data-loading-type="inline">
        <div class="loading-spinner-small">
          <i class="fas fa-spinner fa-spin loading-icon-small"></i>
        </div>
        <span class="loading-message">${message}</span>
      </div>
    `);

    // –®–∞–±–ª–æ–Ω DataTables —Å–ø–∏–Ω–µ—Ä–∞
    this.templates.set('datatable', (message) => `
      <div class="dt-processing" data-loading-type="datatable">
        <div class="dt-processing-content">
          <i class="fas fa-spinner fa-spin"></i>
          <span>${message}</span>
        </div>
      </div>
    `);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
   * @param {string} state - –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   */
  show(state, message = '–ó–∞–≥—Ä—É–∑–∫–∞...', options = {}) {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (this.activeLoaders.has(state)) {
      console.warn(`[LoadingManager] –°–æ—Å—Ç–æ—è–Ω–∏–µ ${state} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ`);
      return false;
    }

    const containerConfig = this.containers.get(state);
    if (!containerConfig) {
      console.error(`[LoadingManager] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);
      return false;
    }

    try {
      this.activeLoaders.add(state);
      this.renderLoader(state, message, containerConfig, options);

      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ EventBus
      if (this.eventBus) {
        this.eventBus.emit('loading:start', { state, message });
      }

      console.log(`[LoadingManager] –ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏–Ω–µ—Ä: ${state} - ${message}`);
      return true;

    } catch (error) {
      console.error(`[LoadingManager] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏–Ω–µ—Ä–∞ ${state}:`, error);
      this.activeLoaders.delete(state);
      return false;
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
   * @param {string} state - –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  hide(state) {
    if (!this.activeLoaders.has(state)) {
      console.warn(`[LoadingManager] –°–æ—Å—Ç–æ—è–Ω–∏–µ ${state} –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ`);
      return false;
    }

    try {
      this.activeLoaders.delete(state);
      this.removeLoader(state);

      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ EventBus
      if (this.eventBus) {
        this.eventBus.emit('loading:end', { state });

        // –ï—Å–ª–∏ –≤—Å–µ —Å–ø–∏–Ω–µ—Ä—ã —Å–∫—Ä—ã—Ç—ã
        if (this.activeLoaders.size === 0) {
          this.eventBus.emit('loading:complete');
        }
      }

      console.log(`[LoadingManager] –°–∫—Ä—ã—Ç —Å–ø–∏–Ω–µ—Ä: ${state}`);
      return true;

    } catch (error) {
      console.error(`[LoadingManager] –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Å–ø–∏–Ω–µ—Ä–∞ ${state}:`, error);
      return false;
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–ø–∏–Ω–µ—Ä–æ–≤
   */
  hideAll() {
    const activeStates = Array.from(this.activeLoaders);

    activeStates.forEach(state => {
      this.hide(state);
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–ø–∏–Ω–µ—Ä–æ–≤
    this.cleanupLegacySpinners();

    console.log('[LoadingManager] –í—Å–µ —Å–ø–∏–Ω–µ—Ä—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã');
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏–Ω–µ—Ä–∞
   */
  renderLoader(state, message, containerConfig, options) {
    const container = document.querySelector(containerConfig.selector);
    if (!container) {
      throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${containerConfig.selector}`);
    }

    const templateType = options.templateType || containerConfig.type;
    const template = this.templates.get(templateType);

    if (!template) {
      throw new Error(`–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${templateType}`);
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏–Ω–µ—Ä–∞
    const loaderElement = document.createElement('div');
    loaderElement.className = `loading-container loading-${state}`;
    loaderElement.innerHTML = template(message);
    loaderElement.setAttribute('data-loading-state', state);

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏–Ω–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (containerConfig.type === 'overlay') {
      document.body.appendChild(loaderElement);
    } else {
      // –î–ª—è inline —Å–ø–∏–Ω–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      container.insertBefore(loaderElement, container.firstChild);
      container.classList.add('loading-active');
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
      loaderElement.classList.add('loading-visible');
    });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏–Ω–µ—Ä–∞
   */
  removeLoader(state) {
    const loaderElements = document.querySelectorAll(`[data-loading-state="${state}"]`);

    loaderElements.forEach(element => {
      element.classList.add('loading-hiding');

      // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        if (element.parentNode) {
          element.parentNode.removeChild(element);
        }
      }, 300);
    });

    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å loading-active —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    const containerConfig = this.containers.get(state);
    if (containerConfig && containerConfig.type !== 'overlay') {
      const container = document.querySelector(containerConfig.selector);
      if (container) {
        container.classList.remove('loading-active');
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–ø–∏–Ω–µ—Ä–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
   */
  cleanupLegacySpinners() {
    // –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å—Ç–∞—Ä—ã—Ö —Å–ø–∏–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    const legacySelectors = [
      '.loading-overlay',
      '.dt-processing',
      '#loading-spinner',
      '.spinner-overlay',
      '.loading-indicator'
    ];

    legacySelectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      elements.forEach(element => {
        if (!element.hasAttribute('data-loading-state')) {
          element.style.display = 'none';
          element.style.visibility = 'hidden';
          element.style.opacity = '0';
        }
      });
    });
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
   */
  bindEvents() {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è DataTables –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    document.addEventListener('processing.dt', (e) => {
      const isProcessing = e.detail?.processing;

      if (isProcessing) {
        this.show(this.STATES.TABLE, 'üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
      } else {
        this.hide(this.STATES.TABLE);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    window.addEventListener('error', () => {
      // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–ø–∏–Ω–µ—Ä—ã
      setTimeout(() => this.hideAll(), 1000);
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  getActiveStates() {
    return Array.from(this.activeLoaders);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  isActive(state) {
    return this.activeLoaders.has(state);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏–Ω–µ—Ä–æ–≤
   */
  getActiveCount() {
    return this.activeLoaders.size;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = LoadingManager;
} else {
  window.LoadingManager = LoadingManager;
}
