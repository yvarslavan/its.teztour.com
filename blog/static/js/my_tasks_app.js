/**
 * –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ú–æ–∏ –∑–∞–¥–∞—á–∏ –≤ Redmine"
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ tasks_my_tasks_documentation.md
 */

const MyTasksApp = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: {
        apiEndpoints: {
            tasks: '/tasks/get-my-tasks-paginated',
            statistics: '/tasks/get-my-tasks-statistics-optimized',
            filters: '/tasks/get-my-tasks-filters-optimized'
        },
        tableId: 'tasksTable',
        loadingSpinnerId: 'loading-spinner',
        defaultPageSize: 25
    },

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    state: {
        isInitialized: false,
        dataTable: null,
        filtersLoaded: false,
        statisticsLoaded: false,
        currentFilters: {
            status: '',
            project: '',
            priority: ''
        }
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init: function() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MyTasksApp');

        if (this.state.isInitialized) {
            console.log('‚ö†Ô∏è MyTasksApp —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        this.showLoadingSpinner();
        this.initializeDataTable();
        this.loadFilters();
        this.loadStatistics();
        this.bindEventListeners();

        this.state.isInitialized = true;
        console.log('‚úÖ MyTasksApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingSpinner: function() {
        const spinner = document.getElementById(this.config.loadingSpinnerId);
        if (spinner) {
            spinner.style.display = 'flex';
        }
    },

    // –°–∫—Ä—ã—Ç—å —Å–ø–∏–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    hideLoadingSpinner: function() {
        const spinner = document.getElementById(this.config.loadingSpinnerId);
        if (spinner) {
            spinner.style.display = 'none';
        }
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTable
    initializeDataTable: function() {
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTable');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ jQuery –∏ DataTables
        if (typeof $ === "undefined" || typeof $.fn.dataTable === "undefined") {
            console.error('‚ùå jQuery –∏–ª–∏ DataTables –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            console.error('jQuery available:', typeof $);
            console.error('DataTables available:', typeof $.fn?.dataTable);
            this.hideLoadingSpinner();
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return;
        }

        const tableElement = document.getElementById(this.config.tableId);
        if (!tableElement) {
            console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', this.config.tableId);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DataTable
        const dataTableConfig = {
            processing: true,
            serverSide: true,
            ajax: {
                url: this.config.apiEndpoints.tasks,
                type: 'GET',
                data: (params) => {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    if (this.state.currentFilters.status) {
                        params.status_id = [this.state.currentFilters.status];
                    }
                    if (this.state.currentFilters.project) {
                        params.project_id = [this.state.currentFilters.project];
                    }
                    if (this.state.currentFilters.priority) {
                        params.priority_id = [this.state.currentFilters.priority];
                    }

                    console.log('üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ DataTables:', params);
                    return params;
                },
                error: (xhr, error, code) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö DataTables:', {xhr, error, code});
                    this.hideLoadingSpinner();
                    this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error}`);
                }
            },
            columns: [
                {
                    data: 'id',
                    name: 'id',
                    title: 'ID',
                    className: 'col-id-cell',
                    width: '70px',
                    responsivePriority: 1,
                    render: (data, type, row) => {
                        if (type === 'display') {
                            return `<div class="task-id-container">
                                        <a href="/tasks/my-tasks/${data}" class="task-id-link" target="_blank" rel="noopener noreferrer" title="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É #${data} –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ">
                                            <span class="task-id-number">#${data}</span>
                                        </a>
                                    </div>`;
                        }
                        return data;
                    }
                },
                {
                    data: 'easy_email_to',
                    name: 'easy_email_to',
                    title: 'Email',
                    className: 'col-email-cell',
                    responsivePriority: 4,
                    render: (data) => {
                        if (!data || data === '-') {
                            return `<div class="email-container">
                                        <span class="email-placeholder">
                                            <i class="fas fa-envelope-open text-muted"></i>
                                            <span class="text-muted">–ù–µ —É–∫–∞–∑–∞–Ω</span>
                                        </span>
                                    </div>`;
                        }
                        const truncatedEmail = data.length > 25 ? data.substring(0, 25) + '...' : data;
                        const isValidEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data);

                        if (isValidEmail) {
                            return `<div class="email-container">
                                        <i class="fas fa-envelope text-primary"></i>
                                        <a href="mailto:${this.escapeHtml(data)}" class="email-link" title="–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ: ${this.escapeHtml(data)}">
                                            <span class="email-text">${this.escapeHtml(truncatedEmail)}</span>
                                        </a>
                                    </div>`;
                        } else {
                            return `<div class="email-container">
                                        <i class="fas fa-envelope text-primary"></i>
                                        <span class="email-text" title="${this.escapeHtml(data)}">${this.escapeHtml(truncatedEmail)}</span>
                                    </div>`;
                        }
                    }
                },
                {
                    data: 'subject',
                    name: 'subject',
                    title: '–¢–µ–º–∞ –∑–∞–¥–∞—á–∏',
                    className: 'col-subject-cell',
                    responsivePriority: 2,
                    render: (data, type, row) => {
                        const subjectHtml = this.escapeHtml(data);
                        const projectHtml = this.escapeHtml(row.project_name || '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞');

                        // HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç CSS –∏–∑ 'tasks_modern_ui.css'
                        const taskTitleHtml = `<a class="task-title" href="/tasks/my-tasks/${row.id}" title="${subjectHtml}">${subjectHtml}</a>`;
                        const projectNameHtml = `<div class="project-name">
                                                   <i class="fas fa-folder-open"></i>
                                                   <span>${projectHtml}</span>
                                                 </div>`;

                        return `<div class="task-title-container">
                                    ${taskTitleHtml}
                                    ${projectNameHtml}
                                </div>`;
                    }
                },
                {
                    data: 'status_name',
                    name: 'status',
                    title: '–°—Ç–∞—Ç—É—Å',
                    className: 'col-status-cell',
                    responsivePriority: 3,
                    render: (data) => {
                        const statusInfo = this.getStatusInfo(data);
                        return `<div class="status-container">
                                    <div class="status-indicator-modern ${statusInfo.class}"
                                         data-status="${this.escapeHtml(data || 'N/A')}"
                                         title="${statusInfo.tooltip || this.escapeHtml(data || 'N/A')}">
                                        <div class="status-icon">
                                            <i class="${statusInfo.icon}"></i>
                                        </div>
                                        <span class="status-text">${this.escapeHtml(statusInfo.shortName || data || 'N/A')}</span>
                                        <div class="status-tooltip">${statusInfo.tooltip || this.escapeHtml(data || 'N/A')}</div>
                                    </div>
                                </div>`;
                    }
                },
                {
                    data: 'priority_name',
                    name: 'priority',
                    title: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                    className: 'col-priority-cell',
                    responsivePriority: 5,
                    render: (data) => {
                        const priorityInfo = this.getPriorityInfo(data);
                        return `<div class="priority-container">
                                    <span class="priority-badge-redesigned ${priorityInfo.class}">
                                        <i class="${priorityInfo.icon} priority-icon"></i>
                                        <span class="priority-text">${this.escapeHtml(data || 'N/A')}</span>
                                    </span>
                                </div>`;
                    }
                },
                {
                    data: 'created_on',
                    name: 'created_on',
                    title: '–°–æ–∑–¥–∞–Ω–∞',
                    className: 'col-created-cell',
                    responsivePriority: 7,
                    render: (data) => {
                        return `<div class="date-container">
                                    <i class="fas fa-calendar-plus date-icon"></i>
                                    <span class="date-text">${this.formatDate(data)}</span>
                                </div>`;
                    }
                },
                {
                    data: 'updated_on',
                    name: 'updated_on',
                    title: '–û–±–Ω–æ–≤–ª–µ–Ω–∞',
                    className: 'col-updated-cell',
                    responsivePriority: 6,
                    render: (data) => {
                        const formattedDateTime = this.formatDateTime(data);
                        const timezoneInfo = this.getTimezoneInfo();
                        const tooltipText = `–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${formattedDateTime}\n–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: ${timezoneInfo.timezone} (UTC${timezoneInfo.offset})`;

                        return `<div class="date-container">
                                    <i class="fas fa-calendar-check date-icon"></i>
                                    <span class="date-text" title="${tooltipText}">${formattedDateTime}</span>
                                </div>`;
                    }
                }
            ],
            order: [[6, 'desc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ)
            pageLength: this.config.defaultPageSize,
            lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
            responsive: {
                details: {
                    display: $.fn.dataTable.Responsive.display.childRowImmediate,
                    type: 'none',
                    target: ''
                }
            },
            scrollX: false,
            autoWidth: false,
            columnDefs: [
                {
                    targets: '_all',
                    className: 'dt-body-nowrap'
                }
            ],
            language: {
                "processing": "–û–±—Ä–∞–±–æ—Ç–∫–∞...",
                "search": "–ü–æ–∏—Å–∫:",
                "lengthMenu": "–ü–æ–∫–∞–∑–∞—Ç—å _MENU_ –∑–∞–ø–∏—Å–µ–π",
                "info": "–ó–∞–ø–∏—Å–∏ —Å _START_ –¥–æ _END_ –∏–∑ _TOTAL_ –∑–∞–ø–∏—Å–µ–π",
                "infoEmpty": "–ó–∞–ø–∏—Å–∏ —Å 0 –¥–æ 0 –∏–∑ 0 –∑–∞–ø–∏—Å–µ–π",
                "infoFiltered": "(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏–∑ _MAX_ –∑–∞–ø–∏—Å–µ–π)",
                "infoPostFix": "",
                "loadingRecords": "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...",
                "zeroRecords": "–ó–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                "emptyTable": "–í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ",
                "paginate": {
                    "first": "–ü–µ—Ä–≤–∞—è",
                    "previous": "–ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                    "next": "–°–ª–µ–¥—É—é—â–∞—è",
                    "last": "–ü–æ—Å–ª–µ–¥–Ω—è—è"
                },
                "aria": {
                    "sortAscending": ": –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é",
                    "sortDescending": ": –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"
                },
                "select": {
                    "rows": {
                        "_": "–í—ã–±—Ä–∞–Ω–æ %d —Å—Ç—Ä–æ–∫",
                        "0": "–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
                        "1": "–í—ã–±—Ä–∞–Ω–∞ %d —Å—Ç—Ä–æ–∫–∞"
                    }
                }
            },
            drawCallback: () => {
                this.hideLoadingSpinner();
                console.log('‚úÖ DataTable –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–∞');
            },
            initComplete: () => {
                console.log('‚úÖ DataTable –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                this.hideLoadingSpinner();

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
                this.setupSearchPlaceholder();

                // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const timezoneInfo = this.getTimezoneInfo();
                console.log('üïê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞:', timezoneInfo);
            }
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataTable
        try {
            this.state.dataTable = $('#' + this.config.tableId).DataTable(dataTableConfig);
            console.log('‚úÖ DataTable —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DataTable:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã');
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    loadFilters: function() {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤');

        fetch(this.config.apiEndpoints.filters)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('‚úÖ –§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
                this.populateFilters(data);
                this.state.filtersLoaded = true;
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
            });
    },

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    populateFilters: function(data) {
        // –°—Ç–∞—Ç—É—Å—ã
        if (data.statuses && Array.isArray(data.statuses)) {
            const statusSelect = document.getElementById('status-filter');
            if (statusSelect) {
                statusSelect.innerHTML = '<option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>';
                data.statuses.forEach(status => {
                    const option = document.createElement('option');
                    option.value = status.id;
                    option.textContent = status.name;
                    statusSelect.appendChild(option);
                });
            }
        }

        // –ü—Ä–æ–µ–∫—Ç—ã
        if (data.projects && Array.isArray(data.projects)) {
            const projectSelect = document.getElementById('project-filter');
            if (projectSelect) {
                projectSelect.innerHTML = '<option value="">–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</option>';
                data.projects.forEach(project => {
                    const option = document.createElement('option');
                    option.value = project.id;
                    option.textContent = project.name;
                    projectSelect.appendChild(option);
                });
            }
        }

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        if (data.priorities && Array.isArray(data.priorities)) {
            const prioritySelect = document.getElementById('priority-filter');
            if (prioritySelect) {
                prioritySelect.innerHTML = '<option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>';
                data.priorities.forEach(priority => {
                    const option = document.createElement('option');
                    option.value = priority.id;
                    option.textContent = priority.name;
                    prioritySelect.appendChild(option);
                });
            }
        }

        console.log('‚úÖ –§–∏–ª—å—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    loadStatistics: function() {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

        fetch(this.config.apiEndpoints.statistics)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data);
                this.updateStatistics(data);
                this.state.statisticsLoaded = true;
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            });
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStatistics: function(data) {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        this.updateElementText('total-tasks-summary', data.total_tasks || 0);
        this.updateElementText('total-tasks', data.total_tasks || 0);
        this.updateElementText('open-tasks', data.open_tasks || 0);
        this.updateElementText('completed-tasks', data.completed_tasks || 0);
        this.updateElementText('in-progress-tasks', data.in_progress_tasks || 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ "–í—Å–µ–≥–æ –∑–∞–¥–∞—á"
        this.updateElementText('total-open', data.open_tasks || 0);
        this.updateElementText('total-in-progress', data.in_progress_tasks || 0);
        this.updateElementText('total-completed', data.completed_tasks || 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
        if (data.status_counts && data.detailed_breakdown) {
            this.updateDetailedStatistics(data.status_counts, data.detailed_breakdown);
        } else if (data.statistics && data.statistics.breakdown_details) {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            this.updateDetailedStatisticsNew(data.statistics.breakdown_details, data.status_counts);
        }

        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    updateDetailedStatistics: function(statusCounts, breakdown) {
        // –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
        if (breakdown && breakdown.open_statuses) {
            this.populateStatusDetails('open-details-content', breakdown.open_statuses, statusCounts);
        }

        // –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        if (breakdown && breakdown.closed_statuses) {
            this.populateStatusDetails('completed-details-content', breakdown.closed_statuses, statusCounts);
        }

        // –í —Ä–∞–±–æ—Ç–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        if (breakdown && breakdown.paused_statuses) {
            this.populateStatusDetails('in-progress-details-content', breakdown.paused_statuses, statusCounts);
        }

        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (breakdown && breakdown.completed_statuses) {
            this.populateStatusDetails('completed-details-content', breakdown.completed_statuses, statusCounts);
        }

        if (breakdown && breakdown.in_progress_statuses) {
            this.populateStatusDetails('in-progress-details-content', breakdown.in_progress_statuses, statusCounts);
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    updateDetailedStatisticsNew: function(breakdownDetails, statusCounts) {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç):', breakdownDetails);

        // –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
        if (breakdownDetails.open) {
            this.populateStatusDetailsFromArray('open-details-content', breakdownDetails.open);
        }

        // –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if (breakdownDetails.completed) {
            this.populateStatusDetailsFromArray('completed-details-content', breakdownDetails.completed);
        }

        // –í —Ä–∞–±–æ—Ç–µ
        if (breakdownDetails.in_progress) {
            this.populateStatusDetailsFromArray('in-progress-details-content', breakdownDetails.in_progress);
        }
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤ (–ø–æ –∏–º–µ–Ω–∞–º)
    populateStatusDetails: function(containerId, statuses, statusCounts) {
        const container = document.getElementById(containerId);
        if (!container || !statuses) return;

        container.innerHTML = '';
        statuses.forEach(status => {
            const count = statusCounts[status] || 0;
            if (count > 0) {
                const item = document.createElement('div');
                item.className = 'detail-item';
                item.innerHTML = `
                    <span class="detail-label">${this.escapeHtml(status)}:</span>
                    <span class="detail-value">${count}</span>
                `;
                container.appendChild(item);
            }
        });
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤ (–∏–∑ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤)
    populateStatusDetailsFromArray: function(containerId, statusArray) {
        const container = document.getElementById(containerId);
        if (!container || !statusArray) return;

        container.innerHTML = '';
        statusArray.forEach(statusObj => {
            if (statusObj.count > 0) {
                const item = document.createElement('div');
                item.className = 'detail-item';
                item.innerHTML = `
                    <span class="detail-label">${this.escapeHtml(statusObj.name)}:</span>
                    <span class="detail-value">${statusObj.count}</span>
                `;
                container.appendChild(item);
            }
        });
    },

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEventListeners: function() {
        console.log('üîó –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π');

        // –§–∏–ª—å—Ç—Ä—ã
        const statusFilter = document.getElementById('status-filter');
        const projectFilter = document.getElementById('project-filter');
        const priorityFilter = document.getElementById('priority-filter');

        if (statusFilter) {
            statusFilter.addEventListener('change', (e) => this.handleFilterChange('status', e.target.value));
        }
        if (projectFilter) {
            projectFilter.addEventListener('change', (e) => this.handleFilterChange('project', e.target.value));
        }
        if (priorityFilter) {
            priorityFilter.addEventListener('change', (e) => this.handleFilterChange('priority', e.target.value));
        }

        // –ö–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.addEventListener('click', (e) => {
            if (e.target.closest('.clear-filter-btn')) {
                const button = e.target.closest('.clear-filter-btn');
                this.clearFilter(button.id);
            }
        });

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        const globalToggleBtn = document.getElementById('globalToggleBtn');
        if (globalToggleBtn) {
            globalToggleBtn.addEventListener('click', () => this.toggleAllDetails());
        }

        // –ö–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
        document.addEventListener('click', (e) => {
            if (e.target.closest('.toggle-details-btn')) {
                const button = e.target.closest('.toggle-details-btn');
                const target = button.getAttribute('data-target');
                this.toggleCardDetails(target);
            }
        });

        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const resetBtn = document.getElementById('reset-filters-btn');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => this.resetAllFilters());
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const retryBtn = document.getElementById('retry-btn');
        if (retryBtn) {
            retryBtn.addEventListener('click', () => this.retry());
        }

        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    handleFilterChange: function(filterType, value) {
        console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä ${filterType}:`, value);

        this.state.currentFilters[filterType] = value;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
        const clearBtn = document.getElementById(`clear-${filterType}-filter`);
        if (clearBtn) {
            clearBtn.style.display = value ? 'block' : 'none';
        }

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        if (this.state.dataTable) {
            this.state.dataTable.ajax.reload();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        this.loadStatistics();
    },

    // –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    clearFilter: function(buttonId) {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞:', buttonId);

        const filterType = buttonId.replace('clear-', '').replace('-filter', '');
        const select = document.getElementById(`${filterType}-filter`);
        const clearBtn = document.getElementById(buttonId);

        if (select) {
            select.value = '';
            this.handleFilterChange(filterType, '');
        }

        if (clearBtn) {
            clearBtn.style.display = 'none';
        }
    },

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    resetAllFilters: function() {
        console.log('üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤');

        this.state.currentFilters = {
            status: '',
            project: '',
            priority: ''
        };

        // –û—á–∏—â–∞–µ–º —Å–µ–ª–µ–∫—Ç—ã
        ['status-filter', 'project-filter', 'priority-filter'].forEach(id => {
            const select = document.getElementById(id);
            if (select) select.value = '';
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        ['clear-status-filter', 'clear-project-filter', 'clear-priority-filter'].forEach(id => {
            const btn = document.getElementById(id);
            if (btn) btn.style.display = 'none';
        });

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        if (this.state.dataTable) {
            this.state.dataTable.ajax.reload();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.loadStatistics();
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    toggleCardDetails: function(targetId) {
        const details = document.getElementById(targetId);
        const button = document.querySelector(`[data-target="${targetId}"]`);

        if (details && button) {
            const isVisible = details.style.display !== 'none';
            details.style.display = isVisible ? 'none' : 'block';

            const icon = button.querySelector('i');
            const span = button.querySelector('span');

            if (icon && span) {
                if (isVisible) {
                    icon.className = 'fas fa-chevron-down';
                    span.textContent = '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è';
                } else {
                    icon.className = 'fas fa-chevron-up';
                    span.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
                }
            }
        }
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
    toggleAllDetails: function() {
        const detailsElements = document.querySelectorAll('.card-details');
        const globalBtn = document.getElementById('globalToggleBtn');

        if (!detailsElements.length || !globalBtn) return;

        const firstVisible = detailsElements[0].style.display !== 'none';
        const newDisplay = firstVisible ? 'none' : 'block';

        detailsElements.forEach(details => {
            details.style.display = newDisplay;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        document.querySelectorAll('.toggle-details-btn').forEach(btn => {
            const icon = btn.querySelector('i');
            const span = btn.querySelector('span');

            if (icon && span) {
                if (firstVisible) {
                    icon.className = 'fas fa-chevron-down';
                    span.textContent = '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è';
                } else {
                    icon.className = 'fas fa-chevron-up';
                    span.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
                }
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
        const globalIcon = globalBtn.querySelector('i');
        const globalSpan = globalBtn.querySelector('span');

        if (globalIcon && globalSpan) {
            if (firstVisible) {
                globalIcon.className = 'fas fa-expand-alt';
                globalSpan.textContent = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ';
            } else {
                globalIcon.className = 'fas fa-compress-alt';
                globalSpan.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ';
            }
        }
    },

    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
    retry: function() {
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        this.hideError();
        this.showLoadingSpinner();

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        if (this.state.dataTable) {
            this.state.dataTable.ajax.reload();
        }
        this.loadFilters();
        this.loadStatistics();
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError: function(message) {
        const errorState = document.getElementById('error-state');
        const errorMessage = document.getElementById('error-message');

        if (errorState) {
            errorState.style.display = 'block';
        }
        if (errorMessage) {
            errorMessage.textContent = message;
        }

        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const tableContainer = document.querySelector('.table-container');
        if (tableContainer) {
            tableContainer.style.display = 'none';
        }
    },

    // –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É
    hideError: function() {
        const errorState = document.getElementById('error-state');
        if (errorState) {
            errorState.style.display = 'none';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        const tableContainer = document.querySelector('.table-container');
        if (tableContainer) {
            tableContainer.style.display = 'block';
        }
    },

    // –£—Ç–∏–ª–∏—Ç—ã
    updateElementText: function(elementId, text) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = text;
        }
    },

    escapeHtml: function(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },

        formatDate: function(dateString) {
        if (!dateString) return '-';

        try {
            const date = new Date(dateString);
            const now = new Date();
            const diffTime = Math.abs(now - date);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

            // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
            if (diffDays === 0) {
                return date.toLocaleString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –≥–æ–¥–∞
            if (date.getFullYear() === now.getFullYear()) {
                return date.toLocaleDateString('ru-RU', {
                    day: '2-digit',
                    month: '2-digit'
                });
            }

            // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É
            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: '2-digit'
            });
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
            return dateString;
        }
    },

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—è "–û–±–Ω–æ–≤–ª–µ–Ω–∞"
    formatDateTime: function(dateString) {
        if (!dateString) return '-';

        try {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date –∏–∑ —Å—Ç—Ä–æ–∫–∏
            // JavaScript –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç UTC –∏ ISO —Å—Ç—Ä–æ–∫–∏
            let date;

            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 'T' –∏–ª–∏ 'Z', —ç—Ç–æ ISO —Ñ–æ—Ä–º–∞—Ç
            if (dateString.includes('T') || dateString.includes('Z')) {
                date = new Date(dateString);
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD HH:MM:SS", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ UTC
                date = new Date(dateString + (dateString.includes(' ') ? ' UTC' : ''));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if (isNaN(date.getTime())) {
                console.warn('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞:', dateString);
                return dateString;
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º"
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');

            return `${day}.${month}.${year} ${hours}:${minutes}`;
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
            return dateString;
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
    getTimezoneInfo: function() {
        try {
            const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
            const offset = new Date().getTimezoneOffset();
            const offsetHours = Math.floor(Math.abs(offset) / 60);
            const offsetMinutes = Math.abs(offset) % 60;
            const offsetSign = offset <= 0 ? '+' : '-';

            return {
                timezone: timezone,
                offset: `${offsetSign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`,
                offsetMinutes: offset
            };
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ:', error);
            return {
                timezone: 'Unknown',
                offset: '+00:00',
                offsetMinutes: 0
            };
        }
    },

        getStatusInfo: function(statusName) {
        if (!statusName) {
            return {
                class: 'status-default',
                icon: 'fas fa-question-circle',
                shortName: 'N/A',
                tooltip: '–°—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
            };
        }

        const statusLower = statusName.toLowerCase();

        // üÜï –ù–æ–≤–∞—è
        if (statusLower === '–Ω–æ–≤–∞—è' || statusLower === 'new') {
            return {
                class: 'status-new',
                icon: 'fas fa-star',
                shortName: '–ù–æ–≤–∞—è',
                tooltip: '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'
            };
        }

        // üîÑ –í —Ä–∞–±–æ—Ç–µ
        if (statusLower === '–≤ —Ä–∞–±–æ—Ç–µ' || statusLower === 'in progress') {
            return {
                class: 'status-in-progress',
                icon: 'fas fa-cog',
                shortName: '–í —Ä–∞–±–æ—Ç–µ',
                tooltip: '–ó–∞–¥–∞—á–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
            };
        }

        // ‚úÖ –ó–∞–∫—Ä—ã—Ç–∞
        if (statusLower === '–∑–∞–∫—Ä—ã—Ç–∞' || statusLower === 'closed') {
            return {
                class: 'status-closed',
                icon: 'fas fa-check-circle',
                shortName: '–ó–∞–∫—Ä—ã—Ç–∞',
                tooltip: '–ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞'
            };
        }

        // ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞
        if (statusLower === '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' || statusLower === 'rejected') {
            return {
                class: 'status-rejected',
                icon: 'fas fa-times-circle',
                shortName: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
                tooltip: '–ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            };
        }

        // ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞
        if (statusLower === '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' || statusLower === 'resolved' || statusLower === 'done') {
            return {
                class: 'status-closed',
                icon: 'fas fa-check-circle',
                shortName: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
                tooltip: '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
            };
        }

        // üìã –ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        if (statusLower === '–∑–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ' || statusLower.includes('—É—Ç–æ—á–Ω–µ–Ω–∏–µ')) {
            return {
                class: 'status-waiting',
                icon: 'fas fa-question-circle',
                shortName: '–£—Ç–æ—á–Ω–µ–Ω–∏–µ',
                tooltip: '–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ'
            };
        }

        // ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if (statusLower === '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' || statusLower === 'paused') {
            return {
                class: 'status-waiting',
                icon: 'fas fa-pause-circle',
                shortName: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                tooltip: '–ó–∞–¥–∞—á–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
            };
        }

        // üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞
        if (statusLower === '–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞' || statusLower === 'tested') {
            return {
                class: 'status-testing',
                icon: 'fas fa-check-double',
                shortName: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞',
                tooltip: '–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞'
            };
        }

        // üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞
        if (statusLower === '–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞' || statusLower === 'redirected') {
            return {
                class: 'status-in-progress',
                icon: 'fas fa-share',
                shortName: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞',
                tooltip: '–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞'
            };
        }

        // üìù –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏
        if (statusLower === '–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏' || statusLower.includes('—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω')) {
            return {
                class: 'status-waiting',
                icon: 'fas fa-handshake',
                shortName: '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
                tooltip: '–ó–∞–¥–∞—á–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'
            };
        }

        // ‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞
        if (statusLower === '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞' || statusLower === 'frozen') {
            return {
                class: 'status-waiting',
                icon: 'fas fa-snowflake',
                shortName: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞',
                tooltip: '–ó–∞–¥–∞—á–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞'
            };
        }

        // üìÇ –û—Ç–∫—Ä—ã—Ç–∞
        if (statusLower === '–æ—Ç–∫—Ä—ã—Ç–∞' || statusLower === 'open') {
            return {
                class: 'status-new',
                icon: 'fas fa-folder-open',
                shortName: '–û—Ç–∫—Ä—ã—Ç–∞',
                tooltip: '–ó–∞–¥–∞—á–∞ –æ—Ç–∫—Ä—ã—Ç–∞'
            };
        }

        // üîç –ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        if (statusLower === '–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏' || statusLower.includes('—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω')) {
            return {
                class: 'status-testing',
                icon: 'fas fa-flask',
                shortName: '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
                tooltip: '–ó–∞–¥–∞—á–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏'
            };
        }

        // üìã –í –æ—á–µ—Ä–µ–¥–∏
        if (statusLower === '–≤ –æ—á–µ—Ä–µ–¥–∏' || statusLower === 'queued') {
            return {
                class: 'status-new',
                icon: 'fas fa-list-ol',
                shortName: '–í –æ—á–µ—Ä–µ–¥–∏',
                tooltip: '–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'
            };
        }

        // –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            class: 'status-default',
            icon: 'fas fa-info-circle',
            shortName: statusName.length > 10 ? statusName.substring(0, 10) + '...' : statusName,
            tooltip: `–°—Ç–∞—Ç—É—Å: ${statusName}`
        };
    },

    getPriorityInfo: function(priorityName) {
        if (!priorityName) return { class: 'priority-default', icon: 'fas fa-question' };

        const priorityLower = priorityName.toLowerCase();

        if (priorityLower.includes('–Ω–∏–∑–∫') || priorityLower.includes('low')) {
            return { class: 'priority-low', icon: 'fas fa-arrow-down' };
        }
        if (priorityLower.includes('–æ–±—ã—á–Ω') || priorityLower.includes('normal') ||
            priorityLower.includes('—Å—Ä–µ–¥–Ω') || priorityLower.includes('–Ω–æ—Ä–º–∞–ª—å–Ω')) {
            return { class: 'priority-normal', icon: 'fas fa-circle' };
        }
        if (priorityLower.includes('–≤—ã—Å–æ–∫') || priorityLower.includes('high')) {
            return { class: 'priority-high', icon: 'fas fa-arrow-up' };
        }
        if (priorityLower.includes('–∫—Ä–∏—Ç–∏—á') || priorityLower.includes('critical') ||
            priorityLower.includes('—Å—Ä–æ—á–Ω') || priorityLower.includes('urgent')) {
            return { class: 'priority-critical', icon: 'fas fa-exclamation-triangle' };
        }

        return { class: 'priority-default', icon: 'fas fa-question' };
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    setupSearchPlaceholder: function() {
        const searchInput = document.querySelector('.dataTables_filter input');
        if (searchInput) {
            searchInput.placeholder = '–ü–æ–∏—Å–∫ –ø–æ ID, —Ç–µ–º–µ, –æ–ø–∏—Å–∞–Ω–∏—é...';
            searchInput.setAttribute('aria-label', '–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á');
        }
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
    escapeHtml: function(text) {
        if (!text) return '';
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.toString().replace(/[&<>"']/g, function(m) { return map[m]; });
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.MyTasksApp = MyTasksApp;
