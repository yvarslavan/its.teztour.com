# blog/tasks/routes.py
from flask import Blueprint, render_template, request, flash, redirect, url_for, jsonify, current_app
from flask_login import login_required, current_user
import time # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
import traceback # –î–æ–±–∞–≤–ª–µ–Ω traceback
# from datetime import datetime, date # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é

# === –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–ú–ü–û–†–¢–´ –ò–ó blog.main.routes (–ù–£–ñ–ù–û –ë–£–î–ï–¢ –¢–©–ê–¢–ï–õ–¨–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –ò –î–û–ü–û–õ–ù–ò–¢–¨) ===
from config import get # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ config.py –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
# from redmine import RedmineConnector, ... (–∏ –¥—Ä—É–≥–∏–µ –∏–∑ redmine.py)
# from erp_oracle import connect_oracle, ... (–∏ –¥—Ä—É–≥–∏–µ –∏–∑ erp_oracle.py)
from blog.utils.cache_manager import weekend_performance_optimizer, tasks_cache_optimizer # –î–æ–±–∞–≤–ª–µ–Ω tasks_cache_optimizer
from blog.models import User, Notifications, NotificationsAddNotes # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π
from redmine import RedmineConnector # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
from erp_oracle import connect_oracle, get_user_erp_password, db_host, db_port, db_service_name, db_user_name, db_password # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
from config import get # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ config.ini
# –ò—Å–ø–æ–ª—å–∑—É–µ–º logger —á–µ—Ä–µ–∑ current_app
import logging
logger = logging.getLogger(__name__)
# ... –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏, —Ñ–æ—Ä–º—ã, —É—Ç–∏–ª–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–¥–∞—á ...

# –ò–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–∑ redmine.py
from redmine import (
    get_status_name_from_id,
    get_project_name_from_id,
    get_user_full_name_from_id,
    get_priority_name_from_id,
    get_property_name,
    get_connection,
    convert_datetime_msk_format,
    get_multiple_user_names,
    get_multiple_project_names,
    get_multiple_status_names,
    get_multiple_priority_names,
    db_redmine_host,
    db_redmine_user_name,
    db_redmine_password,
    db_redmine_name
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
from blog.tasks.utils import get_redmine_connector, get_user_assigned_tasks_paginated_optimized, task_to_dict, create_redmine_connector # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from redminelib.exceptions import ResourceNotFoundError # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Redmine

def collect_ids_from_task_history(task):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ ID –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    user_ids = set()
    project_ids = set()
    status_ids = set()
    priority_ids = set()

    # –î–æ–±–∞–≤–ª—è–µ–º ID –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    if hasattr(task, 'assigned_to') and task.assigned_to:
        user_ids.add(task.assigned_to.id)
    if hasattr(task, 'author') and task.author:
        user_ids.add(task.author.id)
    if hasattr(task, 'status') and task.status:
        status_ids.add(task.status.id)
    if hasattr(task, 'priority') and task.priority:
        priority_ids.add(task.priority.id)
    if hasattr(task, 'project') and task.project:
        project_ids.add(task.project.id)

    # –°–æ–±–∏—Ä–∞–µ–º ID –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    for journal in task.journals:
        for detail in journal.details:
            try:
                field_name = getattr(detail, 'name', '') or (detail.get('name') if isinstance(detail, dict) else '')
                old_value = getattr(detail, 'old_value', None)
                new_value = getattr(detail, 'new_value', None)
                if old_value is None and isinstance(detail, dict):
                    old_value = detail.get('old_value')
                if new_value is None and isinstance(detail, dict):
                    new_value = detail.get('new_value')
            except Exception as collect_err:
                current_app.logger.debug(f"[collect_ids_from_task_history] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ detail: {collect_err}")
                continue

            if field_name == 'assigned_to_id':
                if old_value and str(old_value).isdigit():
                    user_ids.add(int(old_value))
                if new_value and str(new_value).isdigit():
                    user_ids.add(int(new_value))

            elif field_name == 'project_id':
                if old_value and str(old_value).isdigit():
                    project_ids.add(int(old_value))
                if new_value and str(new_value).isdigit():
                    project_ids.add(int(new_value))

            elif field_name == 'status_id':
                if old_value and str(old_value).isdigit():
                    status_ids.add(int(old_value))
                if new_value and str(new_value).isdigit():
                    status_ids.add(int(new_value))

            elif field_name == 'priority_id':
                if old_value and str(old_value).isdigit():
                    priority_ids.add(int(old_value))
                if new_value and str(new_value).isdigit():
                    priority_ids.add(int(new_value))

    return {
        'user_ids': list(user_ids),
        'project_ids': list(project_ids),
        'status_ids': list(status_ids),
        'priority_ids': list(priority_ids)
    }

def format_boolean_field(value, field_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    # –ü—Ä–∏–≤–æ–¥–∏–º value –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    str_value = str(value).strip().lower() if value is not None else ''

    truthy_values = {'1', 'true', 'yes', '–¥–∞'}
    falsy_values = {'0', 'false', 'no', '–Ω–µ—Ç', ''}

    if field_name == 'easy_helpdesk_need_reaction':
        # –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–µ '1' –æ–∑–Ω–∞—á–∞–µ—Ç –î–∞, –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî –ù–µ—Ç
        return '–î–∞' if str_value == '1' else '–ù–µ—Ç'
    elif field_name == '16':
        # –ü–æ–ª–µ '16' (–∫–∞—Å—Ç–æ–º Redmine) —Ö—Ä–∞–Ω–∏—Ç '0' –∫–∞–∫ –ù–µ—Ç, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –î–∞
        return '–ù–µ—Ç' if str_value in falsy_values else '–î–∞'
    else:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ—á–∏—Ö boolean-–ø–æ–ª–µ–π
        return '–î–∞' if str_value in truthy_values else '–ù–µ—Ç'

# –°–æ–∑–¥–∞–µ–º Blueprint 'tasks'
# url_prefix='/tasks' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∑–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å /tasks
# –ù–∞–ø—Ä–∏–º–µ—Ä, –±—ã–≤—à–∏–π /my-tasks —Å—Ç–∞–Ω–µ—Ç /tasks/my-tasks (–∏–ª–∏ /tasks/ –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –≤ Blueprint –±—É–¥–µ—Ç '/')
tasks_bp = Blueprint('tasks', __name__, template_folder='templates')
# template_folder='templates' - –∏—â–µ–º –≤ blog/templates

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MY_TASKS_PAGE_ENDPOINT = ".my_tasks_page"

# ===== –ú–û–î–£–õ–¨ "–ú–û–ò –ó–ê–î–ê–ß–ò" (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ main) =====


@tasks_bp.route("/my-tasks", methods=["GET"])
@login_required
@weekend_performance_optimizer
def my_tasks_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Redmine —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not current_user.is_redmine_user:
        flash("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é '–ú–æ–∏ –∑–∞–¥–∞—á–∏'", "warning")
        return redirect(url_for("main.home"))

    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é count_notifications –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å layout.html
    count_notifications = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º cache_buster –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    import time
    cache_buster = str(int(time.time()))

    return render_template("my_tasks.html", title="–ú–æ–∏ –∑–∞–¥–∞—á–∏", count_notifications=count_notifications,
                         cache_buster=cache_buster)

@tasks_bp.route("/my-tasks/<int:task_id>", methods=["GET"])
@login_required
@weekend_performance_optimizer
def task_detail(task_id):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏"""
    import time
    start_time = time.time()
    current_app.logger.info(f"üöÄ [PERFORMANCE] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á–∏ {task_id} - –Ω–∞—á–∞–ª–æ")

    if not current_user.is_redmine_user:
        flash("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.", "warning")
        return redirect(url_for(MY_TASKS_PAGE_ENDPOINT))

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Redmine (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        redmine_conn_obj = create_redmine_connector(
            is_redmine_user=current_user.is_redmine_user,
            user_login=current_user.username,
            password=current_user.password
        )

        if not redmine_conn_obj or not hasattr(redmine_conn_obj, 'redmine'):
            flash("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redmine.", "error")
            return redirect(url_for(MY_TASKS_PAGE_ENDPOINT))

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        task = redmine_conn_obj.redmine.issue.get(
            task_id,
            include=['status', 'priority', 'project', 'tracker', 'author', 'assigned_to', 'journals', 'done_ratio', 'attachments', 'relations', 'watchers', 'changesets']
        )

        # üîß –ü—Ä–∏–≤–æ–¥–∏–º old_value/new_value –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞
        try:
            for j in getattr(task, 'journals', []):
                for d in getattr(j, 'details', []):
                    if hasattr(d, 'old_value') and d.old_value is not None:
                        d.old_value = str(d.old_value)
                    if hasattr(d, 'new_value') and d.new_value is not None:
                        d.new_value = str(d.new_value)
        except Exception as journal_cast_err:
            current_app.logger.debug(f"[task_detail] –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤ journal details: {journal_cast_err}")

        # ‚úÖ –ù–û–í–û–ï: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        ids_data = collect_ids_from_task_history(task)
        current_app.logger.info(f"üîç [PERFORMANCE] –°–æ–±—Ä–∞–Ω–æ ID: users={len(ids_data['user_ids'])}, statuses={len(ids_data['status_ids'])}, projects={len(ids_data['project_ids'])}, priorities={len(ids_data['priority_ids'])}")

        # ‚úÖ –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º –û–î–ù–û —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        connection = get_connection(db_redmine_host, db_redmine_user_name, db_redmine_password, db_redmine_name)

        if not connection:
            current_app.logger.error("‚ùå [PERFORMANCE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL")
            flash("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.", "error")
            return redirect(url_for(MY_TASKS_PAGE_ENDPOINT))

        # ‚úÖ –ù–û–í–û–ï: –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            user_names = get_multiple_user_names(connection, ids_data['user_ids'])
            project_names = get_multiple_project_names(connection, ids_data['project_ids'])
            status_names = get_multiple_status_names(connection, ids_data['status_ids'])
            priority_names = get_multiple_priority_names(connection, ids_data['priority_ids'])

            current_app.logger.info(f"‚úÖ [PERFORMANCE] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: users={len(user_names)}, projects={len(project_names)}, statuses={len(status_names)}, priorities={len(priority_names)}")

        finally:
            # ‚úÖ –í–ê–ñ–ù–û: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            connection.close()
            current_app.logger.info("üîí [PERFORMANCE] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è ID -> –Ω–∞–∑–≤–∞–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        status_mapping = {}
        try:
            redmine_statuses = redmine_conn_obj.redmine.issue_status.all()
            for status in redmine_statuses:
                status_mapping[status.id] = status.name
            current_app.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(status_mapping)} —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        except Exception as status_error:
            current_app.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã: {status_error}")
            status_mapping = {}

        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - start_time
        current_app.logger.info(f"üöÄ [PERFORMANCE] –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {execution_time:.3f}—Å")

        # ‚úÖ –ù–û–í–û–ï: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
        def get_property_name_fast(property_name, prop_key, old_value, value):
            def _val_to_text(val_dict, v):
                if v is None:
                    return 'None'
                if isinstance(v, str) and v.isdigit():
                    v_int = int(v)
                elif isinstance(v, int):
                    v_int = v
                else:
                    return v
                return val_dict.get(v_int, v)

            if prop_key == 'project_id':
                from_txt = _val_to_text(project_names, old_value)
                to_txt = _val_to_text(project_names, value)
                return f"–ü–∞—Ä–∞–º–µ—Ç—Ä&nbsp;<b>–ü—Ä–æ–µ–∫—Ç</b>&nbsp;–∏–∑–º–µ–Ω–∏–ª—Å—è&nbsp;c&nbsp;<b>{from_txt}</b>&nbsp;–Ω–∞&nbsp;<b>{to_txt}</b>"
            elif prop_key == 'assigned_to_id':
                from_txt = _val_to_text(user_names, old_value)
                to_txt = _val_to_text(user_names, value)
                return f"–ü–∞—Ä–∞–º–µ—Ç—Ä&nbsp;<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b>&nbsp;–∏–∑–º–µ–Ω–∏–ª—Å—è&nbsp;c&nbsp;<b>{from_txt}</b>&nbsp;–Ω–∞&nbsp;<b>{to_txt}</b>"
            elif prop_key == 'status_id':
                from_txt = _val_to_text(status_names, old_value)
                to_txt = _val_to_text(status_names, value)
                return f"–ü–∞—Ä–∞–º–µ—Ç—Ä&nbsp;<b>–°—Ç–∞—Ç—É—Å</b>&nbsp;–∏–∑–º–µ–Ω–∏–ª—Å—è&nbsp;c&nbsp;<b>{from_txt}</b>&nbsp;–Ω–∞&nbsp;<b>{to_txt}</b>"
            elif prop_key == 'priority_id':
                from_txt = _val_to_text(priority_names, old_value)
                to_txt = _val_to_text(priority_names, value)
                return f"–ü–∞—Ä–∞–º–µ—Ç—Ä&nbsp;<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>&nbsp;–∏–∑–º–µ–Ω–∏–ª—Å—è&nbsp;c&nbsp;<b>{from_txt}</b>&nbsp;–Ω–∞&nbsp;<b>{to_txt}</b>"
            elif prop_key == 'subject':
                return f"–ü–∞—Ä–∞–º–µ—Ç—Ä&nbsp;<b>–¢–µ–º–∞</b>&nbsp;–∏–∑–º–µ–Ω–∏–ª—Å—è&nbsp;c&nbsp;<b>{old_value}</b>&nbsp;–Ω–∞&nbsp;<b>{value}</b>"
            elif prop_key == 'easy_helpdesk_need_reaction':
                from_txt = '–î–∞' if str(old_value) == '1' else '–ù–µ—Ç'
                to_txt = '–î–∞' if str(value) == '1' else '–ù–µ—Ç'
                return f"–ü–∞—Ä–∞–º–µ—Ç—Ä&nbsp;<b>–ù—É–∂–Ω–∞&nbsp;—Ä–µ–∞–∫—Ü–∏—è?</b>&nbsp;–∏–∑–º–µ–Ω–∏–ª—Å—è&nbsp;c&nbsp;<b>{from_txt}</b>&nbsp;–Ω–∞&nbsp;<b>{to_txt}</b>"
            elif prop_key == 'done_ratio':
                return f"–ü–∞—Ä–∞–º–µ—Ç—Ä&nbsp;<b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</b>&nbsp;–∏–∑–º–µ–Ω–∏–ª—Å—è&nbsp;c&nbsp;<b>{old_value}%</b>&nbsp;–Ω–∞&nbsp;<b>{value}%</b>"
            elif prop_key == '16':
                from_txt = '–î–∞' if old_value and str(old_value) != '0' else '–ù–µ—Ç'
                to_txt = '–î–∞' if value and str(value) != '0' else '–ù–µ—Ç'
                return f"–ü–∞—Ä–∞–º–µ—Ç—Ä&nbsp;<b>–ß—Ç–æ&nbsp;–Ω–æ–≤–æ–≥–æ</b>&nbsp;–∏–∑–º–µ–Ω–∏–ª—Å—è&nbsp;c&nbsp;<b>{from_txt}</b>&nbsp;–Ω–∞&nbsp;<b>{to_txt}</b>"
            elif property_name == 'attachment':
                return f"–§–∞–π–ª&nbsp;<b>{value}</b>&nbsp;–¥–æ–±–∞–≤–ª–µ–Ω"
            elif property_name == 'relation' and prop_key == 'relates':
                return f"–ó–∞–¥–∞—á–∞&nbsp;—Å–≤—è–∑–∞–Ω–∞&nbsp;—Å&nbsp;–∑–∞–¥–∞—á–µ–π&nbsp;<b>#{value}</b>"
            return None

        # ‚úÖ –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π helper
        return render_template("task_detail.html",
                             task=task,
                             title=f"–ó–∞–¥–∞—á–∞ #{task.id}",
                             count_notifications=0,
                             status_mapping=status_mapping,
                             # ‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                             user_names=user_names,
                             project_names=project_names,
                             status_names=status_names,
                             priority_names=priority_names,
                             # ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ helper –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                             convert_datetime_msk_format=convert_datetime_msk_format,
                             format_boolean_field=format_boolean_field,
                             get_property_name=get_property_name_fast)

    except ResourceNotFoundError:
        current_app.logger.warning(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redmine")
        flash(f"–ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error")
        return redirect(url_for(MY_TASKS_PAGE_ENDPOINT))
    except Exception as e:
        import traceback
        current_app.logger.error(f"[task_detail] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}. Trace: {traceback.format_exc()}")
        flash("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏.", "error")
        return redirect(url_for(MY_TASKS_PAGE_ENDPOINT))

# ===== API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ =====

@tasks_bp.route("/get-my-tasks-paginated", methods=["GET"])
@login_required
@weekend_performance_optimizer
def get_my_tasks_paginated_api():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π URL)"""
    current_app.logger.info(f"–ó–∞–ø—Ä–æ—Å /tasks/get-my-tasks-paginated –¥–ª—è {current_user.username} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {request.args}")

    # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    start_time = time.time()

    try:
        if not current_user.is_redmine_user:
            current_app.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Redmine (get_my_tasks_paginated_api).")
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Redmine"}), 403

        draw = request.args.get('draw', 1, type=int)
        page = request.args.get("start", 0, type=int) // request.args.get("length", 25, type=int) + 1
        per_page = request.args.get("length", 25, type=int)

        search_value = request.args.get("search[value]", "", type=str).strip()
        current_app.logger.info(f"üîç –ü–û–ò–°–ö API: –ø–æ–ª—É—á–µ–Ω search_value='{search_value}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.username}")

        order_column_index = request.args.get('order[0][column]', 0, type=int)
        order_column_name_dt = request.args.get(f'columns[{order_column_index}][data]', 'updated_on', type=str)
        order_direction = request.args.get('order[0][dir]', 'desc', type=str)

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ DataTables —Å –ø–æ–ª—è–º–∏ Redmine
        column_mapping = {
            'id': 'id',
            'project': 'project.name',
            'tracker': 'tracker.name',
            'status': 'status.name',
            'priority': 'priority.name',
            'subject': 'subject',
            'assigned_to': 'assigned_to.name',
            'easy_email_to': 'easy_email_to',
            'updated_on': 'updated_on',
            'created_on': 'created_on',
            'due_date': 'due_date'
        }
        sort_column_redmine = column_mapping.get(order_column_name_dt, 'updated_on')

        status_ids = request.args.getlist("status_id[]")
        project_ids = request.args.getlist("project_id[]")
        priority_ids = request.args.getlist("priority_id[]")

        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Oracle
        # –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–æ–¥–µ–ª–∏ User
        if not current_user.password:
            current_app.logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.username}")
            return jsonify({"draw": draw, "error": "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "data": [], "recordsTotal": 0, "recordsFiltered": 0}), 401

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Redmine —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        redmine_connector_instance = create_redmine_connector(
            is_redmine_user=current_user.is_redmine_user,
            user_login=current_user.username,
            password=current_user.password
        )

        if not redmine_connector_instance or not hasattr(redmine_connector_instance, 'redmine') or not redmine_connector_instance.redmine:
            current_app.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Redmine –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è {current_user.username} —á–µ—Ä–µ–∑ create_redmine_connector –≤ get_my_tasks_paginated_api.")
            return jsonify({"draw": draw, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redmine –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API", "data": [], "recordsTotal": 0, "recordsFiltered": 0}), 500

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ SQLite –≤–º–µ—Å—Ç–æ Redmine API (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏)
        redmine_user_id = current_user.id_redmine_user
        current_app.logger.info(f"üîç [API] –ò—Å–ø–æ–ª—å–∑—É–µ–º redmine_user_id –∏–∑ SQLite: {redmine_user_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.username}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä force_load –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        force_load = request.args.get('force_load', '0') == '1'
        current_app.logger.info(f"üîç [API] –ü–∞—Ä–∞–º–µ—Ç—Ä force_load: {force_load}")

        issues_list, total_count = get_user_assigned_tasks_paginated_optimized(
            redmine_connector_instance,
            redmine_user_id,
            page=page,
            per_page=per_page,
            search_term=search_value,
            sort_column=sort_column_redmine,
            sort_direction=order_direction,
            status_ids=status_ids,
            project_ids=project_ids,
            priority_ids=priority_ids,
            force_load=force_load
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–¥–∞—á–∏ –≤ JSON
        tasks_data = [task_to_dict(issue) for issue in issues_list]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º start_time –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - start_time
        current_app.logger.info(
            f"–ó–∞–ø—Ä–æ—Å /tasks/get-my-tasks-paginated –¥–ª—è {current_user.username} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.4f}—Å. –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks_data)}, –≤—Å–µ–≥–æ: {total_count}"
        )

        return jsonify({
            "draw": draw,
            "recordsTotal": total_count,
            "recordsFiltered": total_count,
            "data": tasks_data
        })

    except Exception as e:
        current_app.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /tasks/get-my-tasks-paginated –¥–ª—è {current_user.username}: {str(e)}. Traceback: {traceback.format_exc()}")
        return jsonify({
            "draw": request.args.get('draw', 1, type=int),
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
            "data": [],
            "recordsTotal": 0,
            "recordsFiltered": 0
        }), 500

@tasks_bp.route("/get-my-tasks-statistics-optimized", methods=["GET"])
@login_required
def get_my_tasks_statistics_optimized():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á"""
    try:
        if not current_user.is_redmine_user:
            return jsonify({
                "error": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é '–ú–æ–∏ –∑–∞–¥–∞—á–∏'.",
                "total_tasks": 0,
                "new_tasks": 0,
                "in_progress_tasks": 0,
                "closed_tasks": 0
            }), 403

        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Oracle
        if not current_user.password:
            current_app.logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.username}")
            return jsonify({
                "error": "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "total_tasks": 0,
                "new_tasks": 0,
                "in_progress_tasks": 0,
                "closed_tasks": 0
            }), 401

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Redmine —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        redmine_connector = create_redmine_connector(
            is_redmine_user=current_user.is_redmine_user,
            user_login=current_user.username,
            password=current_user.password
        )

        if not redmine_connector or not hasattr(redmine_connector, 'redmine'):
            return jsonify({
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Redmine",
                "total_tasks": 0,
                "new_tasks": 0,
                "in_progress_tasks": 0,
                "closed_tasks": 0
            }), 500

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Redmine –∏–∑ SQLite (–ù–ï –∏–∑ Redmine API!)
        redmine_user_id = current_user.id_redmine_user
        current_app.logger.info(f"üîç [STATISTICS] –¢–µ–∫—É—â–∏–π redmine_user_id –∏–∑ SQLite: {redmine_user_id} (current_user.id: {current_user.id})")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–Ø–ú–´–ï SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∏–∑–±–µ–≥–∞–µ–º LIMIT 1000)
        current_app.logger.info(f"üóÑÔ∏è [STATISTICS] –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {redmine_user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL Redmine –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –í–°–ï–• –∑–∞–¥–∞—á
        mysql_conn = get_connection(db_redmine_host, db_redmine_user_name, db_redmine_password, db_redmine_name)
        if not mysql_conn:
            current_app.logger.error(f"‚ùå [STATISTICS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return jsonify({
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                "total_tasks": 0,
                "new_tasks": 0,
                "in_progress_tasks": 0,
                "closed_tasks": 0
            }), 500

        cursor = mysql_conn.cursor()

        total_tasks = 0
        new_tasks = 0
        in_progress_tasks = 0
        closed_tasks = 0
        actually_closed_tasks = 0
        debug_status_counts = {}

        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        open_statuses_breakdown = []
        completed_statuses_breakdown = []
        in_progress_statuses_breakdown = []
        localized_status_names = {}

        try:
            # 1. –û–ë–©–ï–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (–ë–ï–ó –õ–ò–ú–ò–¢–û–í!)
            sql_total = """
                SELECT COUNT(*) as total_count
                FROM issues i
                WHERE i.assigned_to_id = %s
            """
            current_app.logger.info(f"üóÑÔ∏è [STATISTICS] SQL –∑–∞–ø—Ä–æ—Å –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {redmine_user_id}")
            cursor.execute(sql_total, (redmine_user_id,))
            result = cursor.fetchone()
            total_tasks = result['total_count'] if result else 0
            current_app.logger.info(f"üìä [STATISTICS] –û–ë–©–ï–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (SQL): {total_tasks}")

            # 2. –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ u_statuses
            sql_localized_statuses = """
                SELECT id, name
                FROM u_statuses
            """
            cursor.execute(sql_localized_statuses)
            localized_rows = cursor.fetchall()
            for row in localized_rows:
                localized_status_names[row['id']] = row['name']
            current_app.logger.info(f"üìä [STATISTICS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(localized_status_names)} –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤")

            # 3. –ó–ê–í–ï–†–®–Å–ù–ù–´–ï –∑–∞–¥–∞—á–∏ (is_closed=1) —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            sql_completed_detailed = """
                SELECT s.name as status_name_en, s.id as status_id, COUNT(i.id) as task_count
                FROM issues i
                INNER JOIN issue_statuses s ON i.status_id = s.id
                WHERE i.assigned_to_id = %s AND s.is_closed = 1
                GROUP BY s.id, s.name
                ORDER BY task_count DESC
            """
            cursor.execute(sql_completed_detailed, (redmine_user_id,))
            completed_statuses_raw = cursor.fetchall()

            current_app.logger.info(f"üìä [STATISTICS] –ó–ê–í–ï–†–®–Å–ù–ù–´–ï —Å—Ç–∞—Ç—É—Å—ã (is_closed=1):")
            for status_row in completed_statuses_raw:
                status_name_en = status_row['status_name_en']
                status_id = status_row['status_id']
                status_count = status_row['task_count']

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                status_name_ru = localized_status_names.get(status_id, status_name_en)

                closed_tasks += status_count
                debug_status_counts[status_name_ru] = status_count
                completed_statuses_breakdown.append({
                    'name': status_name_ru,
                    'count': status_count,
                    'id': status_id
                })

                current_app.logger.info(f"   üìå {status_name_ru} (EN: {status_name_en}, ID: {status_id}) = {status_count} –∑–∞–¥–∞—á")

            actually_closed_tasks = closed_tasks

            # 4. –û–¢–ö–†–´–¢–´–ï –∑–∞–¥–∞—á–∏ (is_closed=0) —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
            sql_open_detailed = """
                SELECT s.name as status_name_en, s.id as status_id, COUNT(i.id) as task_count
                FROM issues i
                INNER JOIN issue_statuses s ON i.status_id = s.id
                WHERE i.assigned_to_id = %s AND s.is_closed = 0
                GROUP BY s.id, s.name
                ORDER BY task_count DESC
            """
            cursor.execute(sql_open_detailed, (redmine_user_id,))
            open_statuses_raw = cursor.fetchall()

            current_app.logger.info(f"üìä [STATISTICS] –û–¢–ö–†–´–¢–´–ï —Å—Ç–∞—Ç—É—Å—ã (is_closed=0):")
            for status_row in open_statuses_raw:
                status_name_en = status_row['status_name_en']
                status_id = status_row['status_id']
                status_count = status_row['task_count']

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                status_name_ru = localized_status_names.get(status_id, status_name_en)
                debug_status_counts[status_name_ru] = status_count

                current_app.logger.info(f"   üìå {status_name_ru} (EN: {status_name_en}, ID: {status_id}) = {status_count} –∑–∞–¥–∞—á")

                # –ù–û–í–ê–Ø –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                status_name_lower = status_name_ru.lower().strip()
                status_name_en_lower = status_name_en.lower().strip()

                # –û–¢–ö–†–´–¢–´–ï –ó–ê–î–ê–ß–ò: –ù–æ–≤–∞—è –∏ –û—Ç–∫—Ä—ã—Ç–∞
                if (status_name_lower in ['–Ω–æ–≤–∞—è', '–Ω–æ–≤—ã–π', '–Ω–æ–≤–æ–µ'] or '–Ω–æ–≤' in status_name_lower or
                    status_name_en_lower in ['new'] or 'new' in status_name_en_lower or
                    status_name_lower in ['–æ—Ç–∫—Ä—ã—Ç–∞', '–æ—Ç–∫—Ä—ã—Ç', '–æ—Ç–∫—Ä—ã—Ç–æ'] or '–æ—Ç–∫—Ä—ã—Ç' in status_name_lower or
                    status_name_en_lower in ['open'] or 'open' in status_name_en_lower):

                    new_tasks += status_count
                    open_statuses_breakdown.append({
                        'name': status_name_ru,
                        'count': status_count,
                        'id': status_id
                    })
                    current_app.logger.info(f"   ‚úÖ –û—Ç–Ω–µ—Å–µ–Ω–æ –∫ –û–¢–ö–†–´–¢–´–ú: +{status_count}")

                # –í –†–ê–ë–û–¢–ï: –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                else:
                    in_progress_tasks += status_count
                    in_progress_statuses_breakdown.append({
                        'name': status_name_ru,
                        'count': status_count,
                        'id': status_id
                    })
                    current_app.logger.info(f"   ‚úÖ –û—Ç–Ω–µ—Å–µ–Ω–æ –∫ –í –†–ê–ë–û–¢–ï: +{status_count}")

            current_app.logger.info(f"üéØ [STATISTICS] –ù–û–í–ê–Ø –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            current_app.logger.info(f"   üìä –í—Å–µ–≥–æ: {total_tasks}")
            current_app.logger.info(f"   üìä –û—Ç–∫—Ä—ã—Ç—ã–µ: {new_tasks}")
            current_app.logger.info(f"   üìä –í —Ä–∞–±–æ—Ç–µ: {in_progress_tasks}")
            current_app.logger.info(f"   üìä –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ: {closed_tasks}")
            current_app.logger.info(f"üìà [STATISTICS] –ü–û–õ–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú: {debug_status_counts}")

        except Exception as e_sql:
            current_app.logger.error(f"‚ùå [STATISTICS] –û—à–∏–±–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e_sql}")
            cursor.close()
            mysql_conn.close()
            return jsonify({
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e_sql)}",
                "total_tasks": 0,
                "new_tasks": 0,
                "in_progress_tasks": 0,
                "closed_tasks": 0
            }), 500
        finally:
            cursor.close()
            mysql_conn.close()

        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        additional_stats = {
            "avg_completion_time": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
            "most_active_project": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
            "completion_rate": 0,
            "actually_closed_tasks": actually_closed_tasks  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
        }

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if total_tasks > 0:
            additional_stats["completion_rate"] = round((closed_tasks / total_tasks) * 100, 1)

        return jsonify({
            "success": True,
            "total_tasks": total_tasks,
            "open_tasks": new_tasks,
            "in_progress_tasks": in_progress_tasks,
            "completed_tasks": closed_tasks,
            "closed_tasks": closed_tasks,  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è JavaScript –æ–±—Ä–∞–±–æ—Ç–∫–∏
            "status_counts": debug_status_counts,
            "detailed_breakdown": {
                "open_statuses": [item['name'] for item in open_statuses_breakdown],
                "in_progress_statuses": [item['name'] for item in in_progress_statuses_breakdown],
                "completed_statuses": [item['name'] for item in completed_statuses_breakdown]
            },
            "statistics": {
                "debug_status_counts": debug_status_counts,
                "additional_stats": additional_stats,
                "breakdown_details": {
                    "open": open_statuses_breakdown,
                    "in_progress": in_progress_statuses_breakdown,
                    "completed": completed_statuses_breakdown
                },
                "focused_data": {
                    "total": {
                        "additional_stats": additional_stats,
                        "status_breakdown": debug_status_counts
                    },
                    "open": {
                        "statuses": open_statuses_breakdown,
                        "filter_description": "–ù–æ–≤—ã–µ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏"
                    },
                    "in_progress": {
                        "statuses": in_progress_statuses_breakdown,
                        "filter_description": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"
                    },
                    "completed": {
                        "statuses": completed_statuses_breakdown,
                        "filter_description": "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏"
                    }
                }
            }
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_my_tasks_statistics_optimized: {e}")
        return jsonify({
            "error": str(e),
            "total_tasks": 0,
            "new_tasks": 0,
            "in_progress_tasks": 0,
            "closed_tasks": 0
        }), 500

@tasks_bp.route("/get-my-tasks-filters-optimized", methods=["GET"])
@login_required
def get_my_tasks_filters_optimized():
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä—è–º—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = time.time()

    logger.info("üöÄ [PERFORMANCE] –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û API —Ñ–∏–ª—å—Ç—Ä–æ–≤...")

    try:
        if not current_user.is_redmine_user:
            return jsonify({
                "error": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é '–ú–æ–∏ –∑–∞–¥–∞—á–∏'.",
                "statuses": [],
                "projects": [],
                "priorities": []
            }), 403

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL Redmine (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
        mysql_conn = get_connection(db_redmine_host, db_redmine_user_name, db_redmine_password, db_redmine_name)
        if not mysql_conn:
            return jsonify({
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL Redmine",
                "statuses": [],
                "projects": [],
                "priorities": []
            }), 500

        cursor = mysql_conn.cursor()
        statuses = []
        projects = []
        priorities = []

        try:
            # 1. –ë–´–°–¢–†–´–ô –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ u_statuses (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
            status_start = time.time()
            cursor.execute("""
                SELECT DISTINCT id, name
                FROM u_statuses
                ORDER BY id, name
            """)
            statuses = [{"id": row["id"], "name": row["name"]} for row in cursor.fetchall()]
            status_time = time.time() - status_start
            logger.info(f"‚úÖ [PERFORMANCE] –°—Ç–∞—Ç—É—Å—ã (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ) –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {status_time:.3f}—Å ({len(statuses)} –∑–∞–ø–∏—Å–µ–π)")

            # 2. –ë–´–°–¢–†–´–ô –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ü–†–û–°–¢–û–ô –°–ü–ò–°–û–ö, –±–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
            projects_start = time.time()
            cursor.execute("""
                SELECT id, name, parent_id
                FROM projects
                WHERE status = 1
                ORDER BY name
            """)
            projects_raw = cursor.fetchall()
            projects = []
            for row in projects_raw:
                projects.append({
                    "id": row["id"],
                    "name": row["name"],
                    "original_name": row["name"],
                    "parent_id": row["parent_id"],
                    "level": 0,
                    "has_children": False,
                    "is_parent": False
                })

            projects_time = time.time() - projects_start
            logger.info(f"‚úÖ [PERFORMANCE] –ü—Ä–æ–µ–∫—Ç—ã (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫) –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {projects_time:.3f}—Å ({len(projects)} –∑–∞–ø–∏—Å–µ–π)")

            # 3. –ë–´–°–¢–†–´–ô –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_Priority
            priorities_start = time.time()

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_Priority, –≥–¥–µ id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã enumerations
            cursor.execute("""
                SELECT e.id, up.name
                FROM enumerations e
                JOIN u_Priority up ON e.id = up.id
                WHERE e.type = 'IssuePriority'
                AND e.active = 1
                ORDER BY e.position, up.name
            """)
            priorities = [{"id": row["id"], "name": row["name"]} for row in cursor.fetchall()]

            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ u_Priority), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ enumerations
            if not priorities:
                logger.warning("‚ö†Ô∏è [PERFORMANCE] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ u_Priority, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ enumerations")
                cursor.execute("""
                    SELECT id, name
                    FROM enumerations
                    WHERE type = 'IssuePriority'
                    AND active = 1
                    ORDER BY position, name
                """)
                priorities = [{"id": row["id"], "name": row["name"]} for row in cursor.fetchall()]

            priorities_time = time.time() - priorities_start
            logger.info(f"‚úÖ [PERFORMANCE] –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ) –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {priorities_time:.3f}—Å ({len(priorities)} –∑–∞–ø–∏—Å–µ–π)")

        except Exception as sql_error:
            logger.error(f"‚ùå [PERFORMANCE] –û—à–∏–±–∫–∞ MySQL –∑–∞–ø—Ä–æ—Å–∞: {sql_error}")
            raise sql_error
        finally:
            cursor.close()
            mysql_conn.close()

        total_time = time.time() - start_time
        logger.info(f"üéØ [PERFORMANCE] –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô API –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.3f}—Å (—Å—Ç–∞—Ç—É—Å—ã: {len(statuses)}, –ø—Ä–æ–µ–∫—Ç—ã: {len(projects)}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {len(priorities)})")

        return jsonify({
            "success": True,
            "statuses": statuses,
            "projects": projects,
            "priorities": priorities,
            "performance": {
                "total_time": round(total_time, 3),
                "status_time": round(status_time, 3),
                "projects_time": round(projects_time, 3),
                "priorities_time": round(priorities_time, 3)
            }
        })

    except Exception as e:
        total_time = time.time() - start_time
        logger.error(f"‚ùå [PERFORMANCE] –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º API —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞ {total_time:.3f}—Å: {e}")
        import traceback
        logger.error(f"‚ùå [PERFORMANCE] Traceback: {traceback.format_exc()}")
        return jsonify({
            "error": str(e),
            "statuses": [],
            "projects": [],
            "priorities": []
        }), 500

@tasks_bp.route("/get-my-tasks-filters-direct-api", methods=["GET"])
@login_required
def get_my_tasks_filters_direct_api():
    """–°–¢–ê–†–´–ô API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–¥–∞—á (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    logger.info("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –°–¢–ê–†–´–ô API —Ñ–∏–ª—å—Ç—Ä–æ–≤! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /get-my-tasks-filters-optimized")
    try:
        if not current_user.is_redmine_user:
            return jsonify({
                "error": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é '–ú–æ–∏ –∑–∞–¥–∞—á–∏'.",
                "statuses": [],
                "projects": [],
                "priorities": []
            }), 403

        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Oracle
        if not current_user.password:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.username}")
            return jsonify({
                "error": "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "statuses": [],
                "projects": [],
                "priorities": []
            }), 401

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Redmine —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        redmine_connector = create_redmine_connector(
            is_redmine_user=current_user.is_redmine_user,
            user_login=current_user.username,
            password=current_user.password
        )

        if not redmine_connector or not hasattr(redmine_connector, 'redmine'):
            return jsonify({
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Redmine",
                "statuses": [],
                "projects": [],
                "priorities": []
            }), 500

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ Redmine
        statuses = []
        projects = []
        priorities = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
            redmine_statuses = redmine_connector.redmine.issue_status.all()
            statuses = [{"id": status.id, "name": status.name} for status in redmine_statuses]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            statuses = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            redmine_projects = redmine_connector.redmine.project.all()
            projects = [{"id": project.id, "name": project.name, "original_name": project.name, "parent_id": None, "level": 0, "has_children": False, "is_parent": False} for project in redmine_projects]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            projects = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
            redmine_priorities = redmine_connector.redmine.enumeration.filter(resource='issue_priorities')
            priorities = [{"id": priority.id, "name": priority.name} for priority in redmine_priorities]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {e}")
            priorities = []

        return jsonify({
            "success": True,
            "statuses": statuses,
            "projects": projects,
            "priorities": priorities
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_my_tasks_filters_direct_api: {e}")
        return jsonify({
            "error": str(e),
            "statuses": [],
            "projects": [],
            "priorities": []
        }), 500

# –°—Ç–∞—Ä—ã–π API (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@tasks_bp.route("/api/get-paginated", methods=["GET"])
@login_required
@weekend_performance_optimizer
def get_my_tasks_paginated_api_old():
    """–°—Ç–∞—Ä—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return get_my_tasks_paginated_api()

# ===== –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –¢–ï–°–¢–û–í–´–• –§–ê–ô–õ–û–í =====

@tasks_bp.route("/test-statistics-debug")
def test_statistics_debug():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        with open('test_statistics_debug.html', 'r', encoding='utf-8') as f:
            content = f.read()
        return content, 200, {'Content-Type': 'text/html; charset=utf-8'}
    except FileNotFoundError:
        return "–§–∞–π–ª test_statistics_debug.html –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@tasks_bp.route("/test-statistics-fix")
def test_statistics_fix():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        with open('test_statistics_fix.html', 'r', encoding='utf-8') as f:
            content = f.read()
        return content, 200, {'Content-Type': 'text/html; charset=utf-8'}
    except FileNotFoundError:
        return "–§–∞–π–ª test_statistics_fix.html –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@tasks_bp.route("/test-closed-tasks-api")
def test_closed_tasks_api():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
    try:
        with open('test_closed_tasks_api.html', 'r', encoding='utf-8') as f:
            content = f.read()
        return content, 200, {'Content-Type': 'text/html; charset=utf-8'}
    except FileNotFoundError:
        return "–§–∞–π–ª test_closed_tasks_api.html –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@tasks_bp.route("/test-statistics-direct")
def test_statistics_direct():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ª–∞–¥–∫–∏ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        with open('test_statistics_direct.html', 'r', encoding='utf-8') as f:
            content = f.read()
        return content, 200, {'Content-Type': 'text/html; charset=utf-8'}
    except FileNotFoundError:
        return "–§–∞–π–ª test_statistics_direct.html –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@tasks_bp.route("/test-search-debug")
def test_search_debug():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–¥–∞—á"""
    try:
        with open('test_search_debug.html', 'r', encoding='utf-8') as f:
            content = f.read()
        return content, 200, {'Content-Type': 'text/html; charset=utf-8'}
    except FileNotFoundError:
        return "–§–∞–π–ª test_search_debug.html –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@tasks_bp.route("/test-auth-status")
def test_auth_status():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        with open('test_auth_status.html', 'r', encoding='utf-8') as f:
            content = f.read()
        return content, 200, {'Content-Type': 'text/html; charset=utf-8'}
    except FileNotFoundError:
        return "–§–∞–π–ª test_auth_status.html –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@tasks_bp.route("/test-search-enhanced")
def test_search_enhanced():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞ —Å –¥–≤—É–º—è API"""
    try:
        with open('test_search_enhanced.html', 'r', encoding='utf-8') as f:
            content = f.read()
        return content, 200, {'Content-Type': 'text/html; charset=utf-8'}
    except FileNotFoundError:
        return "–§–∞–π–ª test_search_enhanced.html –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

def get_my_tasks_statuses_localized():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_statuses

    –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é! –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    start_time = time.time()
    logger.info("üìã [STATUSES] –ó–∞–ø—É—Å–∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤...")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL Redmine
        mysql_conn = get_connection(db_redmine_host, db_redmine_user_name, db_redmine_password, db_redmine_name)
        if not mysql_conn:
            return []

        cursor = mysql_conn.cursor()
        statuses = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_statuses
            status_start = time.time()
            cursor.execute("""
                SELECT DISTINCT id, name
                FROM u_statuses
                ORDER BY id, name
            """)
            statuses = [{"id": row["id"], "name": row["name"]} for row in cursor.fetchall()]
            status_time = time.time() - status_start
            logger.info(f"‚úÖ [STATUSES] –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {status_time:.3f}—Å ({len(statuses)} –∑–∞–ø–∏—Å–µ–π)")

        finally:
            cursor.close()
            mysql_conn.close()

        total_time = time.time() - start_time
        logger.info(f"üéØ [STATUSES] API —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.3f}—Å")

        return statuses

    except Exception as e:
        total_time = time.time() - start_time
        logger.error(f"‚ùå [STATUSES] –û—à–∏–±–∫–∞ –≤ API —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞ {total_time:.3f}—Å: {e}")
        logger.error(f"‚ùå [STATUSES] Traceback: {traceback.format_exc()}")
        return []

def get_my_tasks_priorities():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á

    –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é! –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    start_time = time.time()
    logger.info("‚ö° [PRIORITIES] –ó–∞–ø—É—Å–∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL Redmine
        mysql_conn = get_connection(db_redmine_host, db_redmine_user_name, db_redmine_password, db_redmine_name)
        if not mysql_conn:
            return []

        cursor = mysql_conn.cursor()
        priorities = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã u_Priority, –≥–¥–µ id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã enumerations
            priorities_start = time.time()
            cursor.execute("""
                SELECT e.id, up.name
                FROM enumerations e
                JOIN u_Priority up ON e.id = up.id
                WHERE e.type = 'IssuePriority'
                AND e.active = 1
                ORDER BY e.position, up.name
            """)
            priorities = [{"id": row["id"], "name": row["name"]} for row in cursor.fetchall()]

            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ u_Priority), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ enumerations
            if not priorities:
                logger.warning("‚ö†Ô∏è [PRIORITIES] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ u_Priority, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ enumerations")
                cursor.execute("""
                    SELECT id, name
                    FROM enumerations
                    WHERE type = 'IssuePriority'
                    AND active = 1
                    ORDER BY position, name
                """)
                priorities = [{"id": row["id"], "name": row["name"]} for row in cursor.fetchall()]

            priorities_time = time.time() - priorities_start
            logger.info(f"‚úÖ [PRIORITIES] –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {priorities_time:.3f}—Å ({len(priorities)} –∑–∞–ø–∏—Å–µ–π)")

        finally:
            cursor.close()
            mysql_conn.close()

        total_time = time.time() - start_time
        logger.info(f"üéØ [PRIORITIES] API –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.3f}—Å")

        return priorities

    except Exception as e:
        total_time = time.time() - start_time
        logger.error(f"‚ùå [PRIORITIES] –û—à–∏–±–∫–∞ –≤ API –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞ {total_time:.3f}—Å: {e}")
        logger.error(f"‚ùå [PRIORITIES] Traceback: {traceback.format_exc()}")
        return []

def get_my_tasks_projects_hierarchical():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¢–û–õ–¨–ö–û –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ MySQL Redmine

    –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é! –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    start_time = time.time()
    logger.info("üå≥ [PROJECTS] –ó–∞–ø—É—Å–∫ API –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL Redmine
        mysql_conn = get_connection(db_redmine_host, db_redmine_user_name, db_redmine_password, db_redmine_name)
        if not mysql_conn:
            return []

        cursor = mysql_conn.cursor()
        projects = []

        try:
            # –ü—Ä–æ–µ–∫—Ç—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π —á–µ—Ä–µ–∑ Nested Set Model (lft/rgt) –¥–ª—è MySQL
            projects_start = time.time()

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è lft –∏ rgt –≤ —Ç–∞–±–ª–∏—Ü–µ projects
            try:
                cursor.execute("""
                    SELECT COUNT(*) as count FROM information_schema.COLUMNS
                    WHERE table_schema = %s AND table_name = 'projects'
                    AND column_name IN ('lft', 'rgt')
                """, (db_redmine_name,))
                lft_rgt_result = cursor.fetchone()
                lft_rgt_count = lft_rgt_result["count"] if lft_rgt_result else 0

                if lft_rgt_count >= 2:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Nested Set Model (lft/rgt) –¥–ª—è MySQL
                    logger.info("üå≥ [PROJECTS] –ò—Å–ø–æ–ª—å–∑—É–µ–º MySQL Nested Set Model (lft/rgt –ø–æ–ª—è)")
                    cursor.execute("""
                        SELECT p1.id, p1.name, p1.parent_id,
                               (COUNT(p2.id) - 1) as level,
                               CASE WHEN p1.lft + 1 < p1.rgt THEN 1 ELSE 0 END as has_children,
                               CASE WHEN p1.lft + 1 < p1.rgt THEN 1 ELSE 0 END as is_parent,
                               p1.lft, p1.rgt
                        FROM projects p1, projects p2
                        WHERE p1.lft BETWEEN p2.lft AND p2.rgt
                          AND p1.status = 1
                          AND p2.status = 1
                        GROUP BY p1.id, p1.name, p1.parent_id, p1.lft, p1.rgt
                        ORDER BY p1.lft
                    """)
                else:
                    # Fallback –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –¥–ª—è MySQL (—Å CTE)
                    logger.info("üå≥ [PROJECTS] Fallback –Ω–∞ MySQL —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é")
                    cursor.execute("""
                        WITH RECURSIVE project_hierarchy AS (
                            -- –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –∫–æ—Ä–Ω–µ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
                            SELECT id, name, parent_id, 0 as level,
                                   CASE WHEN EXISTS(SELECT 1 FROM projects c WHERE c.parent_id = p.id AND c.status = 1)
                                        THEN 1 ELSE 0 END as has_children,
                                   CASE WHEN EXISTS(SELECT 1 FROM projects c WHERE c.parent_id = p.id AND c.status = 1)
                                        THEN 1 ELSE 0 END as is_parent,
                                   CAST(name AS CHAR(1000)) as full_path
                            FROM projects p
                            WHERE parent_id IS NULL AND status = 1

                            UNION ALL

                            -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π: –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
                            SELECT p.id, p.name, p.parent_id, ph.level + 1,
                                   CASE WHEN EXISTS(SELECT 1 FROM projects c WHERE c.parent_id = p.id AND c.status = 1)
                                        THEN 1 ELSE 0 END as has_children,
                                   CASE WHEN EXISTS(SELECT 1 FROM projects c WHERE c.parent_id = p.id AND c.status = 1)
                                        THEN 1 ELSE 0 END as is_parent,
                                   CONCAT(ph.full_path, ' > ', p.name) as full_path
                            FROM projects p
                            INNER JOIN project_hierarchy ph ON p.parent_id = ph.id
                            WHERE p.status = 1
                        )
                        SELECT id, name, parent_id, level, has_children, is_parent,
                               NULL as lft, NULL as rgt
                        FROM project_hierarchy
                        ORDER BY full_path
                    """)

                projects_raw = cursor.fetchall()
                projects = []

                for row in projects_raw:
                    project_data = {
                        "id": row["id"],
                        "name": row["name"],
                        "original_name": row["name"],
                        "parent_id": row["parent_id"],
                        "level": row["level"] if row["level"] is not None else 0,
                        "has_children": bool(row["has_children"]),
                        "is_parent": bool(row["is_parent"])
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º lft/rgt –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    if "lft" in row and "rgt" in row and row["lft"] is not None:
                        project_data["lft"] = row["lft"]
                        project_data["rgt"] = row["rgt"]

                    projects.append(project_data)

            except Exception as nested_error:
                logger.warning(f"‚ö†Ô∏è [PROJECTS] –û—à–∏–±–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {nested_error}")
                # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–æ–≤
                cursor.execute("""
                    SELECT id, name, parent_id
                    FROM projects
                    WHERE status = 1
                    ORDER BY name
                """)
                projects_raw = cursor.fetchall()
                projects = []
                for row in projects_raw:
                    projects.append({
                        "id": row["id"],
                        "name": row["name"],
                        "original_name": row["name"],
                        "parent_id": row["parent_id"],
                        "level": 0,
                        "has_children": False,
                        "is_parent": False
                    })

            projects_time = time.time() - projects_start
            logger.info(f"‚úÖ [PROJECTS] –ü—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {projects_time:.3f}—Å ({len(projects)} –∑–∞–ø–∏—Å–µ–π)")

        finally:
            cursor.close()
            mysql_conn.close()

        total_time = time.time() - start_time
        logger.info(f"üéØ [PROJECTS] API –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.3f}—Å")

        return projects

    except Exception as e:
        total_time = time.time() - start_time
        logger.error(f"‚ùå [PROJECTS] –û—à–∏–±–∫–∞ –≤ API –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ {total_time:.3f}—Å: {e}")
        logger.error(f"‚ùå [PROJECTS] Traceback: {traceback.format_exc()}")
        return []

@tasks_bp.route("/get-my-tasks-filters-hierarchical", methods=["GET"])
@login_required
def get_my_tasks_filters_hierarchical():
    """–ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏)

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä—è–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î.
    """
    start_time = time.time()
    logger.info("üîÑ [COMBINED] –ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API —Ñ–∏–ª—å—Ç—Ä–æ–≤...")

    try:
        if not current_user.is_redmine_user:
            return jsonify({
                "error": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é '–ú–æ–∏ –∑–∞–¥–∞—á–∏'.",
                "statuses": [],
                "projects": [],
                "priorities": []
            }), 403

        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (Single Responsibility Principle)
        logger.info("üîÑ [COMBINED] –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏...")

        # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
        statuses = get_my_tasks_statuses_localized()
        logger.info(f"üîÑ [COMBINED] –°—Ç–∞—Ç—É—Å—ã: {len(statuses)}")

        # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
        priorities = get_my_tasks_priorities()
        logger.info(f"üîÑ [COMBINED] –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {len(priorities)}")

        # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
        projects = get_my_tasks_projects_hierarchical()
        logger.info(f"üîÑ [COMBINED] –ü—Ä–æ–µ–∫—Ç—ã: {len(projects)}")

        total_time = time.time() - start_time
        logger.info(f"üéØ [COMBINED] –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.3f}—Å (—Å—Ç–∞—Ç—É—Å—ã: {len(statuses)}, –ø—Ä–æ–µ–∫—Ç—ã: {len(projects)}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {len(priorities)})")

        return jsonify({
            "success": True,
            "statuses": statuses,
            "projects": projects,
            "priorities": priorities,
            "hierarchical": True,
            "performance": {
                "total_time": round(total_time, 3),
                "architecture": "separated_responsibility",
                "optimization": "no_duplicate_auth_checks"
            }
        })

    except Exception as e:
        total_time = time.time() - start_time
        logger.error(f"‚ùå [COMBINED] –û—à–∏–±–∫–∞ –≤ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º API –∑–∞ {total_time:.3f}—Å: {e}")
        logger.error(f"‚ùå [COMBINED] Traceback: {traceback.format_exc()}")
        return jsonify({
            "error": str(e),
            "statuses": [],
            "projects": [],
            "priorities": []
        }), 500

@tasks_bp.route("/debug-search-api", methods=["GET"])
@login_required
def debug_search_api():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
    current_app.logger.info(f"üîç DEBUG SEARCH API: –ó–∞–ø—Ä–æ—Å –æ—Ç {current_user.username}")

    # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    start_time = time.time()

    try:
        if not current_user.is_redmine_user:
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403

        search_term = request.args.get("q", "", type=str).strip()
        current_app.logger.info(f"üîç DEBUG: –ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω = '{search_term}'")

        if not search_term:
            return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä q)"}), 400

        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Oracle
        if not current_user.password:
            current_app.logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.username}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}), 401

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Redmine —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        redmine_connector = create_redmine_connector(
            is_redmine_user=current_user.is_redmine_user,
            user_login=current_user.username,
            password=current_user.password
        )

        if not redmine_connector or not hasattr(redmine_connector, 'redmine'):
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Redmine"}), 500

        redmine_user_id = current_user.id_redmine_user
        current_app.logger.info(f"üîç DEBUG: redmine_user_id = {redmine_user_id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
        issues_list, total_count = get_user_assigned_tasks_paginated_optimized(
            redmine_connector,
            redmine_user_id,
            page=1,
            per_page=10,
            search_term=search_term,
            sort_column='updated_on',
            sort_direction='desc'
        )

        current_app.logger.info(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(issues_list)} –∑–∞–¥–∞—á, total_count = {total_count}")

        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –≤ –∑–∞–¥–∞—á–∞—Ö
        if len(issues_list) == 0 and search_term:
            current_app.logger.info(f"üîç DEBUG: –ü–û–ò–°–ö –ù–ï –î–ê–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            all_issues_list, _ = get_user_assigned_tasks_paginated_optimized(
                redmine_connector,
                redmine_user_id,
                page=1,
                per_page=20,
                search_term='',  # –ë–ï–ó –ø–æ–∏—Å–∫–∞
                sort_column='updated_on',
                sort_direction='desc'
            )

            current_app.logger.info(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_issues_list)} –∑–∞–¥–∞—á –ë–ï–ó –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤—ã—Ö –∑–∞–¥–∞—á
            for i, issue in enumerate(all_issues_list[:5]):
                issue_id = getattr(issue, 'id', 'unknown')
                issue_subject = getattr(issue, 'subject', '')
                issue_description = getattr(issue, 'description', '')

                current_app.logger.info(f"üîç DEBUG: –ó–∞–¥–∞—á–∞ #{issue_id}:")
                current_app.logger.info(f"  subject: '{issue_subject[:100]}'")
                current_app.logger.info(f"  description: '{issue_description[:100]}'")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
                if search_term.lower() in issue_subject.lower() or search_term.lower() in issue_description.lower():
                    current_app.logger.info(f"  ‚úÖ –°–û–î–ï–†–ñ–ò–¢ –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω '{search_term}'!")
                else:
                    current_app.logger.info(f"  ‚ùå –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω '{search_term}'")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–¥–∞—á–∏ –≤ JSON
        tasks_data = [task for task in (task_to_dict(issue) for issue in issues_list) if task]

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - start_time
        current_app.logger.info(
            f"–ó–∞–ø—Ä–æ—Å /tasks/debug-search-api –¥–ª—è {current_user.username} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.4f}—Å. –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks_data)}, –≤—Å–µ–≥–æ: {total_count}"
        )

        return jsonify({
            "success": True,
            "search_term": search_term,
            "found_count": len(tasks_data),
            "total_count": total_count,
            "user_id": redmine_user_id,
            "tasks": tasks_data
        })

    except Exception as e:
        current_app.logger.error(f"üîç DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        current_app.logger.error(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
        return jsonify({"error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}), 500

# ===== NOTIFICATION COUNT API =====
@tasks_bp.route('/notifications-count', methods=['GET'])
@login_required
def get_tasks_notification_count():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–¥–∞—á) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É helpdesk-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from redmine import get_count_notifications
        count = get_count_notifications(current_user.id)
        return jsonify({'count': count})
    except Exception as e:
        current_app.logger.error(f'[tasks.notifications-count] error: {e}')
        return jsonify({'count': 0}), 500
