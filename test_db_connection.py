#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from mysql_db import execute_quality_query_safe, execute_main_query_safe, db_manager
from blog.utils.connection_monitor import check_database_connections, get_connection_health, log_connection_status
from sqlalchemy import text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('test_db_connection.log')
    ]
)

logger = logging.getLogger(__name__)

def test_quality_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Quality ===")

    def test_query(session):
        result = session.execute(text("SELECT COUNT(*) as count FROM issues WHERE project_id = 1"))
        return result.scalar()

    result = execute_quality_query_safe(test_query, "—Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ quality DB")

    if result is not None:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ Quality. –ù–∞–π–¥–µ–Ω–æ {result} –∑–∞–ø–∏—Å–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ 1")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ Quality")
        return False

def test_main_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")

    def test_query(session):
        result = session.execute(text("SELECT COUNT(*) as count FROM issues"))
        return result.scalar()

    result = execute_main_query_safe(test_query, "—Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ main DB")

    if result is not None:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ. –ù–∞–π–¥–µ–Ω–æ {result} –∑–∞–ø–∏—Å–µ–π")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ")
        return False

def test_new_issues_query():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π ===")

    def query_new_issues(session):
        query = """
            SELECT id, subject, description, created_on
            FROM issues
            WHERE project_id = 1
            AND tracker_id = 1
            AND status_id = 1
            ORDER BY created_on DESC
            LIMIT 5
        """
        result = session.execute(text(query))
        return result.mappings().all()

    issues = execute_quality_query_safe(query_new_issues, "–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π")

    if issues is not None:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ {len(issues)} –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π")
        for issue in issues:
            logger.info(f"  - –û–±—Ä–∞—â–µ–Ω–∏–µ #{issue['id']}: {issue['subject']}")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
        return False

def test_comment_notifications():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö ===")

    def query_notifications(session):
        query = """
            SELECT j.id, j.journalized_id, j.notes, j.created_on,
                   j.user_id, i.subject
            FROM journals j
            INNER JOIN issues i ON j.journalized_id = i.id
            WHERE j.journalized_type = 'Issue'
            AND i.project_id = 1
            AND j.notes IS NOT NULL
            AND TRIM(j.notes) != ''
            AND j.is_read = 0
            ORDER BY j.created_on DESC
            LIMIT 5
        """
        result = session.execute(text(query))
        return result.mappings().all()

    notifications = execute_quality_query_safe(query_notifications, "–ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")

    if notifications is not None:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")
        for notification in notifications:
            logger.info(f"  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification['id']} –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{notification['journalized_id']}")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")
        return False

def test_connection_monitor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ===")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        is_connected = check_database_connections()
        logger.info(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã' if is_connected else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        health = get_connection_health()
        logger.info("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:")

        for db_name, db_info in health['databases'].items():
            status_icon = "‚úÖ" if db_info['status'] == 'connected' else "‚ùå"
            logger.info(f"  {status_icon} {db_name}: {db_info['status']}")
            if db_info['last_success']:
                logger.info(f"    –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {db_info['last_success']}")
            if db_info['last_error']:
                logger.info(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {db_info['last_error']}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        error_stats = health['error_statistics']
        if error_stats['total_errors'] > 0:
            logger.warning(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_stats['total_errors']}")
            for operation, count in error_stats['error_details'].items():
                logger.warning(f"  {operation}: {count} –æ—à–∏–±–æ–∫")
        else:
            logger.info("–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info(f"–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ë–î - {datetime.now()}")
    logger.info("=" * 60)

    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ Quality", test_quality_database),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ", test_main_database),
        ("–ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π", test_new_issues_query),
        ("–ó–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö", test_comment_notifications),
        ("–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π", test_connection_monitor),
    ]

    results = []

    for test_name, test_func in tests:
        logger.info(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 60)

    passed = 0
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{status}: {test_name}")
        if result:
            passed += 1

    logger.info(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return 0
    else:
        logger.warning(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
