#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –í–†–ï–ú–ï–ù–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –î–õ–Ø –î–ï–ü–õ–û–Ø FLASK HELPDESK
"""

import os
import subprocess
import tarfile
from flask import Flask, request, jsonify, render_template_string
from werkzeug.utils import secure_filename
import shutil
import stat

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max

# HTML —à–∞–±–ª–æ–Ω (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ Flask Helpdesk Deployment Uploader</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 { color: #333; text-align: center; }
        .upload-area {
            border: 2px dashed #ccc;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            margin: 20px 0;
            background: #fafafa;
        }
        .upload-area:hover {
            border-color: #007bff;
            background: #f0f8ff;
        }
        input[type="file"] {
            margin: 20px 0;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            width: 100%;
        }
        .btn {
            background: #007bff;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .btn:hover { background: #0056b3; }
        .instructions {
            background: #e9ecef;
            padding: 20px;
            border-radius: 5px;
            margin-top: 20px;
        }
        .code {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 3px;
            font-family: monospace;
            border-left: 4px solid #007bff;
            margin: 10px 0;
            white-space: pre-wrap;
        }
        .status {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            font-weight: bold;
        }
        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Flask Helpdesk Deployment Uploader</h1>

        <div class="upload-area">
            <h3>üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–µ–ø–ª–æ—è</h3>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª <strong>deployment_manual_updated.tar.gz</strong></p>
            <form id="uploadForm" enctype="multipart/form-data">
                <input type="file" id="fileInput" name="file" accept=".tar.gz,.tar,.gz" required />
                <button type="submit" class="btn">üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –¥–µ–ø–ª–æ–∏—Ç—å</button>
            </form>
        </div>

        <div id="status"></div>

        <div class="instructions">
            <h3>üìã –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:</h3>
            <ol>
                <li><strong>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</strong> –≤ /tmp/</li>
                <li><strong>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞</strong> flask-helpdesk</li>
                <li><strong>–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –≤ /opt/www</strong></li>
                <li><strong>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</strong> pip install</li>
                <li><strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</strong></li>
                <li><strong>–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞</strong></li>
                <li><strong>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–µ–π</strong></li>
            </ol>

            <h3>üîß –†—É—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫):</h3>
            <div class="code">cd /tmp/
sudo systemctl stop flask-helpdesk
cd /opt/www
sudo tar -xzf /tmp/deployment_manual_updated.tar.gz
sudo pip install -r requirements.txt
sudo chown -R deploy:deploy /opt/www
sudo chmod +x /opt/www/restore_ssh.sh
sudo systemctl start flask-helpdesk
sudo systemctl status flask-helpdesk</div>
        </div>
    </div>

    <script>
        document.getElementById('uploadForm').addEventListener('submit', function(e) {
            e.preventDefault();
            uploadFile();
        });

        function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            const statusDiv = document.getElementById('status');

            if (!file) {
                showStatus('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'error');
                return;
            }

            if (!file.name.includes('.tar.gz')) {
                showStatus('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .tar.gz', 'error');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            const button = document.querySelector('.btn');
            button.disabled = true;
            button.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–µ–ø–ª–æ–∏–º...';
            showStatus('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π...', 'info');

            fetch('/upload-deploy', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showStatus('‚úÖ –î–µ–ø–ª–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\\n\\n' + data.message, 'success');
                    button.innerHTML = '‚úÖ –ì–æ—Ç–æ–≤–æ!';
                } else {
                    showStatus('‚ùå –û—à–∏–±–∫–∞: ' + data.message, 'error');
                    button.disabled = false;
                    button.innerHTML = 'üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –¥–µ–ø–ª–æ–∏—Ç—å';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
                button.disabled = false;
                button.innerHTML = 'üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –¥–µ–ø–ª–æ–∏—Ç—å';
            });
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('status');
            statusDiv.innerHTML = '<div class="status ' + type + '">' + message + '</div>';
        }
    </script>
</body>
</html>
"""

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        print(f"üîß {description}")
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")

        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=300
        )

        print(f"   –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {result.returncode}")
        print(f"   –í—ã–≤–æ–¥: {result.stdout}")
        if result.stderr:
            print(f"   –û—à–∏–±–∫–∏: {result.stderr}")

        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return False, "", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (timeout 300s)"
    except Exception as e:
        return False, "", str(e)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/upload-deploy', methods=['POST'])
def upload_deploy():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if 'file' not in request.files:
            return jsonify({'success': False, 'message': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

        file = request.files['file']
        if file.filename == '':
            return jsonify({'success': False, 'message': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

        if not file.filename.endswith('.tar.gz'):
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ù—É–∂–µ–Ω .tar.gz'})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = secure_filename(file.filename)
        upload_path = f'/tmp/{filename}'
        file.save(upload_path)

        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {upload_path}")

        deployment_log = []

        # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        success, stdout, stderr = run_command(
            'sudo systemctl stop flask-helpdesk',
            '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Flask Helpdesk —Å–µ—Ä–≤–∏—Å–∞'
        )
        deployment_log.append(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {'‚úÖ' if success else '‚ùå'}")
        if stderr and 'not found' not in stderr.lower():
            deployment_log.append(f"   –û—à–∏–±–∫–∞: {stderr}")

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if os.path.exists('/opt/www'):
            success, stdout, stderr = run_command(
                f'sudo cp -r /opt/www /opt/www_backup_{int(time.time())}',
                '–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞'
            )
            deployment_log.append(f"üíæ –ë—ç–∫–∞–ø: {'‚úÖ' if success else '‚ùå'}")

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        success, stdout, stderr = run_command(
            'sudo mkdir -p /opt/www',
            '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/www'
        )
        deployment_log.append(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {'‚úÖ' if success else '‚ùå'}")

        # 4. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
        success, stdout, stderr = run_command(
            f'cd /opt/www && sudo tar -xzf {upload_path}',
            '–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞'
        )
        deployment_log.append(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞: {'‚úÖ' if success else '‚ùå'}")
        if not success:
            deployment_log.append(f"   –û—à–∏–±–∫–∞: {stderr}")
            return jsonify({
                'success': False,
                'message': '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞: ' + stderr
            })

        # 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if os.path.exists('/opt/www/requirements.txt'):
            success, stdout, stderr = run_command(
                'cd /opt/www && sudo pip install -r requirements.txt',
                '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π'
            )
            deployment_log.append(f"üìã –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'‚úÖ' if success else '‚ùå'}")

        # 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        success, stdout, stderr = run_command(
            'sudo chown -R deploy:deploy /opt/www',
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
        )
        deployment_log.append(f"üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {'‚úÖ' if success else '‚ùå'}")

        # 7. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
        if os.path.exists('/opt/www/flask-helpdesk.service'):
            success, stdout, stderr = run_command(
                'sudo cp /opt/www/flask-helpdesk.service /etc/systemd/system/',
                '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞'
            )
            deployment_log.append(f"‚öôÔ∏è Systemd —Å–µ—Ä–≤–∏—Å: {'‚úÖ' if success else '‚ùå'}")

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd
            run_command('sudo systemctl daemon-reload', '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd')

        # 8. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
        success, stdout, stderr = run_command(
            'sudo systemctl start flask-helpdesk',
            '–ó–∞–ø—É—Å–∫ Flask Helpdesk —Å–µ—Ä–≤–∏—Å–∞'
        )
        deployment_log.append(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: {'‚úÖ' if success else '‚ùå'}")

        # 9. –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        success, stdout, stderr = run_command(
            'sudo systemctl enable flask-helpdesk',
            '–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞'
        )
        deployment_log.append(f"üîÑ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: {'‚úÖ' if success else '‚ùå'}")

        # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        success, stdout, stderr = run_command(
            'sudo systemctl status flask-helpdesk',
            '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞'
        )
        deployment_log.append(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {'‚úÖ' if success else '‚ùå'}")

        # 11. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–µ–π
        if os.path.exists('/opt/www/restore_ssh.sh'):
            success, stdout, stderr = run_command(
                'chmod +x /opt/www/restore_ssh.sh && /opt/www/restore_ssh.sh',
                '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–µ–π'
            )
            deployment_log.append(f"üîë SSH –∫–ª—é—á–∏: {'‚úÖ' if success else '‚ùå'}")

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            os.remove(upload_path)
        except:
            pass

        message = "\\n".join(deployment_log)
        message += "\\n\\nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ http://its.tez-tour.com"

        return jsonify({
            'success': True,
            'message': message
        })

    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {str(e)}'
        })

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return jsonify({'status': 'ok', 'service': 'deployment_uploader'})

if __name__ == '__main__':
    import time
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ–π-—Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì° –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://its.tez-tour.com:5000")
    print("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª: deployment_manual_updated.tar.gz")
    print("‚ö†Ô∏è  –ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è")

    # –ó–∞–ø—É—Å–∫ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö, –ø–æ—Ä—Ç 5000
    app.run(host='0.0.0.0', port=5000, debug=False)
