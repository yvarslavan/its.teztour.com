# ============================================================================
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Windows
# –ê–≤—Ç–æ—Ä: Flask Helpdesk Development Team
# –í–µ—Ä—Å–∏—è: 1.0
# –î–∞—Ç–∞: 2024
# ============================================================================

<#
.SYNOPSIS
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Windows

.DESCRIPTION
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫—ç—à–∏, –ª–æ–≥–∏ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã Python, Node.js, .NET, Visual Studio –∏ Cursor IDE.

.EXAMPLE
    .\cleanup_dev_environment.ps1
    –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º

.EXAMPLE
    .\cleanup_dev_environment.ps1 -Force
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è CI/CD)
#>

param(
    [switch]$Force,          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    [switch]$DryRun,         # –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ)
    [string]$Path = ".",     # –ü—É—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞)
    [switch]$Verbose         # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
)

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –û–ß–ò–°–¢–ö–ò
# ============================================================================

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
$FileExtensionsToDelete = @(
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Windows
    "*.tmp", "*.temp", "*.bak", "*.backup", "*.old", "*.orig",

    # –õ–æ–≥–∏ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    "*.log", "*.log.*", "*.out", "*.err", "*.debug",

    # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    "*.obj", "*.o", "*.bin", "*.exe.config", "*.pdb", "*.ilk",

    # Python –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    "*.pyc", "*.pyo", "*.pyd", "*.egg-info",

    # Node.js –∏ JavaScript
    "*.min.js.map", "*.css.map", "npm-debug.log*", "yarn-debug.log*", "yarn-error.log*",

    # .NET –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    "*.cache", "*.suo", "*.sdf", "*.opensdf", "*.user", "*.userosscache", "*.sln.docstates",

    # IDE –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    "*.swp", "*.swo", "*~", ".DS_Store", "Thumbs.db", "desktop.ini",

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    "flask_session_*", "celerybeat-schedule*", "*.sqlite-journal"
)

# –ü–∞–ø–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
$DirectoriesToDelete = @(
    # Python –∫—ç—à–∏ –∏ —Å–±–æ—Ä–∫–∏
    "__pycache__", "*.egg-info", ".pytest_cache", ".coverage", ".tox",
    ".mypy_cache", ".hypothesis", "build", "dist", ".eggs",

    # Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
    # "node_modules", # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã

    # .NET –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
    "bin", "obj", ".vs", "packages", "TestResults",

    # IDE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
    ".vscode/settings.json.bak", ".idea/workspace.xml",

    # Cursor IDE –∫—ç—à–∏
    ".cursor", ".cursor-settings",

    # Git –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    ".git/objects/tmp_*", ".git/COMMIT_EDITMSG.backup",

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
    "$RECYCLE.BIN", "System Volume Information",

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Flask –ø—Ä–æ–µ–∫—Ç–∞
    "flask_session", "logs/app_*.log", "migrations/__pycache__"
)

# –ö—Ä—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã (–±–æ–ª—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ MB)
$LargeFileSizeMB = 100
$LargeFileExtensions = @("*.log", "*.dump", "*.dmp", "*.core")

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Format-FileSize {
    param([long]$Size)

    if ($Size -gt 1GB) {
        return "{0:N2} GB" -f ($Size / 1GB)
    } elseif ($Size -gt 1MB) {
        return "{0:N2} MB" -f ($Size / 1MB)
    } elseif ($Size -gt 1KB) {
        return "{0:N2} KB" -f ($Size / 1KB)
    } else {
        return "$Size –±–∞–π—Ç"
    }
}

function Get-SafePath {
    param([string]$Path)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–ø–æ–∫
    $DangerousPaths = @(
        "C:\Windows", "C:\Program Files", "C:\Program Files (x86)",
        "C:\Users\Public", "C:\ProgramData", "C:\System32"
    )

    $FullPath = (Resolve-Path -Path $Path -ErrorAction SilentlyContinue).Path

    foreach ($DangerousPath in $DangerousPaths) {
        if ($FullPath -like "$DangerousPath*") {
            Write-ColorOutput "‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–ø–∫–∏ $FullPath –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!" "Red"
            return $null
        }
    }

    return $FullPath
}

# ============================================================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

function Find-TemporaryFiles {
    param([string]$SearchPath)

    Write-ColorOutput "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤: $SearchPath" "Cyan"

    $FilesToDelete = @()
    $TotalSize = 0

    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
    foreach ($Extension in $FileExtensionsToDelete) {
        try {
            $Files = Get-ChildItem -Path $SearchPath -Filter $Extension -Recurse -File -ErrorAction SilentlyContinue

            foreach ($File in $Files) {
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
                if ($File.FullName -notlike "*\Windows\*" -and $File.FullName -notlike "*\Program Files*") {
                    $FilesToDelete += $File
                    $TotalSize += $File.Length

                    if ($Verbose) {
                        Write-ColorOutput "  üìÑ $($File.FullName) ($(Format-FileSize $File.Length))" "Gray"
                    }
                }
            }
        }
        catch {
            Write-ColorOutput "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ $Extension : $($_.Exception.Message)" "Yellow"
        }
    }

    # –ü–æ–∏—Å–∫ –∫—Ä—É–ø–Ω—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
    foreach ($Extension in $LargeFileExtensions) {
        try {
            $LargeFiles = Get-ChildItem -Path $SearchPath -Filter $Extension -Recurse -File -ErrorAction SilentlyContinue |
                         Where-Object { ($_.Length / 1MB) -gt $LargeFileSizeMB }

            foreach ($File in $LargeFiles) {
                if ($File -notin $FilesToDelete) {
                    $FilesToDelete += $File
                    $TotalSize += $File.Length

                    Write-ColorOutput "  üìä –ö–†–£–ü–ù–´–ô –§–ê–ô–õ: $($File.FullName) ($(Format-FileSize $File.Length))" "Magenta"
                }
            }
        }
        catch {
            Write-ColorOutput "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $($_.Exception.Message)" "Yellow"
        }
    }

    return @{
        Files = $FilesToDelete
        TotalSize = $TotalSize
        Count = $FilesToDelete.Count
    }
}

function Find-TemporaryDirectories {
    param([string]$SearchPath)

    Write-ColorOutput "üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤: $SearchPath" "Cyan"

    $DirectoriesToDeleteFound = @()
    $TotalSize = 0

    foreach ($DirPattern in $DirectoriesToDelete) {
        try {
            # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–∞–ø–æ–∫
            $Directories = Get-ChildItem -Path $SearchPath -Filter $DirPattern -Recurse -Directory -ErrorAction SilentlyContinue

            foreach ($Directory in $Directories) {
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –Ω–µ —É–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—É—Ç—è—Ö
                if ($Directory.FullName -notlike "*\Windows\*" -and
                    $Directory.FullName -notlike "*\Program Files*" -and
                    $Directory.FullName -notlike "*\.git\objects\pack*") {  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ git –æ–±—ä–µ–∫—Ç—ã

                    try {
                        $DirSize = (Get-ChildItem -Path $Directory.FullName -Recurse -File -ErrorAction SilentlyContinue |
                                   Measure-Object -Property Length -Sum).Sum

                        if ($DirSize -eq $null) { $DirSize = 0 }

                        $DirectoriesToDeleteFound += @{
                            Path = $Directory.FullName
                            Size = $DirSize
                            FileCount = (Get-ChildItem -Path $Directory.FullName -Recurse -File -ErrorAction SilentlyContinue).Count
                        }

                        $TotalSize += $DirSize

                        if ($Verbose) {
                            Write-ColorOutput "  üìÇ $($Directory.FullName) ($(Format-FileSize $DirSize))" "Gray"
                        }
                    }
                    catch {
                        Write-ColorOutput "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ $($Directory.FullName): $($_.Exception.Message)" "Yellow"
                    }
                }
            }
        }
        catch {
            Write-ColorOutput "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–ø–æ–∫ $DirPattern : $($_.Exception.Message)" "Yellow"
        }
    }

    return @{
        Directories = $DirectoriesToDeleteFound
        TotalSize = $TotalSize
        Count = $DirectoriesToDeleteFound.Count
    }
}

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
# ============================================================================

function Show-CleanupSummary {
    param(
        [hashtable]$FilesResult,
        [hashtable]$DirectoriesResult
    )

    Write-ColorOutput "`n" "White"
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    Write-ColorOutput "           üìã –û–¢–ß–ï–¢ –û –ù–ê–ô–î–ï–ù–ù–´–• –§–ê–ô–õ–ê–• –î–õ–Ø –û–ß–ò–°–¢–ö–ò" "Blue"
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
    Write-ColorOutput "`nüìÑ –í–†–ï–ú–ï–ù–ù–´–ï –§–ê–ô–õ–´:" "Green"
    Write-ColorOutput "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $($FilesResult.Count) —Ñ–∞–π–ª–æ–≤" "White"
    Write-ColorOutput "   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $(Format-FileSize $FilesResult.TotalSize)" "White"

    if ($FilesResult.Count -gt 0 -and $Verbose) {
        Write-ColorOutput "`n   –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:" "Gray"
        $FilesResult.Files | Select-Object -First 10 | ForEach-Object {
            Write-ColorOutput "   ‚Ä¢ $($_.Name) ($(Format-FileSize $_.Length))" "Gray"
        }
        if ($FilesResult.Count -gt 10) {
            Write-ColorOutput "   ... –∏ –µ—â–µ $($FilesResult.Count - 10) —Ñ–∞–π–ª–æ–≤" "Gray"
        }
    }

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–æ–∫
    Write-ColorOutput "`nüìÅ –í–†–ï–ú–ï–ù–ù–´–ï –ü–ê–ü–ö–ò:" "Green"
    Write-ColorOutput "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $($DirectoriesResult.Count) –ø–∞–ø–æ–∫" "White"
    Write-ColorOutput "   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $(Format-FileSize $DirectoriesResult.TotalSize)" "White"

    if ($DirectoriesResult.Count -gt 0 -and $Verbose) {
        Write-ColorOutput "`n   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:" "Gray"
        $DirectoriesResult.Directories | Select-Object -First 10 | ForEach-Object {
            Write-ColorOutput "   ‚Ä¢ $($_.Path) ($(Format-FileSize $_.Size), $($_.FileCount) —Ñ–∞–π–ª–æ–≤)" "Gray"
        }
        if ($DirectoriesResult.Count -gt 10) {
            Write-ColorOutput "   ... –∏ –µ—â–µ $($DirectoriesResult.Count - 10) –ø–∞–ø–æ–∫" "Gray"
        }
    }

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    $TotalSize = $FilesResult.TotalSize + $DirectoriesResult.TotalSize
    $TotalItems = $FilesResult.Count + $DirectoriesResult.Count

    Write-ColorOutput "`nüíæ –û–ë–©–ò–ô –ò–¢–û–ì:" "Yellow"
    Write-ColorOutput "   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: $TotalItems" "White"
    Write-ColorOutput "   –ë—É–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: $(Format-FileSize $TotalSize)" "White"

    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"

    return $TotalSize -gt 0
}

function Confirm-Cleanup {
    param([hashtable]$FilesResult, [hashtable]$DirectoriesResult)

    if ($Force) {
        Write-ColorOutput "üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" "Yellow"
        return $true
    }

    if ($DryRun) {
        Write-ColorOutput "üîç –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏: —Ñ–∞–π–ª—ã –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã" "Blue"
        return $false
    }

    $TotalItems = $FilesResult.Count + $DirectoriesResult.Count
    if ($TotalItems -eq 0) {
        Write-ColorOutput "‚ú® –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É–∂–µ —á–∏—Å—Ç–∞—è." "Green"
        return $false
    }

    Write-ColorOutput "`n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏:" "Yellow"
    Write-ColorOutput "   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ $TotalItems —ç–ª–µ–º–µ–Ω—Ç–æ–≤" "White"
    Write-ColorOutput "   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ $(Format-FileSize ($FilesResult.TotalSize + $DirectoriesResult.TotalSize))" "White"
    Write-ColorOutput "`n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!" "Red"

    do {
        $Response = Read-Host "`nüí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É? [Y/–î–∞/N/–ù–µ—Ç]"
        $Response = $Response.Trim().ToLower()
    } while ($Response -notin @("y", "yes", "–¥–∞", "–¥", "n", "no", "–Ω–µ—Ç", "–Ω", ""))

    return $Response -in @("y", "yes", "–¥–∞", "–¥")
}

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø
# ============================================================================

function Remove-TemporaryFiles {
    param([array]$Files)

    if ($Files.Count -eq 0) {
        return @{ Success = 0; Failed = 0; Size = 0 }
    }

    Write-ColorOutput "`nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..." "Green"

    $SuccessCount = 0
    $FailedCount = 0
    $DeletedSize = 0

    foreach ($File in $Files) {
        try {
            $FileSize = $File.Length

            if ($DryRun) {
                Write-ColorOutput "   [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –£–¥–∞–ª–µ–Ω: $($File.FullName)" "Blue"
            } else {
                Remove-Item -Path $File.FullName -Force -ErrorAction Stop
                Write-ColorOutput "   ‚úÖ –£–¥–∞–ª–µ–Ω: $($File.Name)" "Green"
            }

            $SuccessCount++
            $DeletedSize += $FileSize
        }
        catch {
            Write-ColorOutput "   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ $($File.Name): $($_.Exception.Message)" "Red"
            $FailedCount++
        }
    }

    return @{
        Success = $SuccessCount
        Failed = $FailedCount
        Size = $DeletedSize
    }
}

function Remove-TemporaryDirectories {
    param([array]$Directories)

    if ($Directories.Count -eq 0) {
        return @{ Success = 0; Failed = 0; Size = 0 }
    }

    Write-ColorOutput "`nüìÅ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫..." "Green"

    $SuccessCount = 0
    $FailedCount = 0
    $DeletedSize = 0

    foreach ($Directory in $Directories) {
        try {
            $DirPath = $Directory.Path
            $DirSize = $Directory.Size

            if ($DryRun) {
                Write-ColorOutput "   [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: $DirPath" "Blue"
            } else {
                Remove-Item -Path $DirPath -Recurse -Force -ErrorAction Stop
                Write-ColorOutput "   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: $(Split-Path $DirPath -Leaf)" "Green"
            }

            $SuccessCount++
            $DeletedSize += $DirSize
        }
        catch {
            Write-ColorOutput "   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ $(Split-Path $Directory.Path -Leaf): $($_.Exception.Message)" "Red"
            $FailedCount++
        }
    }

    return @{
        Success = $SuccessCount
        Failed = $FailedCount
        Size = $DeletedSize
    }
}

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================

function Start-DevelopmentCleanup {
    param([string]$TargetPath)

    $StartTime = Get-Date

    Write-ColorOutput "üöÄ –ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò –°–†–ï–î–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò" "Green"
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    Write-ColorOutput "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $(Get-Date -Format 'dd.MM.yyyy HH:mm:ss')" "Gray"
    Write-ColorOutput "–¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å: $TargetPath" "Gray"
    Write-ColorOutput "–†–µ–∂–∏–º: $(if ($DryRun) { '–°–∏–º—É–ª—è—Ü–∏—è' } elseif ($Force) { '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π' } else { '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π' })" "Gray"
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏
    $SafePath = Get-SafePath -Path $TargetPath
    if (-not $SafePath) {
        Write-ColorOutput "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏." "Red"
        return
    }

    # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    try {
        $FilesResult = Find-TemporaryFiles -SearchPath $SafePath
        $DirectoriesResult = Find-TemporaryDirectories -SearchPath $SafePath
    }
    catch {
        Write-ColorOutput "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: $($_.Exception.Message)" "Red"
        return
    }

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    $HasItemsToDelete = Show-CleanupSummary -FilesResult $FilesResult -DirectoriesResult $DirectoriesResult

    if (-not $HasItemsToDelete) {
        Write-ColorOutput "`n‚ú® –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!" "Green"
        return
    }

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
    $ConfirmCleanup = Confirm-Cleanup -FilesResult $FilesResult -DirectoriesResult $DirectoriesResult

    if (-not $ConfirmCleanup) {
        Write-ColorOutput "`n‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º." "Yellow"
        return
    }

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
    Write-ColorOutput "`nüîÑ –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò..." "Green"
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"

    $FileCleanupResult = Remove-TemporaryFiles -Files $FilesResult.Files
    $DirectoryCleanupResult = Remove-TemporaryDirectories -Directories $DirectoriesResult.Directories

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    $EndTime = Get-Date
    $Duration = $EndTime - $StartTime

    Write-ColorOutput "`nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢" "Green"
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    Write-ColorOutput "–§–∞–π–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ: $($FileCleanupResult.Success)/$($FilesResult.Count)" "White"
    Write-ColorOutput "–ü–∞–ø–æ–∫ —É–¥–∞–ª–µ–Ω–æ: $($DirectoryCleanupResult.Success)/$($DirectoriesResult.Count)" "White"
    Write-ColorOutput "–û—à–∏–±–æ–∫: $($FileCleanupResult.Failed + $DirectoryCleanupResult.Failed)" "$(if ($FileCleanupResult.Failed + $DirectoryCleanupResult.Failed -gt 0) { 'Red' } else { 'Green' })"
    Write-ColorOutput "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: $(Format-FileSize ($FileCleanupResult.Size + $DirectoryCleanupResult.Size))" "Green"
    Write-ColorOutput "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $($Duration.TotalSeconds.ToString('F2')) —Å–µ–∫" "Gray"
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"

    if ($FileCleanupResult.Failed + $DirectoryCleanupResult.Failed -eq 0) {
        Write-ColorOutput "‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" "Green"
    } else {
        Write-ColorOutput "‚ö†Ô∏è  –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞." "Yellow"
    }
}

# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================

try {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PowerShell
    if ($PSVersionTable.PSVersion.Major -lt 5) {
        Write-ColorOutput "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è PowerShell 5.0 –∏–ª–∏ –≤—ã—à–µ!" "Red"
        exit 1
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")

    if (-not $IsAdmin -and -not $DryRun) {
        Write-ColorOutput "‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤." "Yellow"
        Write-ColorOutput "   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è." "Yellow"

        if (-not $Force) {
            $Response = Read-Host "`n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞? [Y/–î–∞/N/–ù–µ—Ç]"
            if ($Response.ToLower() -notin @("y", "yes", "–¥–∞", "–¥")) {
                Write-ColorOutput "‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." "Red"
                exit 0
            }
        }
    }

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
    Start-DevelopmentCleanup -TargetPath $Path
}
catch {
    Write-ColorOutput "üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: $($_.Exception.Message)" "Red"
    Write-ColorOutput "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: $($_.ScriptStackTrace)" "Red"
    exit 1
}

Write-ColorOutput "`nüéØ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞..." "Gray"
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
