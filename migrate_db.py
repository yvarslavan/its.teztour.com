#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import sqlite3
import os
from datetime import datetime

def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = 'blog/db/site.db'

    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False

    print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = f'blog/db/site_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
        backup_conn = sqlite3.connect(backup_path)
        conn.backup(backup_conn)
        backup_conn.close()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
        cursor.execute("PRAGMA table_info(users)")
        existing_columns = [column[1] for column in cursor.fetchall()]
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users: {existing_columns}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ browser_notifications_enabled –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'browser_notifications_enabled' not in existing_columns:
            print("‚ûï –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ browser_notifications_enabled...")
            cursor.execute("""
                ALTER TABLE users
                ADD COLUMN browser_notifications_enabled BOOLEAN DEFAULT 0 NOT NULL
            """)
            print("‚úÖ –ü–æ–ª–µ browser_notifications_enabled –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚ÑπÔ∏è  –ü–æ–ª–µ browser_notifications_enabled —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã push_subscriptions
        cursor.execute("""
            SELECT name FROM sqlite_master
            WHERE type='table' AND name='push_subscriptions'
        """)

        if not cursor.fetchone():
            print("‚ûï –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É push_subscriptions...")
            cursor.execute("""
                CREATE TABLE push_subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    endpoint TEXT NOT NULL,
                    p256dh_key TEXT NOT NULL,
                    auth_key TEXT NOT NULL,
                    user_agent TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
                    last_used DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
                    is_active BOOLEAN DEFAULT 1 NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users (id),
                    UNIQUE (user_id, endpoint)
                )
            """)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ push_subscriptions —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ push_subscriptions —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print("‚ûï –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å—ã...")
        try:
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_push_subscriptions_user_id
                ON push_subscriptions(user_id)
            """)
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_push_subscriptions_active
                ON push_subscriptions(is_active)
            """)
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_push_subscriptions_user_active
                ON push_subscriptions(user_id, is_active)
            """)
            print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        except sqlite3.Error as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("PRAGMA table_info(users)")
        updated_columns = [column[1] for column in cursor.fetchall()]
        print(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users: {updated_columns}")

        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [table[0] for table in cursor.fetchall()]
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")

        conn.close()

        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""

    db_path = 'blog/db/site.db'

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ browser_notifications_enabled
        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]

        if 'browser_notifications_enabled' not in columns:
            print("‚ùå –ü–æ–ª–µ browser_notifications_enabled –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É push_subscriptions
        cursor.execute("""
            SELECT name FROM sqlite_master
            WHERE type='table' AND name='push_subscriptions'
        """)

        if not cursor.fetchone():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ push_subscriptions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã push_subscriptions
        cursor.execute("PRAGMA table_info(push_subscriptions)")
        push_columns = [column[1] for column in cursor.fetchall()]
        required_columns = ['id', 'user_id', 'endpoint', 'p256dh_key', 'auth_key',
                          'user_agent', 'created_at', 'last_used', 'is_active']

        missing_columns = [col for col in required_columns if col not in push_columns]
        if missing_columns:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ push_subscriptions: {missing_columns}")
            return False

        conn.close()

        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 60)

    if migrate_database():
        print("\n" + "=" * 60)
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        if verify_migration():
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
            print("python wsgi.py")
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
